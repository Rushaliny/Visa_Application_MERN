{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BulkOperationBase = exports.BulkWriteShimOperation = exports.FindOperators = exports.MongoBulkWriteError = exports.WriteError = exports.WriteConcernError = exports.BulkWriteResult = exports.Batch = exports.BatchType = void 0;\nexports.mergeBatchResults = mergeBatchResults;\nconst bson_1 = require(\"../bson\");\nconst error_1 = require(\"../error\");\nconst delete_1 = require(\"../operations/delete\");\nconst execute_operation_1 = require(\"../operations/execute_operation\");\nconst insert_1 = require(\"../operations/insert\");\nconst operation_1 = require(\"../operations/operation\");\nconst update_1 = require(\"../operations/update\");\nconst utils_1 = require(\"../utils\");\nconst write_concern_1 = require(\"../write_concern\");\n/** @public */\nexports.BatchType = Object.freeze({\n  INSERT: 1,\n  UPDATE: 2,\n  DELETE: 3\n});\n/**\n * Keeps the state of a unordered batch so we can rewrite the results\n * correctly after command execution\n *\n * @public\n */\nclass Batch {\n  constructor(batchType, originalZeroIndex) {\n    this.originalZeroIndex = originalZeroIndex;\n    this.currentIndex = 0;\n    this.originalIndexes = [];\n    this.batchType = batchType;\n    this.operations = [];\n    this.size = 0;\n    this.sizeBytes = 0;\n  }\n}\nexports.Batch = Batch;\n/**\n * @public\n * The result of a bulk write.\n */\nclass BulkWriteResult {\n  static generateIdMap(ids) {\n    const idMap = {};\n    for (const doc of ids) {\n      idMap[doc.index] = doc._id;\n    }\n    return idMap;\n  }\n  /**\n   * Create a new BulkWriteResult instance\n   * @internal\n   */\n  constructor(bulkResult, isOrdered) {\n    this.result = bulkResult;\n    this.insertedCount = this.result.nInserted ?? 0;\n    this.matchedCount = this.result.nMatched ?? 0;\n    this.modifiedCount = this.result.nModified ?? 0;\n    this.deletedCount = this.result.nRemoved ?? 0;\n    this.upsertedCount = this.result.upserted.length ?? 0;\n    this.upsertedIds = BulkWriteResult.generateIdMap(this.result.upserted);\n    this.insertedIds = BulkWriteResult.generateIdMap(this.getSuccessfullyInsertedIds(bulkResult, isOrdered));\n    Object.defineProperty(this, 'result', {\n      value: this.result,\n      enumerable: false\n    });\n  }\n  /** Evaluates to true if the bulk operation correctly executes */\n  get ok() {\n    return this.result.ok;\n  }\n  /**\n   * Returns document_ids that were actually inserted\n   * @internal\n   */\n  getSuccessfullyInsertedIds(bulkResult, isOrdered) {\n    if (bulkResult.writeErrors.length === 0) return bulkResult.insertedIds;\n    if (isOrdered) {\n      return bulkResult.insertedIds.slice(0, bulkResult.writeErrors[0].index);\n    }\n    return bulkResult.insertedIds.filter(_ref => {\n      let {\n        index\n      } = _ref;\n      return !bulkResult.writeErrors.some(writeError => index === writeError.index);\n    });\n  }\n  /** Returns the upserted id at the given index */\n  getUpsertedIdAt(index) {\n    return this.result.upserted[index];\n  }\n  /** Returns raw internal result */\n  getRawResponse() {\n    return this.result;\n  }\n  /** Returns true if the bulk operation contains a write error */\n  hasWriteErrors() {\n    return this.result.writeErrors.length > 0;\n  }\n  /** Returns the number of write errors from the bulk operation */\n  getWriteErrorCount() {\n    return this.result.writeErrors.length;\n  }\n  /** Returns a specific write error object */\n  getWriteErrorAt(index) {\n    return index < this.result.writeErrors.length ? this.result.writeErrors[index] : undefined;\n  }\n  /** Retrieve all write errors */\n  getWriteErrors() {\n    return this.result.writeErrors;\n  }\n  /** Retrieve the write concern error if one exists */\n  getWriteConcernError() {\n    if (this.result.writeConcernErrors.length === 0) {\n      return;\n    } else if (this.result.writeConcernErrors.length === 1) {\n      // Return the error\n      return this.result.writeConcernErrors[0];\n    } else {\n      // Combine the errors\n      let errmsg = '';\n      for (let i = 0; i < this.result.writeConcernErrors.length; i++) {\n        const err = this.result.writeConcernErrors[i];\n        errmsg = errmsg + err.errmsg;\n        // TODO: Something better\n        if (i === 0) errmsg = errmsg + ' and ';\n      }\n      return new WriteConcernError({\n        errmsg,\n        code: error_1.MONGODB_ERROR_CODES.WriteConcernTimeout\n      });\n    }\n  }\n  toString() {\n    return `BulkWriteResult(${bson_1.EJSON.stringify(this.result)})`;\n  }\n  isOk() {\n    return this.result.ok === 1;\n  }\n}\nexports.BulkWriteResult = BulkWriteResult;\n/**\n * An error representing a failure by the server to apply the requested write concern to the bulk operation.\n * @public\n * @category Error\n */\nclass WriteConcernError {\n  constructor(error) {\n    this.serverError = error;\n  }\n  /** Write concern error code. */\n  get code() {\n    return this.serverError.code;\n  }\n  /** Write concern error message. */\n  get errmsg() {\n    return this.serverError.errmsg;\n  }\n  /** Write concern error info. */\n  get errInfo() {\n    return this.serverError.errInfo;\n  }\n  toJSON() {\n    return this.serverError;\n  }\n  toString() {\n    return `WriteConcernError(${this.errmsg})`;\n  }\n}\nexports.WriteConcernError = WriteConcernError;\n/**\n * An error that occurred during a BulkWrite on the server.\n * @public\n * @category Error\n */\nclass WriteError {\n  constructor(err) {\n    this.err = err;\n  }\n  /** WriteError code. */\n  get code() {\n    return this.err.code;\n  }\n  /** WriteError original bulk operation index. */\n  get index() {\n    return this.err.index;\n  }\n  /** WriteError message. */\n  get errmsg() {\n    return this.err.errmsg;\n  }\n  /** WriteError details. */\n  get errInfo() {\n    return this.err.errInfo;\n  }\n  /** Returns the underlying operation that caused the error */\n  getOperation() {\n    return this.err.op;\n  }\n  toJSON() {\n    return {\n      code: this.err.code,\n      index: this.err.index,\n      errmsg: this.err.errmsg,\n      op: this.err.op\n    };\n  }\n  toString() {\n    return `WriteError(${JSON.stringify(this.toJSON())})`;\n  }\n}\nexports.WriteError = WriteError;\n/** Merges results into shared data structure */\nfunction mergeBatchResults(batch, bulkResult, err, result) {\n  // If we have an error set the result to be the err object\n  if (err) {\n    result = err;\n  } else if (result && result.result) {\n    result = result.result;\n  }\n  if (result == null) {\n    return;\n  }\n  // Do we have a top level error stop processing and return\n  if (result.ok === 0 && bulkResult.ok === 1) {\n    bulkResult.ok = 0;\n    const writeError = {\n      index: 0,\n      code: result.code || 0,\n      errmsg: result.message,\n      errInfo: result.errInfo,\n      op: batch.operations[0]\n    };\n    bulkResult.writeErrors.push(new WriteError(writeError));\n    return;\n  } else if (result.ok === 0 && bulkResult.ok === 0) {\n    return;\n  }\n  // If we have an insert Batch type\n  if (isInsertBatch(batch) && result.n) {\n    bulkResult.nInserted = bulkResult.nInserted + result.n;\n  }\n  // If we have an insert Batch type\n  if (isDeleteBatch(batch) && result.n) {\n    bulkResult.nRemoved = bulkResult.nRemoved + result.n;\n  }\n  let nUpserted = 0;\n  // We have an array of upserted values, we need to rewrite the indexes\n  if (Array.isArray(result.upserted)) {\n    nUpserted = result.upserted.length;\n    for (let i = 0; i < result.upserted.length; i++) {\n      bulkResult.upserted.push({\n        index: result.upserted[i].index + batch.originalZeroIndex,\n        _id: result.upserted[i]._id\n      });\n    }\n  } else if (result.upserted) {\n    nUpserted = 1;\n    bulkResult.upserted.push({\n      index: batch.originalZeroIndex,\n      _id: result.upserted\n    });\n  }\n  // If we have an update Batch type\n  if (isUpdateBatch(batch) && result.n) {\n    const nModified = result.nModified;\n    bulkResult.nUpserted = bulkResult.nUpserted + nUpserted;\n    bulkResult.nMatched = bulkResult.nMatched + (result.n - nUpserted);\n    if (typeof nModified === 'number') {\n      bulkResult.nModified = bulkResult.nModified + nModified;\n    } else {\n      bulkResult.nModified = 0;\n    }\n  }\n  if (Array.isArray(result.writeErrors)) {\n    for (let i = 0; i < result.writeErrors.length; i++) {\n      const writeError = {\n        index: batch.originalIndexes[result.writeErrors[i].index],\n        code: result.writeErrors[i].code,\n        errmsg: result.writeErrors[i].errmsg,\n        errInfo: result.writeErrors[i].errInfo,\n        op: batch.operations[result.writeErrors[i].index]\n      };\n      bulkResult.writeErrors.push(new WriteError(writeError));\n    }\n  }\n  if (result.writeConcernError) {\n    bulkResult.writeConcernErrors.push(new WriteConcernError(result.writeConcernError));\n  }\n}\nasync function executeCommands(bulkOperation, options) {\n  if (bulkOperation.s.batches.length === 0) {\n    return new BulkWriteResult(bulkOperation.s.bulkResult, bulkOperation.isOrdered);\n  }\n  for (const batch of bulkOperation.s.batches) {\n    const finalOptions = (0, utils_1.resolveOptions)(bulkOperation, {\n      ...options,\n      ordered: bulkOperation.isOrdered\n    });\n    if (finalOptions.bypassDocumentValidation !== true) {\n      delete finalOptions.bypassDocumentValidation;\n    }\n    // Is the bypassDocumentValidation options specific\n    if (bulkOperation.s.bypassDocumentValidation === true) {\n      finalOptions.bypassDocumentValidation = true;\n    }\n    // Is the checkKeys option disabled\n    if (bulkOperation.s.checkKeys === false) {\n      finalOptions.checkKeys = false;\n    }\n    if (finalOptions.retryWrites) {\n      if (isUpdateBatch(batch)) {\n        finalOptions.retryWrites = finalOptions.retryWrites && !batch.operations.some(op => op.multi);\n      }\n      if (isDeleteBatch(batch)) {\n        finalOptions.retryWrites = finalOptions.retryWrites && !batch.operations.some(op => op.limit === 0);\n      }\n    }\n    const operation = isInsertBatch(batch) ? new insert_1.InsertOperation(bulkOperation.s.namespace, batch.operations, finalOptions) : isUpdateBatch(batch) ? new update_1.UpdateOperation(bulkOperation.s.namespace, batch.operations, finalOptions) : isDeleteBatch(batch) ? new delete_1.DeleteOperation(bulkOperation.s.namespace, batch.operations, finalOptions) : null;\n    if (operation == null) throw new error_1.MongoRuntimeError(`Unknown batchType: ${batch.batchType}`);\n    let thrownError = null;\n    let result;\n    try {\n      result = await (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.client, operation, finalOptions.timeoutContext);\n    } catch (error) {\n      thrownError = error;\n    }\n    if (thrownError != null) {\n      if (thrownError instanceof error_1.MongoWriteConcernError) {\n        mergeBatchResults(batch, bulkOperation.s.bulkResult, thrownError, result);\n        const writeResult = new BulkWriteResult(bulkOperation.s.bulkResult, bulkOperation.isOrdered);\n        throw new MongoBulkWriteError({\n          message: thrownError.result.writeConcernError.errmsg,\n          code: thrownError.result.writeConcernError.code\n        }, writeResult);\n      } else {\n        // Error is a driver related error not a bulk op error, return early\n        throw new MongoBulkWriteError(thrownError, new BulkWriteResult(bulkOperation.s.bulkResult, bulkOperation.isOrdered));\n      }\n    }\n    mergeBatchResults(batch, bulkOperation.s.bulkResult, thrownError, result);\n    const writeResult = new BulkWriteResult(bulkOperation.s.bulkResult, bulkOperation.isOrdered);\n    bulkOperation.handleWriteError(writeResult);\n  }\n  bulkOperation.s.batches.length = 0;\n  const writeResult = new BulkWriteResult(bulkOperation.s.bulkResult, bulkOperation.isOrdered);\n  bulkOperation.handleWriteError(writeResult);\n  return writeResult;\n}\n/**\n * An error indicating an unsuccessful Bulk Write\n * @public\n * @category Error\n */\nclass MongoBulkWriteError extends error_1.MongoServerError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(error, result) {\n    super(error);\n    this.writeErrors = [];\n    if (error instanceof WriteConcernError) this.err = error;else if (!(error instanceof Error)) {\n      this.message = error.message;\n      this.code = error.code;\n      this.writeErrors = error.writeErrors ?? [];\n    }\n    this.result = result;\n    Object.assign(this, error);\n  }\n  get name() {\n    return 'MongoBulkWriteError';\n  }\n  /** Number of documents inserted. */\n  get insertedCount() {\n    return this.result.insertedCount;\n  }\n  /** Number of documents matched for update. */\n  get matchedCount() {\n    return this.result.matchedCount;\n  }\n  /** Number of documents modified. */\n  get modifiedCount() {\n    return this.result.modifiedCount;\n  }\n  /** Number of documents deleted. */\n  get deletedCount() {\n    return this.result.deletedCount;\n  }\n  /** Number of documents upserted. */\n  get upsertedCount() {\n    return this.result.upsertedCount;\n  }\n  /** Inserted document generated Id's, hash key is the index of the originating operation */\n  get insertedIds() {\n    return this.result.insertedIds;\n  }\n  /** Upserted document generated Id's, hash key is the index of the originating operation */\n  get upsertedIds() {\n    return this.result.upsertedIds;\n  }\n}\nexports.MongoBulkWriteError = MongoBulkWriteError;\n/**\n * A builder object that is returned from {@link BulkOperationBase#find}.\n * Is used to build a write operation that involves a query filter.\n *\n * @public\n */\nclass FindOperators {\n  /**\n   * Creates a new FindOperators object.\n   * @internal\n   */\n  constructor(bulkOperation) {\n    this.bulkOperation = bulkOperation;\n  }\n  /** Add a multiple update operation to the bulk operation */\n  update(updateDocument) {\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, updateDocument, {\n      ...currentOp,\n      multi: true\n    }));\n  }\n  /** Add a single update operation to the bulk operation */\n  updateOne(updateDocument) {\n    if (!(0, utils_1.hasAtomicOperators)(updateDocument, this.bulkOperation.bsonOptions)) {\n      throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n    }\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, updateDocument, {\n      ...currentOp,\n      multi: false\n    }));\n  }\n  /** Add a replace one operation to the bulk operation */\n  replaceOne(replacement) {\n    if ((0, utils_1.hasAtomicOperators)(replacement)) {\n      throw new error_1.MongoInvalidArgumentError('Replacement document must not use atomic operators');\n    }\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, replacement, {\n      ...currentOp,\n      multi: false\n    }));\n  }\n  /** Add a delete one operation to the bulk operation */\n  deleteOne() {\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(currentOp.selector, {\n      ...currentOp,\n      limit: 1\n    }));\n  }\n  /** Add a delete many operation to the bulk operation */\n  delete() {\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(currentOp.selector, {\n      ...currentOp,\n      limit: 0\n    }));\n  }\n  /** Upsert modifier for update bulk operation, noting that this operation is an upsert. */\n  upsert() {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n    this.bulkOperation.s.currentOp.upsert = true;\n    return this;\n  }\n  /** Specifies the collation for the query condition. */\n  collation(collation) {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n    this.bulkOperation.s.currentOp.collation = collation;\n    return this;\n  }\n  /** Specifies arrayFilters for UpdateOne or UpdateMany bulk operations. */\n  arrayFilters(arrayFilters) {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n    this.bulkOperation.s.currentOp.arrayFilters = arrayFilters;\n    return this;\n  }\n  /** Specifies hint for the bulk operation. */\n  hint(hint) {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n    this.bulkOperation.s.currentOp.hint = hint;\n    return this;\n  }\n}\nexports.FindOperators = FindOperators;\n/**\n * TODO(NODE-4063)\n * BulkWrites merge complexity is implemented in executeCommands\n * This provides a vehicle to treat bulkOperations like any other operation (hence \"shim\")\n * We would like this logic to simply live inside the BulkWriteOperation class\n * @internal\n */\nclass BulkWriteShimOperation extends operation_1.AbstractOperation {\n  constructor(bulkOperation, options) {\n    super(options);\n    this.bulkOperation = bulkOperation;\n  }\n  get commandName() {\n    return 'bulkWrite';\n  }\n  async execute(_server, session, timeoutContext) {\n    if (this.options.session == null) {\n      // An implicit session could have been created by 'executeOperation'\n      // So if we stick it on finalOptions here, each bulk operation\n      // will use this same session, it'll be passed in the same way\n      // an explicit session would be\n      this.options.session = session;\n    }\n    return await executeCommands(this.bulkOperation, {\n      ...this.options,\n      timeoutContext\n    });\n  }\n}\nexports.BulkWriteShimOperation = BulkWriteShimOperation;\n/** @public */\nclass BulkOperationBase {\n  /**\n   * Create a new OrderedBulkOperation or UnorderedBulkOperation instance\n   * @internal\n   */\n  constructor(collection, options, isOrdered) {\n    this.collection = collection;\n    // determine whether bulkOperation is ordered or unordered\n    this.isOrdered = isOrdered;\n    const topology = (0, utils_1.getTopology)(collection);\n    options = options == null ? {} : options;\n    // TODO Bring from driver information in hello\n    // Get the namespace for the write operations\n    const namespace = collection.s.namespace;\n    // Used to mark operation as executed\n    const executed = false;\n    // Current item\n    const currentOp = undefined;\n    // Set max byte size\n    const hello = topology.lastHello();\n    // If we have autoEncryption on, batch-splitting must be done on 2mb chunks, but single documents\n    // over 2mb are still allowed\n    const usingAutoEncryption = !!(topology.s.options && topology.s.options.autoEncrypter);\n    const maxBsonObjectSize = hello && hello.maxBsonObjectSize ? hello.maxBsonObjectSize : 1024 * 1024 * 16;\n    const maxBatchSizeBytes = usingAutoEncryption ? 1024 * 1024 * 2 : maxBsonObjectSize;\n    const maxWriteBatchSize = hello && hello.maxWriteBatchSize ? hello.maxWriteBatchSize : 1000;\n    // Calculates the largest possible size of an Array key, represented as a BSON string\n    // element. This calculation:\n    //     1 byte for BSON type\n    //     # of bytes = length of (string representation of (maxWriteBatchSize - 1))\n    //   + 1 bytes for null terminator\n    const maxKeySize = (maxWriteBatchSize - 1).toString(10).length + 2;\n    // Final options for retryable writes\n    let finalOptions = Object.assign({}, options);\n    finalOptions = (0, utils_1.applyRetryableWrites)(finalOptions, collection.s.db);\n    // Final results\n    const bulkResult = {\n      ok: 1,\n      writeErrors: [],\n      writeConcernErrors: [],\n      insertedIds: [],\n      nInserted: 0,\n      nUpserted: 0,\n      nMatched: 0,\n      nModified: 0,\n      nRemoved: 0,\n      upserted: []\n    };\n    // Internal state\n    this.s = {\n      // Final result\n      bulkResult,\n      // Current batch state\n      currentBatch: undefined,\n      currentIndex: 0,\n      // ordered specific\n      currentBatchSize: 0,\n      currentBatchSizeBytes: 0,\n      // unordered specific\n      currentInsertBatch: undefined,\n      currentUpdateBatch: undefined,\n      currentRemoveBatch: undefined,\n      batches: [],\n      // Write concern\n      writeConcern: write_concern_1.WriteConcern.fromOptions(options),\n      // Max batch size options\n      maxBsonObjectSize,\n      maxBatchSizeBytes,\n      maxWriteBatchSize,\n      maxKeySize,\n      // Namespace\n      namespace,\n      // Topology\n      topology,\n      // Options\n      options: finalOptions,\n      // BSON options\n      bsonOptions: (0, bson_1.resolveBSONOptions)(options),\n      // Current operation\n      currentOp,\n      // Executed\n      executed,\n      // Collection\n      collection,\n      // Fundamental error\n      err: undefined,\n      // check keys\n      checkKeys: typeof options.checkKeys === 'boolean' ? options.checkKeys : false\n    };\n    // bypass Validation\n    if (options.bypassDocumentValidation === true) {\n      this.s.bypassDocumentValidation = true;\n    }\n  }\n  /**\n   * Add a single insert document to the bulk operation\n   *\n   * @example\n   * ```ts\n   * const bulkOp = collection.initializeOrderedBulkOp();\n   *\n   * // Adds three inserts to the bulkOp.\n   * bulkOp\n   *   .insert({ a: 1 })\n   *   .insert({ b: 2 })\n   *   .insert({ c: 3 });\n   * await bulkOp.execute();\n   * ```\n   */\n  insert(document) {\n    (0, utils_1.maybeAddIdToDocuments)(this.collection, document, {\n      forceServerObjectId: this.shouldForceServerObjectId()\n    });\n    return this.addToOperationsList(exports.BatchType.INSERT, document);\n  }\n  /**\n   * Builds a find operation for an update/updateOne/delete/deleteOne/replaceOne.\n   * Returns a builder object used to complete the definition of the operation.\n   *\n   * @example\n   * ```ts\n   * const bulkOp = collection.initializeOrderedBulkOp();\n   *\n   * // Add an updateOne to the bulkOp\n   * bulkOp.find({ a: 1 }).updateOne({ $set: { b: 2 } });\n   *\n   * // Add an updateMany to the bulkOp\n   * bulkOp.find({ c: 3 }).update({ $set: { d: 4 } });\n   *\n   * // Add an upsert\n   * bulkOp.find({ e: 5 }).upsert().updateOne({ $set: { f: 6 } });\n   *\n   * // Add a deletion\n   * bulkOp.find({ g: 7 }).deleteOne();\n   *\n   * // Add a multi deletion\n   * bulkOp.find({ h: 8 }).delete();\n   *\n   * // Add a replaceOne\n   * bulkOp.find({ i: 9 }).replaceOne({writeConcern: { j: 10 }});\n   *\n   * // Update using a pipeline (requires Mongodb 4.2 or higher)\n   * bulk.find({ k: 11, y: { $exists: true }, z: { $exists: true } }).updateOne([\n   *   { $set: { total: { $sum: [ '$y', '$z' ] } } }\n   * ]);\n   *\n   * // All of the ops will now be executed\n   * await bulkOp.execute();\n   * ```\n   */\n  find(selector) {\n    if (!selector) {\n      throw new error_1.MongoInvalidArgumentError('Bulk find operation must specify a selector');\n    }\n    // Save a current selector\n    this.s.currentOp = {\n      selector: selector\n    };\n    return new FindOperators(this);\n  }\n  /** Specifies a raw operation to perform in the bulk write. */\n  raw(op) {\n    if (op == null || typeof op !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Operation must be an object with an operation key');\n    }\n    if ('insertOne' in op) {\n      const forceServerObjectId = this.shouldForceServerObjectId();\n      const document = op.insertOne && op.insertOne.document == null ?\n      // TODO(NODE-6003): remove support for omitting the `documents` subdocument in bulk inserts\n      op.insertOne : op.insertOne.document;\n      (0, utils_1.maybeAddIdToDocuments)(this.collection, document, {\n        forceServerObjectId\n      });\n      return this.addToOperationsList(exports.BatchType.INSERT, document);\n    }\n    if ('replaceOne' in op || 'updateOne' in op || 'updateMany' in op) {\n      if ('replaceOne' in op) {\n        if ('q' in op.replaceOne) {\n          throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n        const updateStatement = (0, update_1.makeUpdateStatement)(op.replaceOne.filter, op.replaceOne.replacement, {\n          ...op.replaceOne,\n          multi: false\n        });\n        if ((0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n          throw new error_1.MongoInvalidArgumentError('Replacement document must not use atomic operators');\n        }\n        return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n      }\n      if ('updateOne' in op) {\n        if ('q' in op.updateOne) {\n          throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n        const updateStatement = (0, update_1.makeUpdateStatement)(op.updateOne.filter, op.updateOne.update, {\n          ...op.updateOne,\n          multi: false\n        });\n        if (!(0, utils_1.hasAtomicOperators)(updateStatement.u, this.bsonOptions)) {\n          throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n        return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n      }\n      if ('updateMany' in op) {\n        if ('q' in op.updateMany) {\n          throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n        const updateStatement = (0, update_1.makeUpdateStatement)(op.updateMany.filter, op.updateMany.update, {\n          ...op.updateMany,\n          multi: true\n        });\n        if (!(0, utils_1.hasAtomicOperators)(updateStatement.u, this.bsonOptions)) {\n          throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n        return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n      }\n    }\n    if ('deleteOne' in op) {\n      if ('q' in op.deleteOne) {\n        throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n      }\n      return this.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(op.deleteOne.filter, {\n        ...op.deleteOne,\n        limit: 1\n      }));\n    }\n    if ('deleteMany' in op) {\n      if ('q' in op.deleteMany) {\n        throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n      }\n      return this.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(op.deleteMany.filter, {\n        ...op.deleteMany,\n        limit: 0\n      }));\n    }\n    // otherwise an unknown operation was provided\n    throw new error_1.MongoInvalidArgumentError('bulkWrite only supports insertOne, updateOne, updateMany, deleteOne, deleteMany');\n  }\n  get length() {\n    return this.s.currentIndex;\n  }\n  get bsonOptions() {\n    return this.s.bsonOptions;\n  }\n  get writeConcern() {\n    return this.s.writeConcern;\n  }\n  get batches() {\n    const batches = [...this.s.batches];\n    if (this.isOrdered) {\n      if (this.s.currentBatch) batches.push(this.s.currentBatch);\n    } else {\n      if (this.s.currentInsertBatch) batches.push(this.s.currentInsertBatch);\n      if (this.s.currentUpdateBatch) batches.push(this.s.currentUpdateBatch);\n      if (this.s.currentRemoveBatch) batches.push(this.s.currentRemoveBatch);\n    }\n    return batches;\n  }\n  async execute() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (this.s.executed) {\n      throw new error_1.MongoBatchReExecutionError();\n    }\n    const writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n    if (writeConcern) {\n      this.s.writeConcern = writeConcern;\n    }\n    // If we have current batch\n    if (this.isOrdered) {\n      if (this.s.currentBatch) this.s.batches.push(this.s.currentBatch);\n    } else {\n      if (this.s.currentInsertBatch) this.s.batches.push(this.s.currentInsertBatch);\n      if (this.s.currentUpdateBatch) this.s.batches.push(this.s.currentUpdateBatch);\n      if (this.s.currentRemoveBatch) this.s.batches.push(this.s.currentRemoveBatch);\n    }\n    // If we have no operations in the bulk raise an error\n    if (this.s.batches.length === 0) {\n      throw new error_1.MongoInvalidArgumentError('Invalid BulkOperation, Batch cannot be empty');\n    }\n    this.s.executed = true;\n    const finalOptions = {\n      ...this.s.options,\n      ...options\n    };\n    const operation = new BulkWriteShimOperation(this, finalOptions);\n    return await (0, execute_operation_1.executeOperation)(this.s.collection.client, operation, finalOptions.timeoutContext);\n  }\n  /**\n   * Handles the write error before executing commands\n   * @internal\n   */\n  handleWriteError(writeResult) {\n    if (this.s.bulkResult.writeErrors.length > 0) {\n      const msg = this.s.bulkResult.writeErrors[0].errmsg ? this.s.bulkResult.writeErrors[0].errmsg : 'write operation failed';\n      throw new MongoBulkWriteError({\n        message: msg,\n        code: this.s.bulkResult.writeErrors[0].code,\n        writeErrors: this.s.bulkResult.writeErrors\n      }, writeResult);\n    }\n    const writeConcernError = writeResult.getWriteConcernError();\n    if (writeConcernError) {\n      throw new MongoBulkWriteError(writeConcernError, writeResult);\n    }\n  }\n  shouldForceServerObjectId() {\n    return this.s.options.forceServerObjectId === true || this.s.collection.s.db.options?.forceServerObjectId === true;\n  }\n}\nexports.BulkOperationBase = BulkOperationBase;\nfunction isInsertBatch(batch) {\n  return batch.batchType === exports.BatchType.INSERT;\n}\nfunction isUpdateBatch(batch) {\n  return batch.batchType === exports.BatchType.UPDATE;\n}\nfunction isDeleteBatch(batch) {\n  return batch.batchType === exports.BatchType.DELETE;\n}\nfunction buildCurrentOp(bulkOp) {\n  let {\n    currentOp\n  } = bulkOp.s;\n  bulkOp.s.currentOp = undefined;\n  if (!currentOp) currentOp = {};\n  return currentOp;\n}","map":{"version":3,"names":["exports","mergeBatchResults","bson_1","require","error_1","delete_1","execute_operation_1","insert_1","operation_1","update_1","utils_1","write_concern_1","BatchType","Object","freeze","INSERT","UPDATE","DELETE","Batch","constructor","batchType","originalZeroIndex","currentIndex","originalIndexes","operations","size","sizeBytes","BulkWriteResult","generateIdMap","ids","idMap","doc","index","_id","bulkResult","isOrdered","result","insertedCount","nInserted","matchedCount","nMatched","modifiedCount","nModified","deletedCount","nRemoved","upsertedCount","upserted","length","upsertedIds","insertedIds","getSuccessfullyInsertedIds","defineProperty","value","enumerable","ok","writeErrors","slice","filter","_ref","some","writeError","getUpsertedIdAt","getRawResponse","hasWriteErrors","getWriteErrorCount","getWriteErrorAt","undefined","getWriteErrors","getWriteConcernError","writeConcernErrors","errmsg","i","err","WriteConcernError","code","MONGODB_ERROR_CODES","WriteConcernTimeout","toString","EJSON","stringify","isOk","error","serverError","errInfo","toJSON","WriteError","getOperation","op","JSON","batch","message","push","isInsertBatch","n","isDeleteBatch","nUpserted","Array","isArray","isUpdateBatch","writeConcernError","executeCommands","bulkOperation","options","s","batches","finalOptions","resolveOptions","ordered","bypassDocumentValidation","checkKeys","retryWrites","multi","limit","operation","InsertOperation","namespace","UpdateOperation","DeleteOperation","MongoRuntimeError","thrownError","executeOperation","collection","client","timeoutContext","MongoWriteConcernError","writeResult","MongoBulkWriteError","handleWriteError","MongoServerError","Error","assign","name","FindOperators","update","updateDocument","currentOp","buildCurrentOp","addToOperationsList","makeUpdateStatement","selector","updateOne","hasAtomicOperators","bsonOptions","MongoInvalidArgumentError","replaceOne","replacement","deleteOne","makeDeleteStatement","delete","upsert","collation","arrayFilters","hint","BulkWriteShimOperation","AbstractOperation","commandName","execute","_server","session","BulkOperationBase","topology","getTopology","executed","hello","lastHello","usingAutoEncryption","autoEncrypter","maxBsonObjectSize","maxBatchSizeBytes","maxWriteBatchSize","maxKeySize","applyRetryableWrites","db","currentBatch","currentBatchSize","currentBatchSizeBytes","currentInsertBatch","currentUpdateBatch","currentRemoveBatch","writeConcern","WriteConcern","fromOptions","resolveBSONOptions","insert","document","maybeAddIdToDocuments","forceServerObjectId","shouldForceServerObjectId","find","raw","insertOne","updateStatement","u","updateMany","deleteMany","arguments","MongoBatchReExecutionError","msg","bulkOp"],"sources":["C:\\Users\\asmee\\Documents\\Visa-Application\\node_modules\\mongodb\\src\\bulk\\common.ts"],"sourcesContent":["import { type BSONSerializeOptions, type Document, EJSON, resolveBSONOptions } from '../bson';\nimport type { Collection } from '../collection';\nimport {\n  type AnyError,\n  MongoBatchReExecutionError,\n  MONGODB_ERROR_CODES,\n  MongoInvalidArgumentError,\n  MongoRuntimeError,\n  MongoServerError,\n  MongoWriteConcernError\n} from '../error';\nimport type { Filter, OneOrMore, OptionalId, UpdateFilter, WithoutId } from '../mongo_types';\nimport type { CollationOptions, CommandOperationOptions } from '../operations/command';\nimport { DeleteOperation, type DeleteStatement, makeDeleteStatement } from '../operations/delete';\nimport { executeOperation } from '../operations/execute_operation';\nimport { InsertOperation } from '../operations/insert';\nimport { AbstractOperation, type Hint } from '../operations/operation';\nimport { makeUpdateStatement, UpdateOperation, type UpdateStatement } from '../operations/update';\nimport type { Server } from '../sdam/server';\nimport type { Topology } from '../sdam/topology';\nimport type { ClientSession } from '../sessions';\nimport { type Sort } from '../sort';\nimport { type TimeoutContext } from '../timeout';\nimport {\n  applyRetryableWrites,\n  getTopology,\n  hasAtomicOperators,\n  maybeAddIdToDocuments,\n  type MongoDBNamespace,\n  resolveOptions\n} from '../utils';\nimport { WriteConcern } from '../write_concern';\n\n/** @public */\nexport const BatchType = Object.freeze({\n  INSERT: 1,\n  UPDATE: 2,\n  DELETE: 3\n} as const);\n\n/** @public */\nexport type BatchType = (typeof BatchType)[keyof typeof BatchType];\n\n/** @public */\nexport interface InsertOneModel<TSchema extends Document = Document> {\n  /** The document to insert. */\n  document: OptionalId<TSchema>;\n}\n\n/** @public */\nexport interface DeleteOneModel<TSchema extends Document = Document> {\n  /** The filter to limit the deleted documents. */\n  filter: Filter<TSchema>;\n  /** Specifies a collation. */\n  collation?: CollationOptions;\n  /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\n  hint?: Hint;\n}\n\n/** @public */\nexport interface DeleteManyModel<TSchema extends Document = Document> {\n  /** The filter to limit the deleted documents. */\n  filter: Filter<TSchema>;\n  /** Specifies a collation. */\n  collation?: CollationOptions;\n  /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\n  hint?: Hint;\n}\n\n/** @public */\nexport interface ReplaceOneModel<TSchema extends Document = Document> {\n  /** The filter that specifies which document to replace. In the case of multiple matches, the first document matched is replaced. */\n  filter: Filter<TSchema>;\n  /** The document with which to replace the matched document. */\n  replacement: WithoutId<TSchema>;\n  /** Specifies a collation. */\n  collation?: CollationOptions;\n  /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\n  hint?: Hint;\n  /** When true, creates a new document if no document matches the query. */\n  upsert?: boolean;\n  /** Specifies the sort order for the documents matched by the filter. */\n  sort?: Sort;\n}\n\n/** @public */\nexport interface UpdateOneModel<TSchema extends Document = Document> {\n  /** The filter that specifies which document to update. In the case of multiple matches, the first document matched is updated. */\n  filter: Filter<TSchema>;\n  /**\n   * The modifications to apply. The value can be either:\n   * UpdateFilter<TSchema> - A document that contains update operator expressions,\n   * Document[] - an aggregation pipeline.\n   */\n  update: UpdateFilter<TSchema> | Document[];\n  /** A set of filters specifying to which array elements an update should apply. */\n  arrayFilters?: Document[];\n  /** Specifies a collation. */\n  collation?: CollationOptions;\n  /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\n  hint?: Hint;\n  /** When true, creates a new document if no document matches the query. */\n  upsert?: boolean;\n  /** Specifies the sort order for the documents matched by the filter. */\n  sort?: Sort;\n}\n\n/** @public */\nexport interface UpdateManyModel<TSchema extends Document = Document> {\n  /** The filter to limit the updated documents. */\n  filter: Filter<TSchema>;\n  /**\n   * The modifications to apply. The value can be either:\n   * UpdateFilter<TSchema> - A document that contains update operator expressions,\n   * Document[] - an aggregation pipeline.\n   */\n  update: UpdateFilter<TSchema> | Document[];\n  /** A set of filters specifying to which array elements an update should apply. */\n  arrayFilters?: Document[];\n  /** Specifies a collation. */\n  collation?: CollationOptions;\n  /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\n  hint?: Hint;\n  /** When true, creates a new document if no document matches the query. */\n  upsert?: boolean;\n}\n\n/** @public */\nexport type AnyBulkWriteOperation<TSchema extends Document = Document> =\n  | { insertOne: InsertOneModel<TSchema> }\n  | { replaceOne: ReplaceOneModel<TSchema> }\n  | { updateOne: UpdateOneModel<TSchema> }\n  | { updateMany: UpdateManyModel<TSchema> }\n  | { deleteOne: DeleteOneModel<TSchema> }\n  | { deleteMany: DeleteManyModel<TSchema> };\n\n/** @internal */\nexport interface BulkResult {\n  ok: number;\n  writeErrors: WriteError[];\n  writeConcernErrors: WriteConcernError[];\n  insertedIds: Document[];\n  nInserted: number;\n  nUpserted: number;\n  nMatched: number;\n  nModified: number;\n  nRemoved: number;\n  upserted: Document[];\n}\n\n/**\n * Keeps the state of a unordered batch so we can rewrite the results\n * correctly after command execution\n *\n * @public\n */\nexport class Batch<T = Document> {\n  originalZeroIndex: number;\n  currentIndex: number;\n  originalIndexes: number[];\n  batchType: BatchType;\n  operations: T[];\n  size: number;\n  sizeBytes: number;\n\n  constructor(batchType: BatchType, originalZeroIndex: number) {\n    this.originalZeroIndex = originalZeroIndex;\n    this.currentIndex = 0;\n    this.originalIndexes = [];\n    this.batchType = batchType;\n    this.operations = [];\n    this.size = 0;\n    this.sizeBytes = 0;\n  }\n}\n\n/**\n * @public\n * The result of a bulk write.\n */\nexport class BulkWriteResult {\n  private readonly result: BulkResult;\n  /** Number of documents inserted. */\n  readonly insertedCount: number;\n  /** Number of documents matched for update. */\n  readonly matchedCount: number;\n  /** Number of documents modified. */\n  readonly modifiedCount: number;\n  /** Number of documents deleted. */\n  readonly deletedCount: number;\n  /** Number of documents upserted. */\n  readonly upsertedCount: number;\n  /** Upserted document generated Id's, hash key is the index of the originating operation */\n  readonly upsertedIds: { [key: number]: any };\n  /** Inserted document generated Id's, hash key is the index of the originating operation */\n  readonly insertedIds: { [key: number]: any };\n\n  private static generateIdMap(ids: Document[]): { [key: number]: any } {\n    const idMap: { [index: number]: any } = {};\n    for (const doc of ids) {\n      idMap[doc.index] = doc._id;\n    }\n    return idMap;\n  }\n\n  /**\n   * Create a new BulkWriteResult instance\n   * @internal\n   */\n  constructor(bulkResult: BulkResult, isOrdered: boolean) {\n    this.result = bulkResult;\n    this.insertedCount = this.result.nInserted ?? 0;\n    this.matchedCount = this.result.nMatched ?? 0;\n    this.modifiedCount = this.result.nModified ?? 0;\n    this.deletedCount = this.result.nRemoved ?? 0;\n    this.upsertedCount = this.result.upserted.length ?? 0;\n    this.upsertedIds = BulkWriteResult.generateIdMap(this.result.upserted);\n    this.insertedIds = BulkWriteResult.generateIdMap(\n      this.getSuccessfullyInsertedIds(bulkResult, isOrdered)\n    );\n    Object.defineProperty(this, 'result', { value: this.result, enumerable: false });\n  }\n\n  /** Evaluates to true if the bulk operation correctly executes */\n  get ok(): number {\n    return this.result.ok;\n  }\n\n  /**\n   * Returns document_ids that were actually inserted\n   * @internal\n   */\n  private getSuccessfullyInsertedIds(bulkResult: BulkResult, isOrdered: boolean): Document[] {\n    if (bulkResult.writeErrors.length === 0) return bulkResult.insertedIds;\n\n    if (isOrdered) {\n      return bulkResult.insertedIds.slice(0, bulkResult.writeErrors[0].index);\n    }\n\n    return bulkResult.insertedIds.filter(\n      ({ index }) => !bulkResult.writeErrors.some(writeError => index === writeError.index)\n    );\n  }\n\n  /** Returns the upserted id at the given index */\n  getUpsertedIdAt(index: number): Document | undefined {\n    return this.result.upserted[index];\n  }\n\n  /** Returns raw internal result */\n  getRawResponse(): Document {\n    return this.result;\n  }\n\n  /** Returns true if the bulk operation contains a write error */\n  hasWriteErrors(): boolean {\n    return this.result.writeErrors.length > 0;\n  }\n\n  /** Returns the number of write errors from the bulk operation */\n  getWriteErrorCount(): number {\n    return this.result.writeErrors.length;\n  }\n\n  /** Returns a specific write error object */\n  getWriteErrorAt(index: number): WriteError | undefined {\n    return index < this.result.writeErrors.length ? this.result.writeErrors[index] : undefined;\n  }\n\n  /** Retrieve all write errors */\n  getWriteErrors(): WriteError[] {\n    return this.result.writeErrors;\n  }\n\n  /** Retrieve the write concern error if one exists */\n  getWriteConcernError(): WriteConcernError | undefined {\n    if (this.result.writeConcernErrors.length === 0) {\n      return;\n    } else if (this.result.writeConcernErrors.length === 1) {\n      // Return the error\n      return this.result.writeConcernErrors[0];\n    } else {\n      // Combine the errors\n      let errmsg = '';\n      for (let i = 0; i < this.result.writeConcernErrors.length; i++) {\n        const err = this.result.writeConcernErrors[i];\n        errmsg = errmsg + err.errmsg;\n\n        // TODO: Something better\n        if (i === 0) errmsg = errmsg + ' and ';\n      }\n\n      return new WriteConcernError({ errmsg, code: MONGODB_ERROR_CODES.WriteConcernTimeout });\n    }\n  }\n\n  toString(): string {\n    return `BulkWriteResult(${EJSON.stringify(this.result)})`;\n  }\n\n  isOk(): boolean {\n    return this.result.ok === 1;\n  }\n}\n\n/** @public */\nexport interface WriteConcernErrorData {\n  code: number;\n  errmsg: string;\n  errInfo?: Document;\n}\n\n/**\n * An error representing a failure by the server to apply the requested write concern to the bulk operation.\n * @public\n * @category Error\n */\nexport class WriteConcernError {\n  /** @internal */\n  private serverError: WriteConcernErrorData;\n\n  constructor(error: WriteConcernErrorData) {\n    this.serverError = error;\n  }\n\n  /** Write concern error code. */\n  get code(): number | undefined {\n    return this.serverError.code;\n  }\n\n  /** Write concern error message. */\n  get errmsg(): string | undefined {\n    return this.serverError.errmsg;\n  }\n\n  /** Write concern error info. */\n  get errInfo(): Document | undefined {\n    return this.serverError.errInfo;\n  }\n\n  toJSON(): WriteConcernErrorData {\n    return this.serverError;\n  }\n\n  toString(): string {\n    return `WriteConcernError(${this.errmsg})`;\n  }\n}\n\n/** @public */\nexport interface BulkWriteOperationError {\n  index: number;\n  code: number;\n  errmsg: string;\n  errInfo: Document;\n  op: Document | UpdateStatement | DeleteStatement;\n}\n\n/**\n * An error that occurred during a BulkWrite on the server.\n * @public\n * @category Error\n */\nexport class WriteError {\n  err: BulkWriteOperationError;\n\n  constructor(err: BulkWriteOperationError) {\n    this.err = err;\n  }\n\n  /** WriteError code. */\n  get code(): number {\n    return this.err.code;\n  }\n\n  /** WriteError original bulk operation index. */\n  get index(): number {\n    return this.err.index;\n  }\n\n  /** WriteError message. */\n  get errmsg(): string | undefined {\n    return this.err.errmsg;\n  }\n\n  /** WriteError details. */\n  get errInfo(): Document | undefined {\n    return this.err.errInfo;\n  }\n\n  /** Returns the underlying operation that caused the error */\n  getOperation(): Document {\n    return this.err.op;\n  }\n\n  toJSON(): { code: number; index: number; errmsg?: string; op: Document } {\n    return { code: this.err.code, index: this.err.index, errmsg: this.err.errmsg, op: this.err.op };\n  }\n\n  toString(): string {\n    return `WriteError(${JSON.stringify(this.toJSON())})`;\n  }\n}\n\n/** Merges results into shared data structure */\nexport function mergeBatchResults(\n  batch: Batch,\n  bulkResult: BulkResult,\n  err?: AnyError,\n  result?: Document\n): void {\n  // If we have an error set the result to be the err object\n  if (err) {\n    result = err;\n  } else if (result && result.result) {\n    result = result.result;\n  }\n\n  if (result == null) {\n    return;\n  }\n\n  // Do we have a top level error stop processing and return\n  if (result.ok === 0 && bulkResult.ok === 1) {\n    bulkResult.ok = 0;\n\n    const writeError = {\n      index: 0,\n      code: result.code || 0,\n      errmsg: result.message,\n      errInfo: result.errInfo,\n      op: batch.operations[0]\n    };\n\n    bulkResult.writeErrors.push(new WriteError(writeError));\n    return;\n  } else if (result.ok === 0 && bulkResult.ok === 0) {\n    return;\n  }\n\n  // If we have an insert Batch type\n  if (isInsertBatch(batch) && result.n) {\n    bulkResult.nInserted = bulkResult.nInserted + result.n;\n  }\n\n  // If we have an insert Batch type\n  if (isDeleteBatch(batch) && result.n) {\n    bulkResult.nRemoved = bulkResult.nRemoved + result.n;\n  }\n\n  let nUpserted = 0;\n\n  // We have an array of upserted values, we need to rewrite the indexes\n  if (Array.isArray(result.upserted)) {\n    nUpserted = result.upserted.length;\n\n    for (let i = 0; i < result.upserted.length; i++) {\n      bulkResult.upserted.push({\n        index: result.upserted[i].index + batch.originalZeroIndex,\n        _id: result.upserted[i]._id\n      });\n    }\n  } else if (result.upserted) {\n    nUpserted = 1;\n\n    bulkResult.upserted.push({\n      index: batch.originalZeroIndex,\n      _id: result.upserted\n    });\n  }\n\n  // If we have an update Batch type\n  if (isUpdateBatch(batch) && result.n) {\n    const nModified = result.nModified;\n    bulkResult.nUpserted = bulkResult.nUpserted + nUpserted;\n    bulkResult.nMatched = bulkResult.nMatched + (result.n - nUpserted);\n\n    if (typeof nModified === 'number') {\n      bulkResult.nModified = bulkResult.nModified + nModified;\n    } else {\n      bulkResult.nModified = 0;\n    }\n  }\n\n  if (Array.isArray(result.writeErrors)) {\n    for (let i = 0; i < result.writeErrors.length; i++) {\n      const writeError = {\n        index: batch.originalIndexes[result.writeErrors[i].index],\n        code: result.writeErrors[i].code,\n        errmsg: result.writeErrors[i].errmsg,\n        errInfo: result.writeErrors[i].errInfo,\n        op: batch.operations[result.writeErrors[i].index]\n      };\n\n      bulkResult.writeErrors.push(new WriteError(writeError));\n    }\n  }\n\n  if (result.writeConcernError) {\n    bulkResult.writeConcernErrors.push(new WriteConcernError(result.writeConcernError));\n  }\n}\n\nasync function executeCommands(\n  bulkOperation: BulkOperationBase,\n  options: BulkWriteOptions & { timeoutContext?: TimeoutContext | null }\n): Promise<BulkWriteResult> {\n  if (bulkOperation.s.batches.length === 0) {\n    return new BulkWriteResult(bulkOperation.s.bulkResult, bulkOperation.isOrdered);\n  }\n\n  for (const batch of bulkOperation.s.batches) {\n    const finalOptions = resolveOptions(bulkOperation, {\n      ...options,\n      ordered: bulkOperation.isOrdered\n    });\n\n    if (finalOptions.bypassDocumentValidation !== true) {\n      delete finalOptions.bypassDocumentValidation;\n    }\n\n    // Is the bypassDocumentValidation options specific\n    if (bulkOperation.s.bypassDocumentValidation === true) {\n      finalOptions.bypassDocumentValidation = true;\n    }\n\n    // Is the checkKeys option disabled\n    if (bulkOperation.s.checkKeys === false) {\n      finalOptions.checkKeys = false;\n    }\n\n    if (finalOptions.retryWrites) {\n      if (isUpdateBatch(batch)) {\n        finalOptions.retryWrites =\n          finalOptions.retryWrites && !batch.operations.some(op => op.multi);\n      }\n\n      if (isDeleteBatch(batch)) {\n        finalOptions.retryWrites =\n          finalOptions.retryWrites && !batch.operations.some(op => op.limit === 0);\n      }\n    }\n\n    const operation = isInsertBatch(batch)\n      ? new InsertOperation(bulkOperation.s.namespace, batch.operations, finalOptions)\n      : isUpdateBatch(batch)\n        ? new UpdateOperation(bulkOperation.s.namespace, batch.operations, finalOptions)\n        : isDeleteBatch(batch)\n          ? new DeleteOperation(bulkOperation.s.namespace, batch.operations, finalOptions)\n          : null;\n\n    if (operation == null) throw new MongoRuntimeError(`Unknown batchType: ${batch.batchType}`);\n\n    let thrownError = null;\n    let result;\n    try {\n      result = await executeOperation(\n        bulkOperation.s.collection.client,\n        operation,\n        finalOptions.timeoutContext\n      );\n    } catch (error) {\n      thrownError = error;\n    }\n\n    if (thrownError != null) {\n      if (thrownError instanceof MongoWriteConcernError) {\n        mergeBatchResults(batch, bulkOperation.s.bulkResult, thrownError, result);\n        const writeResult = new BulkWriteResult(\n          bulkOperation.s.bulkResult,\n          bulkOperation.isOrdered\n        );\n\n        throw new MongoBulkWriteError(\n          {\n            message: thrownError.result.writeConcernError.errmsg,\n            code: thrownError.result.writeConcernError.code\n          },\n          writeResult\n        );\n      } else {\n        // Error is a driver related error not a bulk op error, return early\n        throw new MongoBulkWriteError(\n          thrownError,\n          new BulkWriteResult(bulkOperation.s.bulkResult, bulkOperation.isOrdered)\n        );\n      }\n    }\n\n    mergeBatchResults(batch, bulkOperation.s.bulkResult, thrownError, result);\n    const writeResult = new BulkWriteResult(bulkOperation.s.bulkResult, bulkOperation.isOrdered);\n    bulkOperation.handleWriteError(writeResult);\n  }\n\n  bulkOperation.s.batches.length = 0;\n\n  const writeResult = new BulkWriteResult(bulkOperation.s.bulkResult, bulkOperation.isOrdered);\n  bulkOperation.handleWriteError(writeResult);\n  return writeResult;\n}\n\n/**\n * An error indicating an unsuccessful Bulk Write\n * @public\n * @category Error\n */\nexport class MongoBulkWriteError extends MongoServerError {\n  result: BulkWriteResult;\n  writeErrors: OneOrMore<WriteError> = [];\n  err?: WriteConcernError;\n\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(\n    error:\n      | { message: string; code: number; writeErrors?: WriteError[] }\n      | WriteConcernError\n      | AnyError,\n    result: BulkWriteResult\n  ) {\n    super(error);\n\n    if (error instanceof WriteConcernError) this.err = error;\n    else if (!(error instanceof Error)) {\n      this.message = error.message;\n      this.code = error.code;\n      this.writeErrors = error.writeErrors ?? [];\n    }\n\n    this.result = result;\n    Object.assign(this, error);\n  }\n\n  override get name(): string {\n    return 'MongoBulkWriteError';\n  }\n\n  /** Number of documents inserted. */\n  get insertedCount(): number {\n    return this.result.insertedCount;\n  }\n  /** Number of documents matched for update. */\n  get matchedCount(): number {\n    return this.result.matchedCount;\n  }\n  /** Number of documents modified. */\n  get modifiedCount(): number {\n    return this.result.modifiedCount;\n  }\n  /** Number of documents deleted. */\n  get deletedCount(): number {\n    return this.result.deletedCount;\n  }\n  /** Number of documents upserted. */\n  get upsertedCount(): number {\n    return this.result.upsertedCount;\n  }\n  /** Inserted document generated Id's, hash key is the index of the originating operation */\n  get insertedIds(): { [key: number]: any } {\n    return this.result.insertedIds;\n  }\n  /** Upserted document generated Id's, hash key is the index of the originating operation */\n  get upsertedIds(): { [key: number]: any } {\n    return this.result.upsertedIds;\n  }\n}\n\n/**\n * A builder object that is returned from {@link BulkOperationBase#find}.\n * Is used to build a write operation that involves a query filter.\n *\n * @public\n */\nexport class FindOperators {\n  bulkOperation: BulkOperationBase;\n\n  /**\n   * Creates a new FindOperators object.\n   * @internal\n   */\n  constructor(bulkOperation: BulkOperationBase) {\n    this.bulkOperation = bulkOperation;\n  }\n\n  /** Add a multiple update operation to the bulk operation */\n  update(updateDocument: Document | Document[]): BulkOperationBase {\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(\n      BatchType.UPDATE,\n      makeUpdateStatement(currentOp.selector, updateDocument, {\n        ...currentOp,\n        multi: true\n      })\n    );\n  }\n\n  /** Add a single update operation to the bulk operation */\n  updateOne(updateDocument: Document | Document[]): BulkOperationBase {\n    if (!hasAtomicOperators(updateDocument, this.bulkOperation.bsonOptions)) {\n      throw new MongoInvalidArgumentError('Update document requires atomic operators');\n    }\n\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(\n      BatchType.UPDATE,\n      makeUpdateStatement(currentOp.selector, updateDocument, { ...currentOp, multi: false })\n    );\n  }\n\n  /** Add a replace one operation to the bulk operation */\n  replaceOne(replacement: Document): BulkOperationBase {\n    if (hasAtomicOperators(replacement)) {\n      throw new MongoInvalidArgumentError('Replacement document must not use atomic operators');\n    }\n\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(\n      BatchType.UPDATE,\n      makeUpdateStatement(currentOp.selector, replacement, { ...currentOp, multi: false })\n    );\n  }\n\n  /** Add a delete one operation to the bulk operation */\n  deleteOne(): BulkOperationBase {\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(\n      BatchType.DELETE,\n      makeDeleteStatement(currentOp.selector, { ...currentOp, limit: 1 })\n    );\n  }\n\n  /** Add a delete many operation to the bulk operation */\n  delete(): BulkOperationBase {\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(\n      BatchType.DELETE,\n      makeDeleteStatement(currentOp.selector, { ...currentOp, limit: 0 })\n    );\n  }\n\n  /** Upsert modifier for update bulk operation, noting that this operation is an upsert. */\n  upsert(): this {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n\n    this.bulkOperation.s.currentOp.upsert = true;\n    return this;\n  }\n\n  /** Specifies the collation for the query condition. */\n  collation(collation: CollationOptions): this {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n\n    this.bulkOperation.s.currentOp.collation = collation;\n    return this;\n  }\n\n  /** Specifies arrayFilters for UpdateOne or UpdateMany bulk operations. */\n  arrayFilters(arrayFilters: Document[]): this {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n\n    this.bulkOperation.s.currentOp.arrayFilters = arrayFilters;\n    return this;\n  }\n\n  /** Specifies hint for the bulk operation. */\n  hint(hint: Hint): this {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n\n    this.bulkOperation.s.currentOp.hint = hint;\n    return this;\n  }\n}\n\n/** @internal */\nexport interface BulkOperationPrivate {\n  bulkResult: BulkResult;\n  currentBatch?: Batch;\n  currentIndex: number;\n  // ordered specific\n  currentBatchSize: number;\n  currentBatchSizeBytes: number;\n  // unordered specific\n  currentInsertBatch?: Batch;\n  currentUpdateBatch?: Batch;\n  currentRemoveBatch?: Batch;\n  batches: Batch[];\n  // Write concern\n  writeConcern?: WriteConcern;\n  // Max batch size options\n  maxBsonObjectSize: number;\n  maxBatchSizeBytes: number;\n  maxWriteBatchSize: number;\n  maxKeySize: number;\n  // Namespace\n  namespace: MongoDBNamespace;\n  // Topology\n  topology: Topology;\n  // Options\n  options: BulkWriteOptions;\n  // BSON options\n  bsonOptions: BSONSerializeOptions;\n  // Document used to build a bulk operation\n  currentOp?: Document;\n  // Executed\n  executed: boolean;\n  // Collection\n  collection: Collection;\n  // Fundamental error\n  err?: AnyError;\n  // check keys\n  checkKeys: boolean;\n  bypassDocumentValidation?: boolean;\n}\n\n/** @public */\nexport interface BulkWriteOptions extends CommandOperationOptions {\n  /**\n   * Allow driver to bypass schema validation.\n   * @defaultValue `false` - documents will be validated by default\n   **/\n  bypassDocumentValidation?: boolean;\n  /**\n   * If true, when an insert fails, don't execute the remaining writes.\n   * If false, continue with remaining inserts when one fails.\n   * @defaultValue `true` - inserts are ordered by default\n   */\n  ordered?: boolean;\n  /**\n   * Force server to assign _id values instead of driver.\n   * @defaultValue `false` - the driver generates `_id` fields by default\n   **/\n  forceServerObjectId?: boolean;\n  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n  let?: Document;\n\n  /** @internal */\n  timeoutContext?: TimeoutContext;\n}\n\n/**\n * TODO(NODE-4063)\n * BulkWrites merge complexity is implemented in executeCommands\n * This provides a vehicle to treat bulkOperations like any other operation (hence \"shim\")\n * We would like this logic to simply live inside the BulkWriteOperation class\n * @internal\n */\nexport class BulkWriteShimOperation extends AbstractOperation {\n  bulkOperation: BulkOperationBase;\n  constructor(bulkOperation: BulkOperationBase, options: BulkWriteOptions) {\n    super(options);\n    this.bulkOperation = bulkOperation;\n  }\n\n  get commandName(): string {\n    return 'bulkWrite' as const;\n  }\n\n  async execute(\n    _server: Server,\n    session: ClientSession | undefined,\n    timeoutContext: TimeoutContext\n  ): Promise<any> {\n    if (this.options.session == null) {\n      // An implicit session could have been created by 'executeOperation'\n      // So if we stick it on finalOptions here, each bulk operation\n      // will use this same session, it'll be passed in the same way\n      // an explicit session would be\n      this.options.session = session;\n    }\n    return await executeCommands(this.bulkOperation, { ...this.options, timeoutContext });\n  }\n}\n\n/** @public */\nexport abstract class BulkOperationBase {\n  isOrdered: boolean;\n  /** @internal */\n  s: BulkOperationPrivate;\n  operationId?: number;\n\n  /**\n   * Create a new OrderedBulkOperation or UnorderedBulkOperation instance\n   * @internal\n   */\n  constructor(\n    private collection: Collection,\n    options: BulkWriteOptions,\n    isOrdered: boolean\n  ) {\n    // determine whether bulkOperation is ordered or unordered\n    this.isOrdered = isOrdered;\n\n    const topology = getTopology(collection);\n    options = options == null ? {} : options;\n    // TODO Bring from driver information in hello\n    // Get the namespace for the write operations\n    const namespace = collection.s.namespace;\n    // Used to mark operation as executed\n    const executed = false;\n\n    // Current item\n    const currentOp = undefined;\n\n    // Set max byte size\n    const hello = topology.lastHello();\n\n    // If we have autoEncryption on, batch-splitting must be done on 2mb chunks, but single documents\n    // over 2mb are still allowed\n    const usingAutoEncryption = !!(topology.s.options && topology.s.options.autoEncrypter);\n    const maxBsonObjectSize =\n      hello && hello.maxBsonObjectSize ? hello.maxBsonObjectSize : 1024 * 1024 * 16;\n    const maxBatchSizeBytes = usingAutoEncryption ? 1024 * 1024 * 2 : maxBsonObjectSize;\n    const maxWriteBatchSize = hello && hello.maxWriteBatchSize ? hello.maxWriteBatchSize : 1000;\n\n    // Calculates the largest possible size of an Array key, represented as a BSON string\n    // element. This calculation:\n    //     1 byte for BSON type\n    //     # of bytes = length of (string representation of (maxWriteBatchSize - 1))\n    //   + 1 bytes for null terminator\n    const maxKeySize = (maxWriteBatchSize - 1).toString(10).length + 2;\n\n    // Final options for retryable writes\n    let finalOptions = Object.assign({}, options);\n    finalOptions = applyRetryableWrites(finalOptions, collection.s.db);\n\n    // Final results\n    const bulkResult: BulkResult = {\n      ok: 1,\n      writeErrors: [],\n      writeConcernErrors: [],\n      insertedIds: [],\n      nInserted: 0,\n      nUpserted: 0,\n      nMatched: 0,\n      nModified: 0,\n      nRemoved: 0,\n      upserted: []\n    };\n\n    // Internal state\n    this.s = {\n      // Final result\n      bulkResult,\n      // Current batch state\n      currentBatch: undefined,\n      currentIndex: 0,\n      // ordered specific\n      currentBatchSize: 0,\n      currentBatchSizeBytes: 0,\n      // unordered specific\n      currentInsertBatch: undefined,\n      currentUpdateBatch: undefined,\n      currentRemoveBatch: undefined,\n      batches: [],\n      // Write concern\n      writeConcern: WriteConcern.fromOptions(options),\n      // Max batch size options\n      maxBsonObjectSize,\n      maxBatchSizeBytes,\n      maxWriteBatchSize,\n      maxKeySize,\n      // Namespace\n      namespace,\n      // Topology\n      topology,\n      // Options\n      options: finalOptions,\n      // BSON options\n      bsonOptions: resolveBSONOptions(options),\n      // Current operation\n      currentOp,\n      // Executed\n      executed,\n      // Collection\n      collection,\n      // Fundamental error\n      err: undefined,\n      // check keys\n      checkKeys: typeof options.checkKeys === 'boolean' ? options.checkKeys : false\n    };\n\n    // bypass Validation\n    if (options.bypassDocumentValidation === true) {\n      this.s.bypassDocumentValidation = true;\n    }\n  }\n\n  /**\n   * Add a single insert document to the bulk operation\n   *\n   * @example\n   * ```ts\n   * const bulkOp = collection.initializeOrderedBulkOp();\n   *\n   * // Adds three inserts to the bulkOp.\n   * bulkOp\n   *   .insert({ a: 1 })\n   *   .insert({ b: 2 })\n   *   .insert({ c: 3 });\n   * await bulkOp.execute();\n   * ```\n   */\n  insert(document: Document): BulkOperationBase {\n    maybeAddIdToDocuments(this.collection, document, {\n      forceServerObjectId: this.shouldForceServerObjectId()\n    });\n\n    return this.addToOperationsList(BatchType.INSERT, document);\n  }\n\n  /**\n   * Builds a find operation for an update/updateOne/delete/deleteOne/replaceOne.\n   * Returns a builder object used to complete the definition of the operation.\n   *\n   * @example\n   * ```ts\n   * const bulkOp = collection.initializeOrderedBulkOp();\n   *\n   * // Add an updateOne to the bulkOp\n   * bulkOp.find({ a: 1 }).updateOne({ $set: { b: 2 } });\n   *\n   * // Add an updateMany to the bulkOp\n   * bulkOp.find({ c: 3 }).update({ $set: { d: 4 } });\n   *\n   * // Add an upsert\n   * bulkOp.find({ e: 5 }).upsert().updateOne({ $set: { f: 6 } });\n   *\n   * // Add a deletion\n   * bulkOp.find({ g: 7 }).deleteOne();\n   *\n   * // Add a multi deletion\n   * bulkOp.find({ h: 8 }).delete();\n   *\n   * // Add a replaceOne\n   * bulkOp.find({ i: 9 }).replaceOne({writeConcern: { j: 10 }});\n   *\n   * // Update using a pipeline (requires Mongodb 4.2 or higher)\n   * bulk.find({ k: 11, y: { $exists: true }, z: { $exists: true } }).updateOne([\n   *   { $set: { total: { $sum: [ '$y', '$z' ] } } }\n   * ]);\n   *\n   * // All of the ops will now be executed\n   * await bulkOp.execute();\n   * ```\n   */\n  find(selector: Document): FindOperators {\n    if (!selector) {\n      throw new MongoInvalidArgumentError('Bulk find operation must specify a selector');\n    }\n\n    // Save a current selector\n    this.s.currentOp = {\n      selector: selector\n    };\n\n    return new FindOperators(this);\n  }\n\n  /** Specifies a raw operation to perform in the bulk write. */\n  raw(op: AnyBulkWriteOperation): this {\n    if (op == null || typeof op !== 'object') {\n      throw new MongoInvalidArgumentError('Operation must be an object with an operation key');\n    }\n    if ('insertOne' in op) {\n      const forceServerObjectId = this.shouldForceServerObjectId();\n      const document =\n        op.insertOne && op.insertOne.document == null\n          ? // TODO(NODE-6003): remove support for omitting the `documents` subdocument in bulk inserts\n            (op.insertOne as Document)\n          : op.insertOne.document;\n\n      maybeAddIdToDocuments(this.collection, document, { forceServerObjectId });\n\n      return this.addToOperationsList(BatchType.INSERT, document);\n    }\n\n    if ('replaceOne' in op || 'updateOne' in op || 'updateMany' in op) {\n      if ('replaceOne' in op) {\n        if ('q' in op.replaceOne) {\n          throw new MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n        const updateStatement = makeUpdateStatement(\n          op.replaceOne.filter,\n          op.replaceOne.replacement,\n          { ...op.replaceOne, multi: false }\n        );\n        if (hasAtomicOperators(updateStatement.u)) {\n          throw new MongoInvalidArgumentError('Replacement document must not use atomic operators');\n        }\n        return this.addToOperationsList(BatchType.UPDATE, updateStatement);\n      }\n\n      if ('updateOne' in op) {\n        if ('q' in op.updateOne) {\n          throw new MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n        const updateStatement = makeUpdateStatement(op.updateOne.filter, op.updateOne.update, {\n          ...op.updateOne,\n          multi: false\n        });\n        if (!hasAtomicOperators(updateStatement.u, this.bsonOptions)) {\n          throw new MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n        return this.addToOperationsList(BatchType.UPDATE, updateStatement);\n      }\n\n      if ('updateMany' in op) {\n        if ('q' in op.updateMany) {\n          throw new MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n        const updateStatement = makeUpdateStatement(op.updateMany.filter, op.updateMany.update, {\n          ...op.updateMany,\n          multi: true\n        });\n        if (!hasAtomicOperators(updateStatement.u, this.bsonOptions)) {\n          throw new MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n        return this.addToOperationsList(BatchType.UPDATE, updateStatement);\n      }\n    }\n\n    if ('deleteOne' in op) {\n      if ('q' in op.deleteOne) {\n        throw new MongoInvalidArgumentError('Raw operations are not allowed');\n      }\n      return this.addToOperationsList(\n        BatchType.DELETE,\n        makeDeleteStatement(op.deleteOne.filter, { ...op.deleteOne, limit: 1 })\n      );\n    }\n\n    if ('deleteMany' in op) {\n      if ('q' in op.deleteMany) {\n        throw new MongoInvalidArgumentError('Raw operations are not allowed');\n      }\n      return this.addToOperationsList(\n        BatchType.DELETE,\n        makeDeleteStatement(op.deleteMany.filter, { ...op.deleteMany, limit: 0 })\n      );\n    }\n\n    // otherwise an unknown operation was provided\n    throw new MongoInvalidArgumentError(\n      'bulkWrite only supports insertOne, updateOne, updateMany, deleteOne, deleteMany'\n    );\n  }\n\n  get length(): number {\n    return this.s.currentIndex;\n  }\n\n  get bsonOptions(): BSONSerializeOptions {\n    return this.s.bsonOptions;\n  }\n\n  get writeConcern(): WriteConcern | undefined {\n    return this.s.writeConcern;\n  }\n\n  get batches(): Batch[] {\n    const batches = [...this.s.batches];\n    if (this.isOrdered) {\n      if (this.s.currentBatch) batches.push(this.s.currentBatch);\n    } else {\n      if (this.s.currentInsertBatch) batches.push(this.s.currentInsertBatch);\n      if (this.s.currentUpdateBatch) batches.push(this.s.currentUpdateBatch);\n      if (this.s.currentRemoveBatch) batches.push(this.s.currentRemoveBatch);\n    }\n    return batches;\n  }\n\n  async execute(options: BulkWriteOptions = {}): Promise<BulkWriteResult> {\n    if (this.s.executed) {\n      throw new MongoBatchReExecutionError();\n    }\n\n    const writeConcern = WriteConcern.fromOptions(options);\n    if (writeConcern) {\n      this.s.writeConcern = writeConcern;\n    }\n\n    // If we have current batch\n    if (this.isOrdered) {\n      if (this.s.currentBatch) this.s.batches.push(this.s.currentBatch);\n    } else {\n      if (this.s.currentInsertBatch) this.s.batches.push(this.s.currentInsertBatch);\n      if (this.s.currentUpdateBatch) this.s.batches.push(this.s.currentUpdateBatch);\n      if (this.s.currentRemoveBatch) this.s.batches.push(this.s.currentRemoveBatch);\n    }\n    // If we have no operations in the bulk raise an error\n    if (this.s.batches.length === 0) {\n      throw new MongoInvalidArgumentError('Invalid BulkOperation, Batch cannot be empty');\n    }\n\n    this.s.executed = true;\n    const finalOptions = { ...this.s.options, ...options };\n    const operation = new BulkWriteShimOperation(this, finalOptions);\n\n    return await executeOperation(this.s.collection.client, operation, finalOptions.timeoutContext);\n  }\n\n  /**\n   * Handles the write error before executing commands\n   * @internal\n   */\n  handleWriteError(writeResult: BulkWriteResult): void {\n    if (this.s.bulkResult.writeErrors.length > 0) {\n      const msg = this.s.bulkResult.writeErrors[0].errmsg\n        ? this.s.bulkResult.writeErrors[0].errmsg\n        : 'write operation failed';\n\n      throw new MongoBulkWriteError(\n        {\n          message: msg,\n          code: this.s.bulkResult.writeErrors[0].code,\n          writeErrors: this.s.bulkResult.writeErrors\n        },\n        writeResult\n      );\n    }\n\n    const writeConcernError = writeResult.getWriteConcernError();\n    if (writeConcernError) {\n      throw new MongoBulkWriteError(writeConcernError, writeResult);\n    }\n  }\n\n  abstract addToOperationsList(\n    batchType: BatchType,\n    document: Document | UpdateStatement | DeleteStatement\n  ): this;\n\n  private shouldForceServerObjectId(): boolean {\n    return (\n      this.s.options.forceServerObjectId === true ||\n      this.s.collection.s.db.options?.forceServerObjectId === true\n    );\n  }\n}\n\nfunction isInsertBatch(batch: Batch): boolean {\n  return batch.batchType === BatchType.INSERT;\n}\n\nfunction isUpdateBatch(batch: Batch): batch is Batch<UpdateStatement> {\n  return batch.batchType === BatchType.UPDATE;\n}\n\nfunction isDeleteBatch(batch: Batch): batch is Batch<DeleteStatement> {\n  return batch.batchType === BatchType.DELETE;\n}\n\nfunction buildCurrentOp(bulkOp: BulkOperationBase): Document {\n  let { currentOp } = bulkOp.s;\n  bulkOp.s.currentOp = undefined;\n  if (!currentOp) currentOp = {};\n  return currentOp;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}