{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.callback = void 0;\nconst azure_1 = require(\"../../../client-side-encryption/providers/azure\");\nconst error_1 = require(\"../../../error\");\nconst utils_1 = require(\"../../../utils\");\n/** Azure request headers. */\nconst AZURE_HEADERS = Object.freeze({\n  Metadata: 'true',\n  Accept: 'application/json'\n});\n/** Invalid endpoint result error. */\nconst ENDPOINT_RESULT_ERROR = 'Azure endpoint did not return a value with only access_token and expires_in properties';\n/** Error for when the token audience is missing in the environment. */\nconst TOKEN_RESOURCE_MISSING_ERROR = 'TOKEN_RESOURCE must be set in the auth mechanism properties when ENVIRONMENT is azure.';\n/**\n * The callback function to be used in the automated callback workflow.\n * @param params - The OIDC callback parameters.\n * @returns The OIDC response.\n */\nconst callback = async params => {\n  const tokenAudience = params.tokenAudience;\n  const username = params.username;\n  if (!tokenAudience) {\n    throw new error_1.MongoAzureError(TOKEN_RESOURCE_MISSING_ERROR);\n  }\n  const response = await getAzureTokenData(tokenAudience, username);\n  if (!isEndpointResultValid(response)) {\n    throw new error_1.MongoAzureError(ENDPOINT_RESULT_ERROR);\n  }\n  return response;\n};\nexports.callback = callback;\n/**\n * Hit the Azure endpoint to get the token data.\n */\nasync function getAzureTokenData(tokenAudience, username) {\n  const url = new URL(azure_1.AZURE_BASE_URL);\n  (0, azure_1.addAzureParams)(url, tokenAudience, username);\n  const response = await (0, utils_1.get)(url, {\n    headers: AZURE_HEADERS\n  });\n  if (response.status !== 200) {\n    throw new error_1.MongoAzureError(`Status code ${response.status} returned from the Azure endpoint. Response body: ${response.body}`);\n  }\n  const result = JSON.parse(response.body);\n  return {\n    accessToken: result.access_token,\n    expiresInSeconds: Number(result.expires_in)\n  };\n}\n/**\n * Determines if a result returned from the endpoint is valid.\n * This means the result is not nullish, contains the access_token required field\n * and the expires_in required field.\n */\nfunction isEndpointResultValid(token) {\n  if (token == null || typeof token !== 'object') return false;\n  return 'accessToken' in token && typeof token.accessToken === 'string' && 'expiresInSeconds' in token && typeof token.expiresInSeconds === 'number';\n}","map":{"version":3,"names":["azure_1","require","error_1","utils_1","AZURE_HEADERS","Object","freeze","Metadata","Accept","ENDPOINT_RESULT_ERROR","TOKEN_RESOURCE_MISSING_ERROR","callback","params","tokenAudience","username","MongoAzureError","response","getAzureTokenData","isEndpointResultValid","exports","url","URL","AZURE_BASE_URL","addAzureParams","get","headers","status","body","result","JSON","parse","accessToken","access_token","expiresInSeconds","Number","expires_in","token"],"sources":["C:\\Users\\asmee\\Documents\\Visa-Application\\node_modules\\mongodb\\src\\cmap\\auth\\mongodb_oidc\\azure_machine_workflow.ts"],"sourcesContent":["import { addAzureParams, AZURE_BASE_URL } from '../../../client-side-encryption/providers/azure';\nimport { MongoAzureError } from '../../../error';\nimport { get } from '../../../utils';\nimport type { OIDCCallbackFunction, OIDCCallbackParams, OIDCResponse } from '../mongodb_oidc';\n\n/** Azure request headers. */\nconst AZURE_HEADERS = Object.freeze({ Metadata: 'true', Accept: 'application/json' });\n\n/** Invalid endpoint result error. */\nconst ENDPOINT_RESULT_ERROR =\n  'Azure endpoint did not return a value with only access_token and expires_in properties';\n\n/** Error for when the token audience is missing in the environment. */\nconst TOKEN_RESOURCE_MISSING_ERROR =\n  'TOKEN_RESOURCE must be set in the auth mechanism properties when ENVIRONMENT is azure.';\n\n/**\n * The callback function to be used in the automated callback workflow.\n * @param params - The OIDC callback parameters.\n * @returns The OIDC response.\n */\nexport const callback: OIDCCallbackFunction = async (\n  params: OIDCCallbackParams\n): Promise<OIDCResponse> => {\n  const tokenAudience = params.tokenAudience;\n  const username = params.username;\n  if (!tokenAudience) {\n    throw new MongoAzureError(TOKEN_RESOURCE_MISSING_ERROR);\n  }\n  const response = await getAzureTokenData(tokenAudience, username);\n  if (!isEndpointResultValid(response)) {\n    throw new MongoAzureError(ENDPOINT_RESULT_ERROR);\n  }\n  return response;\n};\n\n/**\n * Hit the Azure endpoint to get the token data.\n */\nasync function getAzureTokenData(tokenAudience: string, username?: string): Promise<OIDCResponse> {\n  const url = new URL(AZURE_BASE_URL);\n  addAzureParams(url, tokenAudience, username);\n  const response = await get(url, {\n    headers: AZURE_HEADERS\n  });\n  if (response.status !== 200) {\n    throw new MongoAzureError(\n      `Status code ${response.status} returned from the Azure endpoint. Response body: ${response.body}`\n    );\n  }\n  const result = JSON.parse(response.body);\n  return {\n    accessToken: result.access_token,\n    expiresInSeconds: Number(result.expires_in)\n  };\n}\n\n/**\n * Determines if a result returned from the endpoint is valid.\n * This means the result is not nullish, contains the access_token required field\n * and the expires_in required field.\n */\nfunction isEndpointResultValid(\n  token: unknown\n): token is { access_token: unknown; expires_in: unknown } {\n  if (token == null || typeof token !== 'object') return false;\n  return (\n    'accessToken' in token &&\n    typeof token.accessToken === 'string' &&\n    'expiresInSeconds' in token &&\n    typeof token.expiresInSeconds === 'number'\n  );\n}\n"],"mappings":";;;;;;AAAA,MAAAA,OAAA,GAAAC,OAAA;AACA,MAAAC,OAAA,GAAAD,OAAA;AACA,MAAAE,OAAA,GAAAF,OAAA;AAGA;AACA,MAAMG,aAAa,GAAGC,MAAM,CAACC,MAAM,CAAC;EAAEC,QAAQ,EAAE,MAAM;EAAEC,MAAM,EAAE;AAAkB,CAAE,CAAC;AAErF;AACA,MAAMC,qBAAqB,GACzB,wFAAwF;AAE1F;AACA,MAAMC,4BAA4B,GAChC,wFAAwF;AAE1F;;;;;AAKO,MAAMC,QAAQ,GAAyB,MAC5CC,MAA0B,IACD;EACzB,MAAMC,aAAa,GAAGD,MAAM,CAACC,aAAa;EAC1C,MAAMC,QAAQ,GAAGF,MAAM,CAACE,QAAQ;EAChC,IAAI,CAACD,aAAa,EAAE;IAClB,MAAM,IAAIX,OAAA,CAAAa,eAAe,CAACL,4BAA4B,CAAC;EACzD;EACA,MAAMM,QAAQ,GAAG,MAAMC,iBAAiB,CAACJ,aAAa,EAAEC,QAAQ,CAAC;EACjE,IAAI,CAACI,qBAAqB,CAACF,QAAQ,CAAC,EAAE;IACpC,MAAM,IAAId,OAAA,CAAAa,eAAe,CAACN,qBAAqB,CAAC;EAClD;EACA,OAAOO,QAAQ;AACjB,CAAC;AAbYG,OAAA,CAAAR,QAAQ,GAAAA,QAAA;AAerB;;;AAGA,eAAeM,iBAAiBA,CAACJ,aAAqB,EAAEC,QAAiB;EACvE,MAAMM,GAAG,GAAG,IAAIC,GAAG,CAACrB,OAAA,CAAAsB,cAAc,CAAC;EACnC,IAAAtB,OAAA,CAAAuB,cAAc,EAACH,GAAG,EAAEP,aAAa,EAAEC,QAAQ,CAAC;EAC5C,MAAME,QAAQ,GAAG,MAAM,IAAAb,OAAA,CAAAqB,GAAG,EAACJ,GAAG,EAAE;IAC9BK,OAAO,EAAErB;GACV,CAAC;EACF,IAAIY,QAAQ,CAACU,MAAM,KAAK,GAAG,EAAE;IAC3B,MAAM,IAAIxB,OAAA,CAAAa,eAAe,CACvB,eAAeC,QAAQ,CAACU,MAAM,qDAAqDV,QAAQ,CAACW,IAAI,EAAE,CACnG;EACH;EACA,MAAMC,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACd,QAAQ,CAACW,IAAI,CAAC;EACxC,OAAO;IACLI,WAAW,EAAEH,MAAM,CAACI,YAAY;IAChCC,gBAAgB,EAAEC,MAAM,CAACN,MAAM,CAACO,UAAU;GAC3C;AACH;AAEA;;;;;AAKA,SAASjB,qBAAqBA,CAC5BkB,KAAc;EAEd,IAAIA,KAAK,IAAI,IAAI,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE,OAAO,KAAK;EAC5D,OACE,aAAa,IAAIA,KAAK,IACtB,OAAOA,KAAK,CAACL,WAAW,KAAK,QAAQ,IACrC,kBAAkB,IAAIK,KAAK,IAC3B,OAAOA,KAAK,CAACH,gBAAgB,KAAK,QAAQ;AAE9C"},"metadata":{},"sourceType":"script","externalDependencies":[]}