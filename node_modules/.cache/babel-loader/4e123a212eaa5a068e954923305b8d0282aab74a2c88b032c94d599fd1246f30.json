{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MongoClientAuthProviders = void 0;\nconst gssapi_1 = require(\"./cmap/auth/gssapi\");\nconst mongodb_aws_1 = require(\"./cmap/auth/mongodb_aws\");\nconst mongodb_oidc_1 = require(\"./cmap/auth/mongodb_oidc\");\nconst automated_callback_workflow_1 = require(\"./cmap/auth/mongodb_oidc/automated_callback_workflow\");\nconst human_callback_workflow_1 = require(\"./cmap/auth/mongodb_oidc/human_callback_workflow\");\nconst token_cache_1 = require(\"./cmap/auth/mongodb_oidc/token_cache\");\nconst plain_1 = require(\"./cmap/auth/plain\");\nconst providers_1 = require(\"./cmap/auth/providers\");\nconst scram_1 = require(\"./cmap/auth/scram\");\nconst x509_1 = require(\"./cmap/auth/x509\");\nconst error_1 = require(\"./error\");\n/** @internal */\nconst AUTH_PROVIDERS = new Map([[providers_1.AuthMechanism.MONGODB_AWS, _ref => {\n  let {\n    AWS_CREDENTIAL_PROVIDER\n  } = _ref;\n  return new mongodb_aws_1.MongoDBAWS(AWS_CREDENTIAL_PROVIDER);\n}], [providers_1.AuthMechanism.MONGODB_CR, () => {\n  throw new error_1.MongoInvalidArgumentError('MONGODB-CR is no longer a supported auth mechanism in MongoDB 4.0+');\n}], [providers_1.AuthMechanism.MONGODB_GSSAPI, () => new gssapi_1.GSSAPI()], [providers_1.AuthMechanism.MONGODB_OIDC, properties => new mongodb_oidc_1.MongoDBOIDC(getWorkflow(properties))], [providers_1.AuthMechanism.MONGODB_PLAIN, () => new plain_1.Plain()], [providers_1.AuthMechanism.MONGODB_SCRAM_SHA1, () => new scram_1.ScramSHA1()], [providers_1.AuthMechanism.MONGODB_SCRAM_SHA256, () => new scram_1.ScramSHA256()], [providers_1.AuthMechanism.MONGODB_X509, () => new x509_1.X509()]]);\n/**\n * Create a set of providers per client\n * to avoid sharing the provider's cache between different clients.\n * @internal\n */\nclass MongoClientAuthProviders {\n  constructor() {\n    this.existingProviders = new Map();\n  }\n  /**\n   * Get or create an authentication provider based on the provided mechanism.\n   * We don't want to create all providers at once, as some providers may not be used.\n   * @param name - The name of the provider to get or create.\n   * @param credentials - The credentials.\n   * @returns The provider.\n   * @throws MongoInvalidArgumentError if the mechanism is not supported.\n   * @internal\n   */\n  getOrCreateProvider(name, authMechanismProperties) {\n    const authProvider = this.existingProviders.get(name);\n    if (authProvider) {\n      return authProvider;\n    }\n    const providerFunction = AUTH_PROVIDERS.get(name);\n    if (!providerFunction) {\n      throw new error_1.MongoInvalidArgumentError(`authMechanism ${name} not supported`);\n    }\n    const provider = providerFunction(authMechanismProperties);\n    this.existingProviders.set(name, provider);\n    return provider;\n  }\n}\nexports.MongoClientAuthProviders = MongoClientAuthProviders;\n/**\n * Gets either a device workflow or callback workflow.\n */\nfunction getWorkflow(authMechanismProperties) {\n  if (authMechanismProperties.OIDC_HUMAN_CALLBACK) {\n    return new human_callback_workflow_1.HumanCallbackWorkflow(new token_cache_1.TokenCache(), authMechanismProperties.OIDC_HUMAN_CALLBACK);\n  } else if (authMechanismProperties.OIDC_CALLBACK) {\n    return new automated_callback_workflow_1.AutomatedCallbackWorkflow(new token_cache_1.TokenCache(), authMechanismProperties.OIDC_CALLBACK);\n  } else {\n    const environment = authMechanismProperties.ENVIRONMENT;\n    const workflow = mongodb_oidc_1.OIDC_WORKFLOWS.get(environment)?.();\n    if (!workflow) {\n      throw new error_1.MongoInvalidArgumentError(`Could not load workflow for environment ${authMechanismProperties.ENVIRONMENT}`);\n    }\n    return workflow;\n  }\n}","map":{"version":3,"names":["gssapi_1","require","mongodb_aws_1","mongodb_oidc_1","automated_callback_workflow_1","human_callback_workflow_1","token_cache_1","plain_1","providers_1","scram_1","x509_1","error_1","AUTH_PROVIDERS","Map","AuthMechanism","MONGODB_AWS","_ref","AWS_CREDENTIAL_PROVIDER","MongoDBAWS","MONGODB_CR","MongoInvalidArgumentError","MONGODB_GSSAPI","GSSAPI","MONGODB_OIDC","properties","MongoDBOIDC","getWorkflow","MONGODB_PLAIN","Plain","MONGODB_SCRAM_SHA1","ScramSHA1","MONGODB_SCRAM_SHA256","ScramSHA256","MONGODB_X509","X509","MongoClientAuthProviders","constructor","existingProviders","getOrCreateProvider","name","authMechanismProperties","authProvider","get","providerFunction","provider","set","exports","OIDC_HUMAN_CALLBACK","HumanCallbackWorkflow","TokenCache","OIDC_CALLBACK","AutomatedCallbackWorkflow","environment","ENVIRONMENT","workflow","OIDC_WORKFLOWS"],"sources":["C:\\Users\\asmee\\Documents\\Visa-Application\\node_modules\\mongodb\\src\\mongo_client_auth_providers.ts"],"sourcesContent":["import { type AuthProvider } from './cmap/auth/auth_provider';\nimport { GSSAPI } from './cmap/auth/gssapi';\nimport { type AuthMechanismProperties } from './cmap/auth/mongo_credentials';\nimport { MongoDBAWS } from './cmap/auth/mongodb_aws';\nimport { MongoDBOIDC, OIDC_WORKFLOWS, type Workflow } from './cmap/auth/mongodb_oidc';\nimport { AutomatedCallbackWorkflow } from './cmap/auth/mongodb_oidc/automated_callback_workflow';\nimport { HumanCallbackWorkflow } from './cmap/auth/mongodb_oidc/human_callback_workflow';\nimport { TokenCache } from './cmap/auth/mongodb_oidc/token_cache';\nimport { Plain } from './cmap/auth/plain';\nimport { AuthMechanism } from './cmap/auth/providers';\nimport { ScramSHA1, ScramSHA256 } from './cmap/auth/scram';\nimport { X509 } from './cmap/auth/x509';\nimport { MongoInvalidArgumentError } from './error';\n\n/** @internal */\nconst AUTH_PROVIDERS = new Map<\n  AuthMechanism | string,\n  (authMechanismProperties: AuthMechanismProperties) => AuthProvider\n>([\n  [\n    AuthMechanism.MONGODB_AWS,\n    ({ AWS_CREDENTIAL_PROVIDER }) => new MongoDBAWS(AWS_CREDENTIAL_PROVIDER)\n  ],\n  [\n    AuthMechanism.MONGODB_CR,\n    () => {\n      throw new MongoInvalidArgumentError(\n        'MONGODB-CR is no longer a supported auth mechanism in MongoDB 4.0+'\n      );\n    }\n  ],\n  [AuthMechanism.MONGODB_GSSAPI, () => new GSSAPI()],\n  [AuthMechanism.MONGODB_OIDC, properties => new MongoDBOIDC(getWorkflow(properties))],\n  [AuthMechanism.MONGODB_PLAIN, () => new Plain()],\n  [AuthMechanism.MONGODB_SCRAM_SHA1, () => new ScramSHA1()],\n  [AuthMechanism.MONGODB_SCRAM_SHA256, () => new ScramSHA256()],\n  [AuthMechanism.MONGODB_X509, () => new X509()]\n]);\n\n/**\n * Create a set of providers per client\n * to avoid sharing the provider's cache between different clients.\n * @internal\n */\nexport class MongoClientAuthProviders {\n  private existingProviders: Map<AuthMechanism | string, AuthProvider> = new Map();\n\n  /**\n   * Get or create an authentication provider based on the provided mechanism.\n   * We don't want to create all providers at once, as some providers may not be used.\n   * @param name - The name of the provider to get or create.\n   * @param credentials - The credentials.\n   * @returns The provider.\n   * @throws MongoInvalidArgumentError if the mechanism is not supported.\n   * @internal\n   */\n  getOrCreateProvider(\n    name: AuthMechanism | string,\n    authMechanismProperties: AuthMechanismProperties\n  ): AuthProvider {\n    const authProvider = this.existingProviders.get(name);\n    if (authProvider) {\n      return authProvider;\n    }\n\n    const providerFunction = AUTH_PROVIDERS.get(name);\n    if (!providerFunction) {\n      throw new MongoInvalidArgumentError(`authMechanism ${name} not supported`);\n    }\n\n    const provider = providerFunction(authMechanismProperties);\n    this.existingProviders.set(name, provider);\n    return provider;\n  }\n}\n\n/**\n * Gets either a device workflow or callback workflow.\n */\nfunction getWorkflow(authMechanismProperties: AuthMechanismProperties): Workflow {\n  if (authMechanismProperties.OIDC_HUMAN_CALLBACK) {\n    return new HumanCallbackWorkflow(new TokenCache(), authMechanismProperties.OIDC_HUMAN_CALLBACK);\n  } else if (authMechanismProperties.OIDC_CALLBACK) {\n    return new AutomatedCallbackWorkflow(new TokenCache(), authMechanismProperties.OIDC_CALLBACK);\n  } else {\n    const environment = authMechanismProperties.ENVIRONMENT;\n    const workflow = OIDC_WORKFLOWS.get(environment)?.();\n    if (!workflow) {\n      throw new MongoInvalidArgumentError(\n        `Could not load workflow for environment ${authMechanismProperties.ENVIRONMENT}`\n      );\n    }\n    return workflow;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}