{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MongoClient = exports.ServerApiVersion = void 0;\nconst fs_1 = require(\"fs\");\nconst bson_1 = require(\"./bson\");\nconst change_stream_1 = require(\"./change_stream\");\nconst mongo_credentials_1 = require(\"./cmap/auth/mongo_credentials\");\nconst providers_1 = require(\"./cmap/auth/providers\");\nconst connection_string_1 = require(\"./connection_string\");\nconst constants_1 = require(\"./constants\");\nconst db_1 = require(\"./db\");\nconst error_1 = require(\"./error\");\nconst mongo_client_auth_providers_1 = require(\"./mongo_client_auth_providers\");\nconst mongo_logger_1 = require(\"./mongo_logger\");\nconst mongo_types_1 = require(\"./mongo_types\");\nconst executor_1 = require(\"./operations/client_bulk_write/executor\");\nconst execute_operation_1 = require(\"./operations/execute_operation\");\nconst run_command_1 = require(\"./operations/run_command\");\nconst read_preference_1 = require(\"./read_preference\");\nconst resource_management_1 = require(\"./resource_management\");\nconst server_selection_1 = require(\"./sdam/server_selection\");\nconst topology_1 = require(\"./sdam/topology\");\nconst sessions_1 = require(\"./sessions\");\nconst utils_1 = require(\"./utils\");\n/** @public */\nexports.ServerApiVersion = Object.freeze({\n  v1: '1'\n});\n/**\n * @public\n *\n * The **MongoClient** class is a class that allows for making Connections to MongoDB.\n *\n * **NOTE:** The programmatically provided options take precedence over the URI options.\n *\n * @remarks\n *\n * A MongoClient is the entry point to connecting to a MongoDB server.\n *\n * It handles a multitude of features on your application's behalf:\n * - **Server Host Connection Configuration**: A MongoClient is responsible for reading TLS cert, ca, and crl files if provided.\n * - **SRV Record Polling**: A \"`mongodb+srv`\" style connection string is used to have the MongoClient resolve DNS SRV records of all server hostnames which the driver periodically monitors for changes and adjusts its current view of hosts correspondingly.\n * - **Server Monitoring**: The MongoClient automatically keeps monitoring the health of server nodes in your cluster to reach out to the correct and lowest latency one available.\n * - **Connection Pooling**: To avoid paying the cost of rebuilding a connection to the server on every operation the MongoClient keeps idle connections preserved for reuse.\n * - **Session Pooling**: The MongoClient creates logical sessions that enable retryable writes, causal consistency, and transactions. It handles pooling these sessions for reuse in subsequent operations.\n * - **Cursor Operations**: A MongoClient's cursors use the health monitoring system to send the request for more documents to the same server the query began on.\n * - **Mongocryptd process**: When using auto encryption, a MongoClient will launch a `mongocryptd` instance for handling encryption if the mongocrypt shared library isn't in use.\n *\n * There are many more features of a MongoClient that are not listed above.\n *\n * In order to enable these features, a number of asynchronous Node.js resources are established by the driver: Timers, FS Requests, Sockets, etc.\n * For details on cleanup, please refer to the MongoClient `close()` documentation.\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n * // Enable command monitoring for debugging\n * const client = new MongoClient('mongodb://localhost:27017?appName=mflix', { monitorCommands: true });\n * ```\n */\nclass MongoClient extends mongo_types_1.TypedEventEmitter {\n  constructor(url, options) {\n    super();\n    this.on('error', utils_1.noop);\n    this.options = (0, connection_string_1.parseOptions)(url, this, options);\n    const shouldSetLogger = Object.values(this.options.mongoLoggerOptions.componentSeverities).some(value => value !== mongo_logger_1.SeverityLevel.OFF);\n    this.mongoLogger = shouldSetLogger ? new mongo_logger_1.MongoLogger(this.options.mongoLoggerOptions) : undefined;\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const client = this;\n    // The internal state\n    this.s = {\n      url,\n      bsonOptions: (0, bson_1.resolveBSONOptions)(this.options),\n      namespace: (0, utils_1.ns)('admin'),\n      hasBeenClosed: false,\n      sessionPool: new sessions_1.ServerSessionPool(this),\n      activeSessions: new Set(),\n      activeCursors: new Set(),\n      authProviders: new mongo_client_auth_providers_1.MongoClientAuthProviders(),\n      get options() {\n        return client.options;\n      },\n      get readConcern() {\n        return client.options.readConcern;\n      },\n      get writeConcern() {\n        return client.options.writeConcern;\n      },\n      get readPreference() {\n        return client.options.readPreference;\n      },\n      get isMongoClient() {\n        return true;\n      }\n    };\n    this.checkForNonGenuineHosts();\n  }\n  /** @internal */\n  async asyncDispose() {\n    await this.close();\n  }\n  /** @internal */\n  checkForNonGenuineHosts() {\n    const documentDBHostnames = this.options.hosts.filter(hostAddress => (0, utils_1.isHostMatch)(utils_1.DOCUMENT_DB_CHECK, hostAddress.host));\n    const srvHostIsDocumentDB = (0, utils_1.isHostMatch)(utils_1.DOCUMENT_DB_CHECK, this.options.srvHost);\n    const cosmosDBHostnames = this.options.hosts.filter(hostAddress => (0, utils_1.isHostMatch)(utils_1.COSMOS_DB_CHECK, hostAddress.host));\n    const srvHostIsCosmosDB = (0, utils_1.isHostMatch)(utils_1.COSMOS_DB_CHECK, this.options.srvHost);\n    if (documentDBHostnames.length !== 0 || srvHostIsDocumentDB) {\n      this.mongoLogger?.info('client', utils_1.DOCUMENT_DB_MSG);\n    } else if (cosmosDBHostnames.length !== 0 || srvHostIsCosmosDB) {\n      this.mongoLogger?.info('client', utils_1.COSMOS_DB_MSG);\n    }\n  }\n  get serverApi() {\n    return this.options.serverApi && Object.freeze({\n      ...this.options.serverApi\n    });\n  }\n  /**\n   * Intended for APM use only\n   * @internal\n   */\n  get monitorCommands() {\n    return this.options.monitorCommands;\n  }\n  set monitorCommands(value) {\n    this.options.monitorCommands = value;\n  }\n  /** @internal */\n  get autoEncrypter() {\n    return this.options.autoEncrypter;\n  }\n  get readConcern() {\n    return this.s.readConcern;\n  }\n  get writeConcern() {\n    return this.s.writeConcern;\n  }\n  get readPreference() {\n    return this.s.readPreference;\n  }\n  get bsonOptions() {\n    return this.s.bsonOptions;\n  }\n  get timeoutMS() {\n    return this.s.options.timeoutMS;\n  }\n  /**\n   * Executes a client bulk write operation, available on server 8.0+.\n   * @param models - The client bulk write models.\n   * @param options - The client bulk write options.\n   * @returns A ClientBulkWriteResult for acknowledged writes and ok: 1 for unacknowledged writes.\n   */\n  async bulkWrite(models, options) {\n    if (this.autoEncrypter) {\n      throw new error_1.MongoInvalidArgumentError('MongoClient bulkWrite does not currently support automatic encryption.');\n    }\n    // We do not need schema type information past this point (\"as any\" is fine)\n    return await new executor_1.ClientBulkWriteExecutor(this, models, (0, utils_1.resolveOptions)(this, options)).execute();\n  }\n  /**\n   * Connect to MongoDB using a url\n   *\n   * @remarks\n   * Calling `connect` is optional since the first operation you perform will call `connect` if it's needed.\n   * `timeoutMS` will bound the time any operation can take before throwing a timeout error.\n   * However, when the operation being run is automatically connecting your `MongoClient` the `timeoutMS` will not apply to the time taken to connect the MongoClient.\n   * This means the time to setup the `MongoClient` does not count against `timeoutMS`.\n   * If you are using `timeoutMS` we recommend connecting your client explicitly in advance of any operation to avoid this inconsistent execution time.\n   *\n   * @remarks\n   * The driver will look up corresponding SRV and TXT records if the connection string starts with `mongodb+srv://`.\n   * If those look ups throw a DNS Timeout error, the driver will retry the look up once.\n   *\n   * @see docs.mongodb.org/manual/reference/connection-string/\n   */\n  async connect() {\n    if (this.connectionLock) {\n      return await this.connectionLock;\n    }\n    try {\n      this.connectionLock = this._connect();\n      await this.connectionLock;\n    } finally {\n      // release\n      this.connectionLock = undefined;\n    }\n    return this;\n  }\n  /**\n   * Create a topology to open the connection, must be locked to avoid topology leaks in concurrency scenario.\n   * Locking is enforced by the connect method.\n   *\n   * @internal\n   */\n  async _connect() {\n    var _this = this;\n    if (this.topology && this.topology.isConnected()) {\n      return this;\n    }\n    const options = this.options;\n    if (options.tls) {\n      if (typeof options.tlsCAFile === 'string') {\n        options.ca ??= await fs_1.promises.readFile(options.tlsCAFile);\n      }\n      if (typeof options.tlsCRLFile === 'string') {\n        options.crl ??= await fs_1.promises.readFile(options.tlsCRLFile);\n      }\n      if (typeof options.tlsCertificateKeyFile === 'string') {\n        if (!options.key || !options.cert) {\n          const contents = await fs_1.promises.readFile(options.tlsCertificateKeyFile);\n          options.key ??= contents;\n          options.cert ??= contents;\n        }\n      }\n    }\n    if (typeof options.srvHost === 'string') {\n      const hosts = await (0, connection_string_1.resolveSRVRecord)(options);\n      for (const [index, host] of hosts.entries()) {\n        options.hosts[index] = host;\n      }\n    }\n    // It is important to perform validation of hosts AFTER SRV resolution, to check the real hostname,\n    // but BEFORE we even attempt connecting with a potentially not allowed hostname\n    if (options.credentials?.mechanism === providers_1.AuthMechanism.MONGODB_OIDC) {\n      const allowedHosts = options.credentials?.mechanismProperties?.ALLOWED_HOSTS || mongo_credentials_1.DEFAULT_ALLOWED_HOSTS;\n      const isServiceAuth = !!options.credentials?.mechanismProperties?.ENVIRONMENT;\n      if (!isServiceAuth) {\n        for (const host of options.hosts) {\n          if (!(0, utils_1.hostMatchesWildcards)(host.toHostPort().host, allowedHosts)) {\n            throw new error_1.MongoInvalidArgumentError(`Host '${host}' is not valid for OIDC authentication with ALLOWED_HOSTS of '${allowedHosts.join(',')}'`);\n          }\n        }\n      }\n    }\n    this.topology = new topology_1.Topology(this, options.hosts, options);\n    // Events can be emitted before initialization is complete so we have to\n    // save the reference to the topology on the client ASAP if the event handlers need to access it\n    this.topology.once(topology_1.Topology.OPEN, () => this.emit('open', this));\n    for (const event of constants_1.MONGO_CLIENT_EVENTS) {\n      this.topology.on(event, function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        return _this.emit(event, ...args);\n      });\n    }\n    const topologyConnect = async () => {\n      try {\n        await this.topology?.connect(options);\n      } catch (error) {\n        this.topology?.close();\n        throw error;\n      }\n    };\n    if (this.autoEncrypter) {\n      await this.autoEncrypter?.init();\n      await topologyConnect();\n      await options.encrypter.connectInternalClient();\n    } else {\n      await topologyConnect();\n    }\n    return this;\n  }\n  /**\n   * Cleans up resources managed by the MongoClient.\n   *\n   * The close method clears and closes all resources whose lifetimes are managed by the MongoClient.\n   * Please refer to the `MongoClient` class documentation for a high level overview of the client's key features and responsibilities.\n   *\n   * **However,** the close method does not handle the cleanup of resources explicitly created by the user.\n   * Any user-created driver resource with its own `close()` method should be explicitly closed by the user before calling MongoClient.close().\n   * This method is written as a \"best effort\" attempt to leave behind the least amount of resources server-side when possible.\n   *\n   * The following list defines ideal preconditions and consequent pitfalls if they are not met.\n   * The MongoClient, ClientSession, Cursors and ChangeStreams all support [explicit resource management](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-5-2.html).\n   * By using explicit resource management to manage the lifetime of driver resources instead of manually managing their lifetimes, the pitfalls outlined below can be avoided.\n   *\n   * The close method performs the following in the order listed:\n   * - Client-side:\n   *   - **Close in-use connections**: Any connections that are currently waiting on a response from the server will be closed.\n   *     This is performed _first_ to avoid reaching the next step (server-side clean up) and having no available connections to check out.\n   *     - _Ideal_: All operations have been awaited or cancelled, and the outcomes, regardless of success or failure, have been processed before closing the client servicing the operation.\n   *     - _Pitfall_: When `client.close()` is called and all connections are in use, after closing them, the client must create new connections for cleanup operations, which comes at the cost of new TLS/TCP handshakes and authentication steps.\n   * - Server-side:\n   *   - **Close active cursors**: All cursors that haven't been completed will have a `killCursor` operation sent to the server they were initialized on, freeing the server-side resource.\n   *     - _Ideal_: Cursors are explicitly closed or completed before `client.close()` is called.\n   *     - _Pitfall_: `killCursors` may have to build a new connection if the in-use closure ended all pooled connections.\n   *   - **End active sessions**: In-use sessions created with `client.startSession()` or `client.withSession()` or implicitly by the driver will have their `.endSession()` method called.\n   *     Contrary to the name of the method, `endSession()` returns the session to the client's pool of sessions rather than end them on the server.\n   *     - _Ideal_: Transaction outcomes are awaited and their corresponding explicit sessions are ended before `client.close()` is called.\n   *     - _Pitfall_: **This step aborts in-progress transactions**. It is advisable to observe the outcome of a transaction before closing your client.\n   *   - **End all pooled sessions**: The `endSessions` command with all session IDs the client has pooled is sent to the server to inform the cluster it can clean them up.\n   *     - _Ideal_: No user intervention is expected.\n   *     - _Pitfall_: None.\n   *\n   * The remaining shutdown is of the MongoClient resources that are intended to be entirely internal but is documented here as their existence relates to the JS event loop.\n   *\n   * - Client-side (again):\n   *   - **Stop all server monitoring**: Connections kept live for detecting cluster changes and roundtrip time measurements are shutdown.\n   *   - **Close all pooled connections**: Each server node in the cluster has a corresponding connection pool and all connections in the pool are closed. Any operations waiting to check out a connection will have an error thrown instead of a connection returned.\n   *   - **Clear out server selection queue**: Any operations that are in the process of waiting for a server to be selected will have an error thrown instead of a server returned.\n   *   - **Close encryption-related resources**: An internal MongoClient created for communicating with `mongocryptd` or other encryption purposes is closed. (Using this same method of course!)\n   *\n   * After the close method completes there should be no MongoClient related resources [ref-ed in Node.js' event loop](https://docs.libuv.org/en/v1.x/handle.html#reference-counting).\n   * This should allow Node.js to exit gracefully if MongoClient resources were the only active handles in the event loop.\n   *\n   * @param _force - currently an unused flag that has no effect. Defaults to `false`.\n   */\n  async close() {\n    let _force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if (this.closeLock) {\n      return await this.closeLock;\n    }\n    try {\n      this.closeLock = this._close();\n      await this.closeLock;\n    } finally {\n      // release\n      this.closeLock = undefined;\n    }\n  }\n  /* @internal */\n  async _close() {\n    // There's no way to set hasBeenClosed back to false\n    Object.defineProperty(this.s, 'hasBeenClosed', {\n      value: true,\n      enumerable: true,\n      configurable: false,\n      writable: false\n    });\n    this.topology?.closeCheckedOutConnections();\n    const activeCursorCloses = Array.from(this.s.activeCursors, cursor => cursor.close());\n    this.s.activeCursors.clear();\n    await Promise.all(activeCursorCloses);\n    const activeSessionEnds = Array.from(this.s.activeSessions, session => session.endSession());\n    this.s.activeSessions.clear();\n    await Promise.all(activeSessionEnds);\n    if (this.topology == null) {\n      return;\n    }\n    // If we would attempt to select a server and get nothing back we short circuit\n    // to avoid the server selection timeout.\n    const selector = (0, server_selection_1.readPreferenceServerSelector)(read_preference_1.ReadPreference.primaryPreferred);\n    const topologyDescription = this.topology.description;\n    const serverDescriptions = Array.from(topologyDescription.servers.values());\n    const servers = selector(topologyDescription, serverDescriptions);\n    if (servers.length !== 0) {\n      const endSessions = Array.from(this.s.sessionPool.sessions, _ref => {\n        let {\n          id\n        } = _ref;\n        return id;\n      });\n      if (endSessions.length !== 0) {\n        try {\n          await (0, execute_operation_1.executeOperation)(this, new run_command_1.RunAdminCommandOperation({\n            endSessions\n          }, {\n            readPreference: read_preference_1.ReadPreference.primaryPreferred,\n            noResponse: true\n          }));\n        } catch (error) {\n          (0, utils_1.squashError)(error);\n        }\n      }\n    }\n    // clear out references to old topology\n    const topology = this.topology;\n    this.topology = undefined;\n    topology.close();\n    const {\n      encrypter\n    } = this.options;\n    if (encrypter) {\n      await encrypter.close(this);\n    }\n  }\n  /**\n   * Create a new Db instance sharing the current socket connections.\n   *\n   * @param dbName - The name of the database we want to use. If not provided, use database name from connection string.\n   * @param options - Optional settings for Db construction\n   */\n  db(dbName, options) {\n    options = options ?? {};\n    // Default to db from connection string if not provided\n    if (!dbName) {\n      dbName = this.s.options.dbName;\n    }\n    // Copy the options and add out internal override of the not shared flag\n    const finalOptions = Object.assign({}, this.options, options);\n    // Return the db object\n    const db = new db_1.Db(this, dbName, finalOptions);\n    // Return the database\n    return db;\n  }\n  /**\n   * Connect to MongoDB using a url\n   *\n   * @remarks\n   * Calling `connect` is optional since the first operation you perform will call `connect` if it's needed.\n   * `timeoutMS` will bound the time any operation can take before throwing a timeout error.\n   * However, when the operation being run is automatically connecting your `MongoClient` the `timeoutMS` will not apply to the time taken to connect the MongoClient.\n   * This means the time to setup the `MongoClient` does not count against `timeoutMS`.\n   * If you are using `timeoutMS` we recommend connecting your client explicitly in advance of any operation to avoid this inconsistent execution time.\n   *\n   * @remarks\n   * The programmatically provided options take precedence over the URI options.\n   *\n   * @remarks\n   * The driver will look up corresponding SRV and TXT records if the connection string starts with `mongodb+srv://`.\n   * If those look ups throw a DNS Timeout error, the driver will retry the look up once.\n   *\n   * @see https://www.mongodb.com/docs/manual/reference/connection-string/\n   */\n  static async connect(url, options) {\n    const client = new this(url, options);\n    return await client.connect();\n  }\n  /**\n   * Creates a new ClientSession. When using the returned session in an operation\n   * a corresponding ServerSession will be created.\n   *\n   * @remarks\n   * A ClientSession instance may only be passed to operations being performed on the same\n   * MongoClient it was started from.\n   */\n  startSession(options) {\n    const session = new sessions_1.ClientSession(this, this.s.sessionPool, {\n      explicit: true,\n      ...options\n    }, this.options);\n    this.s.activeSessions.add(session);\n    session.once('ended', () => {\n      this.s.activeSessions.delete(session);\n    });\n    return session;\n  }\n  async withSession(optionsOrExecutor, executor) {\n    const options = {\n      // Always define an owner\n      owner: Symbol(),\n      // If it's an object inherit the options\n      ...(typeof optionsOrExecutor === 'object' ? optionsOrExecutor : {})\n    };\n    const withSessionCallback = typeof optionsOrExecutor === 'function' ? optionsOrExecutor : executor;\n    if (withSessionCallback == null) {\n      throw new error_1.MongoInvalidArgumentError('Missing required callback parameter');\n    }\n    const session = this.startSession(options);\n    try {\n      return await withSessionCallback(session);\n    } finally {\n      try {\n        await session.endSession();\n      } catch (error) {\n        (0, utils_1.squashError)(error);\n      }\n    }\n  }\n  /**\n   * Create a new Change Stream, watching for new changes (insertions, updates,\n   * replacements, deletions, and invalidations) in this cluster. Will ignore all\n   * changes to system collections, as well as the local, admin, and config databases.\n   *\n   * @remarks\n   * watch() accepts two generic arguments for distinct use cases:\n   * - The first is to provide the schema that may be defined for all the data within the current cluster\n   * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n   *\n   * @remarks\n   * When `timeoutMS` is configured for a change stream, it will have different behaviour depending\n   * on whether the change stream is in iterator mode or emitter mode. In both cases, a change\n   * stream will time out if it does not receive a change event within `timeoutMS` of the last change\n   * event.\n   *\n   * Note that if a change stream is consistently timing out when watching a collection, database or\n   * client that is being changed, then this may be due to the server timing out before it can finish\n   * processing the existing oplog. To address this, restart the change stream with a higher\n   * `timeoutMS`.\n   *\n   * If the change stream times out the initial aggregate operation to establish the change stream on\n   * the server, then the client will close the change stream. If the getMore calls to the server\n   * time out, then the change stream will be left open, but will throw a MongoOperationTimeoutError\n   * when in iterator mode and emit an error event that returns a MongoOperationTimeoutError in\n   * emitter mode.\n   *\n   * To determine whether or not the change stream is still open following a timeout, check the\n   * {@link ChangeStream.closed} getter.\n   *\n   * @example\n   * In iterator mode, if a next() call throws a timeout error, it will attempt to resume the change stream.\n   * The next call can just be retried after this succeeds.\n   * ```ts\n   * const changeStream = collection.watch([], { timeoutMS: 100 });\n   * try {\n   *     await changeStream.next();\n   * } catch (e) {\n   *     if (e instanceof MongoOperationTimeoutError && !changeStream.closed) {\n   *       await changeStream.next();\n   *     }\n   *     throw e;\n   * }\n   * ```\n   *\n   * @example\n   * In emitter mode, if the change stream goes `timeoutMS` without emitting a change event, it will\n   * emit an error event that returns a MongoOperationTimeoutError, but will not close the change\n   * stream unless the resume attempt fails. There is no need to re-establish change listeners as\n   * this will automatically continue emitting change events once the resume attempt completes.\n   *\n   * ```ts\n   * const changeStream = collection.watch([], { timeoutMS: 100 });\n   * changeStream.on('change', console.log);\n   * changeStream.on('error', e => {\n   *     if (e instanceof MongoOperationTimeoutError && !changeStream.closed) {\n   *         // do nothing\n   *     } else {\n   *         changeStream.close();\n   *     }\n   * });\n   * ```\n   * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n   * @param options - Optional settings for the command\n   * @typeParam TSchema - Type of the data being detected by the change stream\n   * @typeParam TChange - Type of the whole change stream document emitted\n   */\n  watch() {\n    let pipeline = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    // Allow optionally not specifying a pipeline\n    if (!Array.isArray(pipeline)) {\n      options = pipeline;\n      pipeline = [];\n    }\n    return new change_stream_1.ChangeStream(this, pipeline, (0, utils_1.resolveOptions)(this, options));\n  }\n}\nexports.MongoClient = MongoClient;\n(0, resource_management_1.configureResourceManagement)(MongoClient.prototype);","map":{"version":3,"names":["fs_1","require","bson_1","change_stream_1","mongo_credentials_1","providers_1","connection_string_1","constants_1","db_1","error_1","mongo_client_auth_providers_1","mongo_logger_1","mongo_types_1","executor_1","execute_operation_1","run_command_1","read_preference_1","resource_management_1","server_selection_1","topology_1","sessions_1","utils_1","exports","ServerApiVersion","Object","freeze","v1","MongoClient","TypedEventEmitter","constructor","url","options","on","noop","parseOptions","shouldSetLogger","values","mongoLoggerOptions","componentSeverities","some","value","SeverityLevel","OFF","mongoLogger","MongoLogger","undefined","client","s","bsonOptions","resolveBSONOptions","namespace","ns","hasBeenClosed","sessionPool","ServerSessionPool","activeSessions","Set","activeCursors","authProviders","MongoClientAuthProviders","readConcern","writeConcern","readPreference","isMongoClient","checkForNonGenuineHosts","asyncDispose","close","documentDBHostnames","hosts","filter","hostAddress","isHostMatch","DOCUMENT_DB_CHECK","host","srvHostIsDocumentDB","srvHost","cosmosDBHostnames","COSMOS_DB_CHECK","srvHostIsCosmosDB","length","info","DOCUMENT_DB_MSG","COSMOS_DB_MSG","serverApi","monitorCommands","autoEncrypter","timeoutMS","bulkWrite","models","MongoInvalidArgumentError","ClientBulkWriteExecutor","resolveOptions","execute","connect","connectionLock","_connect","_this","topology","isConnected","tls","tlsCAFile","ca","promises","readFile","tlsCRLFile","crl","tlsCertificateKeyFile","key","cert","contents","resolveSRVRecord","index","entries","credentials","mechanism","AuthMechanism","MONGODB_OIDC","allowedHosts","mechanismProperties","ALLOWED_HOSTS","DEFAULT_ALLOWED_HOSTS","isServiceAuth","ENVIRONMENT","hostMatchesWildcards","toHostPort","join","Topology","once","OPEN","emit","event","MONGO_CLIENT_EVENTS","_len","arguments","args","Array","_key","topologyConnect","error","init","encrypter","connectInternalClient","_force","closeLock","_close","defineProperty","enumerable","configurable","writable","closeCheckedOutConnections","activeCursorCloses","from","cursor","clear","Promise","all","activeSessionEnds","session","endSession","selector","readPreferenceServerSelector","ReadPreference","primaryPreferred","topologyDescription","description","serverDescriptions","servers","endSessions","sessions","_ref","id","executeOperation","RunAdminCommandOperation","noResponse","squashError","db","dbName","finalOptions","assign","Db","startSession","ClientSession","explicit","add","delete","withSession","optionsOrExecutor","executor","owner","Symbol","withSessionCallback","watch","pipeline","isArray","ChangeStream","configureResourceManagement","prototype"],"sources":["C:\\Users\\asmee\\Documents\\Visa-Application\\node_modules\\mongodb\\src\\mongo_client.ts"],"sourcesContent":["import { promises as fs } from 'fs';\nimport type { TcpNetConnectOpts } from 'net';\nimport type { ConnectionOptions as TLSConnectionOptions, TLSSocketOptions } from 'tls';\n\nimport { type BSONSerializeOptions, type Document, resolveBSONOptions } from './bson';\nimport { ChangeStream, type ChangeStreamDocument, type ChangeStreamOptions } from './change_stream';\nimport type { AutoEncrypter, AutoEncryptionOptions } from './client-side-encryption/auto_encrypter';\nimport {\n  type AuthMechanismProperties,\n  DEFAULT_ALLOWED_HOSTS,\n  type MongoCredentials\n} from './cmap/auth/mongo_credentials';\nimport { type TokenCache } from './cmap/auth/mongodb_oidc/token_cache';\nimport { AuthMechanism } from './cmap/auth/providers';\nimport type { LEGAL_TCP_SOCKET_OPTIONS, LEGAL_TLS_SOCKET_OPTIONS } from './cmap/connect';\nimport type { Connection } from './cmap/connection';\nimport type { ClientMetadata } from './cmap/handshake/client_metadata';\nimport type { CompressorName } from './cmap/wire_protocol/compression';\nimport { parseOptions, resolveSRVRecord } from './connection_string';\nimport { MONGO_CLIENT_EVENTS } from './constants';\nimport { type AbstractCursor } from './cursor/abstract_cursor';\nimport { Db, type DbOptions } from './db';\nimport type { Encrypter } from './encrypter';\nimport { MongoInvalidArgumentError } from './error';\nimport { MongoClientAuthProviders } from './mongo_client_auth_providers';\nimport {\n  type LogComponentSeveritiesClientOptions,\n  type MongoDBLogWritable,\n  MongoLogger,\n  type MongoLoggerOptions,\n  SeverityLevel\n} from './mongo_logger';\nimport { TypedEventEmitter } from './mongo_types';\nimport {\n  type ClientBulkWriteModel,\n  type ClientBulkWriteOptions,\n  type ClientBulkWriteResult\n} from './operations/client_bulk_write/common';\nimport { ClientBulkWriteExecutor } from './operations/client_bulk_write/executor';\nimport { executeOperation } from './operations/execute_operation';\nimport { RunAdminCommandOperation } from './operations/run_command';\nimport type { ReadConcern, ReadConcernLevel, ReadConcernLike } from './read_concern';\nimport { ReadPreference, type ReadPreferenceMode } from './read_preference';\nimport { type AsyncDisposable, configureResourceManagement } from './resource_management';\nimport type { ServerMonitoringMode } from './sdam/monitor';\nimport type { TagSet } from './sdam/server_description';\nimport { readPreferenceServerSelector } from './sdam/server_selection';\nimport type { SrvPoller } from './sdam/srv_polling';\nimport { Topology, type TopologyEvents } from './sdam/topology';\nimport { ClientSession, type ClientSessionOptions, ServerSessionPool } from './sessions';\nimport {\n  COSMOS_DB_CHECK,\n  COSMOS_DB_MSG,\n  DOCUMENT_DB_CHECK,\n  DOCUMENT_DB_MSG,\n  type HostAddress,\n  hostMatchesWildcards,\n  isHostMatch,\n  type MongoDBNamespace,\n  noop,\n  ns,\n  resolveOptions,\n  squashError\n} from './utils';\nimport type { W, WriteConcern, WriteConcernSettings } from './write_concern';\n\n/** @public */\nexport const ServerApiVersion = Object.freeze({\n  v1: '1'\n} as const);\n\n/** @public */\nexport type ServerApiVersion = (typeof ServerApiVersion)[keyof typeof ServerApiVersion];\n\n/** @public */\nexport interface ServerApi {\n  version: ServerApiVersion;\n  strict?: boolean;\n  deprecationErrors?: boolean;\n}\n\n/** @public */\nexport interface DriverInfo {\n  name?: string;\n  version?: string;\n  platform?: string;\n}\n\n/** @public */\nexport interface Auth {\n  /** The username for auth */\n  username?: string;\n  /** The password for auth */\n  password?: string;\n}\n\n/** @public */\nexport interface PkFactory {\n  createPk(): any;\n}\n\n/** @public */\nexport type SupportedTLSConnectionOptions = Pick<\n  TLSConnectionOptions & {\n    allowPartialTrustChain?: boolean;\n  },\n  (typeof LEGAL_TLS_SOCKET_OPTIONS)[number]\n>;\n\n/** @public */\nexport type SupportedTLSSocketOptions = Pick<\n  TLSSocketOptions,\n  Extract<keyof TLSSocketOptions, (typeof LEGAL_TLS_SOCKET_OPTIONS)[number]>\n>;\n\n/** @public */\nexport type SupportedSocketOptions = Pick<\n  TcpNetConnectOpts & {\n    autoSelectFamily?: boolean;\n    autoSelectFamilyAttemptTimeout?: number;\n    /** Node.JS socket option to set the time the first keepalive probe is sent on an idle socket. Defaults to 120000ms */\n    keepAliveInitialDelay?: number;\n  },\n  (typeof LEGAL_TCP_SOCKET_OPTIONS)[number]\n>;\n\n/** @public */\nexport type SupportedNodeConnectionOptions = SupportedTLSConnectionOptions &\n  SupportedTLSSocketOptions &\n  SupportedSocketOptions;\n\n/**\n * Describes all possible URI query options for the mongo client\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/connection-string\n */\nexport interface MongoClientOptions extends BSONSerializeOptions, SupportedNodeConnectionOptions {\n  /** Specifies the name of the replica set, if the mongod is a member of a replica set. */\n  replicaSet?: string;\n  /**\n   * @experimental\n   * Specifies the time an operation will run until it throws a timeout error\n   */\n  timeoutMS?: number;\n  /** Enables or disables TLS/SSL for the connection. */\n  tls?: boolean;\n  /** A boolean to enable or disables TLS/SSL for the connection. (The ssl option is equivalent to the tls option.) */\n  ssl?: boolean;\n  /** Specifies the location of a local .pem file that contains either the client's TLS/SSL certificate and key. */\n  tlsCertificateKeyFile?: string;\n  /** Specifies the password to de-crypt the tlsCertificateKeyFile. */\n  tlsCertificateKeyFilePassword?: string;\n  /** Specifies the location of a local .pem file that contains the root certificate chain from the Certificate Authority. This file is used to validate the certificate presented by the mongod/mongos instance. */\n  tlsCAFile?: string;\n  /** Specifies the location of a local CRL .pem file that contains the client revokation list. */\n  tlsCRLFile?: string;\n  /** Bypasses validation of the certificates presented by the mongod/mongos instance */\n  tlsAllowInvalidCertificates?: boolean;\n  /** Disables hostname validation of the certificate presented by the mongod/mongos instance. */\n  tlsAllowInvalidHostnames?: boolean;\n  /** Disables various certificate validations. */\n  tlsInsecure?: boolean;\n  /** The time in milliseconds to attempt a connection before timing out. */\n  connectTimeoutMS?: number;\n  /** The time in milliseconds to attempt a send or receive on a socket before the attempt times out. */\n  socketTimeoutMS?: number;\n  /** An array or comma-delimited string of compressors to enable network compression for communication between this client and a mongod/mongos instance. */\n  compressors?: CompressorName[] | string;\n  /** An integer that specifies the compression level if using zlib for network compression. */\n  zlibCompressionLevel?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | undefined;\n  /** The maximum number of hosts to connect to when using an srv connection string, a setting of `0` means unlimited hosts */\n  srvMaxHosts?: number;\n  /**\n   * Modifies the srv URI to look like:\n   *\n   * `_{srvServiceName}._tcp.{hostname}.{domainname}`\n   *\n   * Querying this DNS URI is expected to respond with SRV records\n   */\n  srvServiceName?: string;\n  /** The maximum number of connections in the connection pool. */\n  maxPoolSize?: number;\n  /** The minimum number of connections in the connection pool. */\n  minPoolSize?: number;\n  /** The maximum number of connections that may be in the process of being established concurrently by the connection pool. */\n  maxConnecting?: number;\n  /** The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. */\n  maxIdleTimeMS?: number;\n  /** The maximum time in milliseconds that a thread can wait for a connection to become available. */\n  waitQueueTimeoutMS?: number;\n  /** Specify a read concern for the collection (only MongoDB 3.2 or higher supported) */\n  readConcern?: ReadConcernLike;\n  /** The level of isolation */\n  readConcernLevel?: ReadConcernLevel;\n  /** Specifies the read preferences for this connection */\n  readPreference?: ReadPreferenceMode | ReadPreference;\n  /** Specifies, in seconds, how stale a secondary can be before the client stops using it for read operations. */\n  maxStalenessSeconds?: number;\n  /** Specifies the tags document as a comma-separated list of colon-separated key-value pairs.  */\n  readPreferenceTags?: TagSet[];\n  /** The auth settings for when connection to server. */\n  auth?: Auth;\n  /** Specify the database name associated with the user’s credentials. */\n  authSource?: string;\n  /** Specify the authentication mechanism that MongoDB will use to authenticate the connection. */\n  authMechanism?: AuthMechanism;\n  /** Specify properties for the specified authMechanism as a comma-separated list of colon-separated key-value pairs. */\n  authMechanismProperties?: AuthMechanismProperties;\n  /** The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. */\n  localThresholdMS?: number;\n  /** Specifies how long (in milliseconds) to block for server selection before throwing an exception.  */\n  serverSelectionTimeoutMS?: number;\n  /** heartbeatFrequencyMS controls when the driver checks the state of the MongoDB deployment. Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. */\n  heartbeatFrequencyMS?: number;\n  /** Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. */\n  minHeartbeatFrequencyMS?: number;\n  /** The name of the application that created this MongoClient instance. MongoDB 3.4 and newer will print this value in the server log upon establishing each connection. It is also recorded in the slow query log and profile collections */\n  appName?: string;\n  /** Enables retryable reads. */\n  retryReads?: boolean;\n  /** Enable retryable writes. */\n  retryWrites?: boolean;\n  /** Allow a driver to force a Single topology type with a connection string containing one host */\n  directConnection?: boolean;\n  /** Instruct the driver it is connecting to a load balancer fronting a mongos like service */\n  loadBalanced?: boolean;\n  /**\n   * The write concern w value\n   * @deprecated Please use the `writeConcern` option instead\n   */\n  w?: W;\n  /**\n   * The write concern timeout\n   * @deprecated Please use the `writeConcern` option instead\n   */\n  wtimeoutMS?: number;\n  /**\n   * The journal write concern\n   * @deprecated Please use the `writeConcern` option instead\n   */\n  journal?: boolean;\n  /**\n   * A MongoDB WriteConcern, which describes the level of acknowledgement\n   * requested from MongoDB for write operations.\n   *\n   * @see https://www.mongodb.com/docs/manual/reference/write-concern/\n   */\n  writeConcern?: WriteConcern | WriteConcernSettings;\n  /** TCP Connection no delay */\n  noDelay?: boolean;\n  /** Force server to assign `_id` values instead of driver */\n  forceServerObjectId?: boolean;\n  /** A primary key factory function for generation of custom `_id` keys */\n  pkFactory?: PkFactory;\n  /** Enable command monitoring for this client */\n  monitorCommands?: boolean;\n  /** Server API version */\n  serverApi?: ServerApi | ServerApiVersion;\n  /**\n   * Optionally enable in-use auto encryption\n   *\n   * @remarks\n   *  Automatic encryption is an enterprise only feature that only applies to operations on a collection. Automatic encryption is not supported for operations on a database or view, and operations that are not bypassed will result in error\n   *  (see [libmongocrypt: Auto Encryption Allow-List](https://github.com/mongodb/specifications/blob/master/source/client-side-encryption/client-side-encryption.md#libmongocrypt-auto-encryption-allow-list)). To bypass automatic encryption for all operations, set bypassAutoEncryption=true in AutoEncryptionOpts.\n   *\n   *  Automatic encryption requires the authenticated user to have the [listCollections privilege action](https://www.mongodb.com/docs/manual/reference/command/listCollections/#dbcmd.listCollections).\n   *\n   *  If a MongoClient with a limited connection pool size (i.e a non-zero maxPoolSize) is configured with AutoEncryptionOptions, a separate internal MongoClient is created if any of the following are true:\n   *  - AutoEncryptionOptions.keyVaultClient is not passed.\n   *  - AutoEncryptionOptions.bypassAutomaticEncryption is false.\n   *\n   * If an internal MongoClient is created, it is configured with the same options as the parent MongoClient except minPoolSize is set to 0 and AutoEncryptionOptions is omitted.\n   */\n  autoEncryption?: AutoEncryptionOptions;\n  /** Allows a wrapping driver to amend the client metadata generated by the driver to include information about the wrapping driver */\n  driverInfo?: DriverInfo;\n  /** Configures a Socks5 proxy host used for creating TCP connections. */\n  proxyHost?: string;\n  /** Configures a Socks5 proxy port used for creating TCP connections. */\n  proxyPort?: number;\n  /** Configures a Socks5 proxy username when the proxy in proxyHost requires username/password authentication. */\n  proxyUsername?: string;\n  /** Configures a Socks5 proxy password when the proxy in proxyHost requires username/password authentication. */\n  proxyPassword?: string;\n  /** Instructs the driver monitors to use a specific monitoring mode */\n  serverMonitoringMode?: ServerMonitoringMode;\n  /**\n   * @public\n   * Specifies the destination of the driver's logging. The default is stderr.\n   */\n  mongodbLogPath?: 'stderr' | 'stdout' | MongoDBLogWritable;\n  /**\n   * @public\n   * Enable logging level per component or use `default` to control any unset components.\n   */\n  mongodbLogComponentSeverities?: LogComponentSeveritiesClientOptions;\n  /**\n   * @public\n   * All BSON documents are stringified to EJSON. This controls the maximum length of those strings.\n   * It is defaulted to 1000.\n   */\n  mongodbLogMaxDocumentLength?: number;\n\n  /** @internal */\n  srvPoller?: SrvPoller;\n  /** @internal */\n  connectionType?: typeof Connection;\n  /** @internal */\n  __skipPingOnConnect?: boolean;\n}\n\n/** @public */\nexport type WithSessionCallback<T = unknown> = (session: ClientSession) => Promise<T>;\n\n/** @internal */\nexport interface MongoClientPrivate {\n  url: string;\n  bsonOptions: BSONSerializeOptions;\n  namespace: MongoDBNamespace;\n  hasBeenClosed: boolean;\n  authProviders: MongoClientAuthProviders;\n  /**\n   * We keep a reference to the sessions that are acquired from the pool.\n   * - used to track and close all sessions in client.close() (which is non-standard behavior)\n   * - used to notify the leak checker in our tests if test author forgot to clean up explicit sessions\n   */\n  readonly activeSessions: Set<ClientSession>;\n  /**\n   * We keep a reference to the cursors that are created from this client.\n   * - used to track and close all cursors in client.close().\n   *   Cursors in this set are ones that still need to have their close method invoked (no other conditions are considered)\n   */\n  readonly activeCursors: Set<AbstractCursor>;\n  readonly sessionPool: ServerSessionPool;\n  readonly options: MongoOptions;\n  readonly readConcern?: ReadConcern;\n  readonly writeConcern?: WriteConcern;\n  readonly readPreference: ReadPreference;\n  readonly isMongoClient: true;\n}\n\n/** @public */\nexport type MongoClientEvents = Pick<TopologyEvents, (typeof MONGO_CLIENT_EVENTS)[number]> & {\n  // In previous versions the open event emitted a topology, in an effort to no longer\n  // expose internals but continue to expose this useful event API, it now emits a mongoClient\n  open(mongoClient: MongoClient): void;\n};\n\n/**\n * @public\n *\n * The **MongoClient** class is a class that allows for making Connections to MongoDB.\n *\n * **NOTE:** The programmatically provided options take precedence over the URI options.\n *\n * @remarks\n *\n * A MongoClient is the entry point to connecting to a MongoDB server.\n *\n * It handles a multitude of features on your application's behalf:\n * - **Server Host Connection Configuration**: A MongoClient is responsible for reading TLS cert, ca, and crl files if provided.\n * - **SRV Record Polling**: A \"`mongodb+srv`\" style connection string is used to have the MongoClient resolve DNS SRV records of all server hostnames which the driver periodically monitors for changes and adjusts its current view of hosts correspondingly.\n * - **Server Monitoring**: The MongoClient automatically keeps monitoring the health of server nodes in your cluster to reach out to the correct and lowest latency one available.\n * - **Connection Pooling**: To avoid paying the cost of rebuilding a connection to the server on every operation the MongoClient keeps idle connections preserved for reuse.\n * - **Session Pooling**: The MongoClient creates logical sessions that enable retryable writes, causal consistency, and transactions. It handles pooling these sessions for reuse in subsequent operations.\n * - **Cursor Operations**: A MongoClient's cursors use the health monitoring system to send the request for more documents to the same server the query began on.\n * - **Mongocryptd process**: When using auto encryption, a MongoClient will launch a `mongocryptd` instance for handling encryption if the mongocrypt shared library isn't in use.\n *\n * There are many more features of a MongoClient that are not listed above.\n *\n * In order to enable these features, a number of asynchronous Node.js resources are established by the driver: Timers, FS Requests, Sockets, etc.\n * For details on cleanup, please refer to the MongoClient `close()` documentation.\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n * // Enable command monitoring for debugging\n * const client = new MongoClient('mongodb://localhost:27017?appName=mflix', { monitorCommands: true });\n * ```\n */\nexport class MongoClient extends TypedEventEmitter<MongoClientEvents> implements AsyncDisposable {\n  /** @internal */\n  s: MongoClientPrivate;\n  /** @internal */\n  topology?: Topology;\n  /** @internal */\n  override readonly mongoLogger: MongoLogger | undefined;\n  /** @internal */\n  private connectionLock?: Promise<this>;\n  /** @internal */\n  private closeLock?: Promise<void>;\n\n  /**\n   * The consolidate, parsed, transformed and merged options.\n   */\n  public readonly options: Readonly<\n    Omit<MongoOptions, 'monitorCommands' | 'ca' | 'crl' | 'key' | 'cert'>\n  > &\n    Pick<MongoOptions, 'monitorCommands' | 'ca' | 'crl' | 'key' | 'cert'>;\n\n  constructor(url: string, options?: MongoClientOptions) {\n    super();\n    this.on('error', noop);\n\n    this.options = parseOptions(url, this, options);\n\n    const shouldSetLogger = Object.values(this.options.mongoLoggerOptions.componentSeverities).some(\n      value => value !== SeverityLevel.OFF\n    );\n    this.mongoLogger = shouldSetLogger\n      ? new MongoLogger(this.options.mongoLoggerOptions)\n      : undefined;\n\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const client = this;\n\n    // The internal state\n    this.s = {\n      url,\n      bsonOptions: resolveBSONOptions(this.options),\n      namespace: ns('admin'),\n      hasBeenClosed: false,\n      sessionPool: new ServerSessionPool(this),\n      activeSessions: new Set(),\n      activeCursors: new Set(),\n      authProviders: new MongoClientAuthProviders(),\n\n      get options() {\n        return client.options;\n      },\n      get readConcern() {\n        return client.options.readConcern;\n      },\n      get writeConcern() {\n        return client.options.writeConcern;\n      },\n      get readPreference() {\n        return client.options.readPreference;\n      },\n      get isMongoClient(): true {\n        return true;\n      }\n    };\n    this.checkForNonGenuineHosts();\n  }\n\n  /**\n   * @beta\n   * @experimental\n   * An alias for {@link MongoClient.close|MongoClient.close()}.\n   */\n  declare [Symbol.asyncDispose]: () => Promise<void>;\n  /** @internal */\n  async asyncDispose() {\n    await this.close();\n  }\n\n  /** @internal */\n  private checkForNonGenuineHosts() {\n    const documentDBHostnames = this.options.hosts.filter((hostAddress: HostAddress) =>\n      isHostMatch(DOCUMENT_DB_CHECK, hostAddress.host)\n    );\n    const srvHostIsDocumentDB = isHostMatch(DOCUMENT_DB_CHECK, this.options.srvHost);\n\n    const cosmosDBHostnames = this.options.hosts.filter((hostAddress: HostAddress) =>\n      isHostMatch(COSMOS_DB_CHECK, hostAddress.host)\n    );\n    const srvHostIsCosmosDB = isHostMatch(COSMOS_DB_CHECK, this.options.srvHost);\n\n    if (documentDBHostnames.length !== 0 || srvHostIsDocumentDB) {\n      this.mongoLogger?.info('client', DOCUMENT_DB_MSG);\n    } else if (cosmosDBHostnames.length !== 0 || srvHostIsCosmosDB) {\n      this.mongoLogger?.info('client', COSMOS_DB_MSG);\n    }\n  }\n\n  get serverApi(): Readonly<ServerApi | undefined> {\n    return this.options.serverApi && Object.freeze({ ...this.options.serverApi });\n  }\n  /**\n   * Intended for APM use only\n   * @internal\n   */\n  get monitorCommands(): boolean {\n    return this.options.monitorCommands;\n  }\n  set monitorCommands(value: boolean) {\n    this.options.monitorCommands = value;\n  }\n\n  /** @internal */\n  get autoEncrypter(): AutoEncrypter | undefined {\n    return this.options.autoEncrypter;\n  }\n\n  get readConcern(): ReadConcern | undefined {\n    return this.s.readConcern;\n  }\n\n  get writeConcern(): WriteConcern | undefined {\n    return this.s.writeConcern;\n  }\n\n  get readPreference(): ReadPreference {\n    return this.s.readPreference;\n  }\n\n  get bsonOptions(): BSONSerializeOptions {\n    return this.s.bsonOptions;\n  }\n\n  get timeoutMS(): number | undefined {\n    return this.s.options.timeoutMS;\n  }\n\n  /**\n   * Executes a client bulk write operation, available on server 8.0+.\n   * @param models - The client bulk write models.\n   * @param options - The client bulk write options.\n   * @returns A ClientBulkWriteResult for acknowledged writes and ok: 1 for unacknowledged writes.\n   */\n  async bulkWrite<SchemaMap extends Record<string, Document> = Record<string, Document>>(\n    models: ReadonlyArray<ClientBulkWriteModel<SchemaMap>>,\n    options?: ClientBulkWriteOptions\n  ): Promise<ClientBulkWriteResult> {\n    if (this.autoEncrypter) {\n      throw new MongoInvalidArgumentError(\n        'MongoClient bulkWrite does not currently support automatic encryption.'\n      );\n    }\n    // We do not need schema type information past this point (\"as any\" is fine)\n    return await new ClientBulkWriteExecutor(\n      this,\n      models as any,\n      resolveOptions(this, options)\n    ).execute();\n  }\n\n  /**\n   * Connect to MongoDB using a url\n   *\n   * @remarks\n   * Calling `connect` is optional since the first operation you perform will call `connect` if it's needed.\n   * `timeoutMS` will bound the time any operation can take before throwing a timeout error.\n   * However, when the operation being run is automatically connecting your `MongoClient` the `timeoutMS` will not apply to the time taken to connect the MongoClient.\n   * This means the time to setup the `MongoClient` does not count against `timeoutMS`.\n   * If you are using `timeoutMS` we recommend connecting your client explicitly in advance of any operation to avoid this inconsistent execution time.\n   *\n   * @remarks\n   * The driver will look up corresponding SRV and TXT records if the connection string starts with `mongodb+srv://`.\n   * If those look ups throw a DNS Timeout error, the driver will retry the look up once.\n   *\n   * @see docs.mongodb.org/manual/reference/connection-string/\n   */\n  async connect(): Promise<this> {\n    if (this.connectionLock) {\n      return await this.connectionLock;\n    }\n\n    try {\n      this.connectionLock = this._connect();\n      await this.connectionLock;\n    } finally {\n      // release\n      this.connectionLock = undefined;\n    }\n\n    return this;\n  }\n\n  /**\n   * Create a topology to open the connection, must be locked to avoid topology leaks in concurrency scenario.\n   * Locking is enforced by the connect method.\n   *\n   * @internal\n   */\n  private async _connect(): Promise<this> {\n    if (this.topology && this.topology.isConnected()) {\n      return this;\n    }\n\n    const options = this.options;\n\n    if (options.tls) {\n      if (typeof options.tlsCAFile === 'string') {\n        options.ca ??= await fs.readFile(options.tlsCAFile);\n      }\n      if (typeof options.tlsCRLFile === 'string') {\n        options.crl ??= await fs.readFile(options.tlsCRLFile);\n      }\n      if (typeof options.tlsCertificateKeyFile === 'string') {\n        if (!options.key || !options.cert) {\n          const contents = await fs.readFile(options.tlsCertificateKeyFile);\n          options.key ??= contents;\n          options.cert ??= contents;\n        }\n      }\n    }\n    if (typeof options.srvHost === 'string') {\n      const hosts = await resolveSRVRecord(options);\n\n      for (const [index, host] of hosts.entries()) {\n        options.hosts[index] = host;\n      }\n    }\n\n    // It is important to perform validation of hosts AFTER SRV resolution, to check the real hostname,\n    // but BEFORE we even attempt connecting with a potentially not allowed hostname\n    if (options.credentials?.mechanism === AuthMechanism.MONGODB_OIDC) {\n      const allowedHosts =\n        options.credentials?.mechanismProperties?.ALLOWED_HOSTS || DEFAULT_ALLOWED_HOSTS;\n      const isServiceAuth = !!options.credentials?.mechanismProperties?.ENVIRONMENT;\n      if (!isServiceAuth) {\n        for (const host of options.hosts) {\n          if (!hostMatchesWildcards(host.toHostPort().host, allowedHosts)) {\n            throw new MongoInvalidArgumentError(\n              `Host '${host}' is not valid for OIDC authentication with ALLOWED_HOSTS of '${allowedHosts.join(\n                ','\n              )}'`\n            );\n          }\n        }\n      }\n    }\n\n    this.topology = new Topology(this, options.hosts, options);\n    // Events can be emitted before initialization is complete so we have to\n    // save the reference to the topology on the client ASAP if the event handlers need to access it\n\n    this.topology.once(Topology.OPEN, () => this.emit('open', this));\n\n    for (const event of MONGO_CLIENT_EVENTS) {\n      this.topology.on(event, (...args: any[]) => this.emit(event, ...(args as any)));\n    }\n\n    const topologyConnect = async () => {\n      try {\n        await this.topology?.connect(options);\n      } catch (error) {\n        this.topology?.close();\n        throw error;\n      }\n    };\n\n    if (this.autoEncrypter) {\n      await this.autoEncrypter?.init();\n      await topologyConnect();\n      await options.encrypter.connectInternalClient();\n    } else {\n      await topologyConnect();\n    }\n\n    return this;\n  }\n\n  /**\n   * Cleans up resources managed by the MongoClient.\n   *\n   * The close method clears and closes all resources whose lifetimes are managed by the MongoClient.\n   * Please refer to the `MongoClient` class documentation for a high level overview of the client's key features and responsibilities.\n   *\n   * **However,** the close method does not handle the cleanup of resources explicitly created by the user.\n   * Any user-created driver resource with its own `close()` method should be explicitly closed by the user before calling MongoClient.close().\n   * This method is written as a \"best effort\" attempt to leave behind the least amount of resources server-side when possible.\n   *\n   * The following list defines ideal preconditions and consequent pitfalls if they are not met.\n   * The MongoClient, ClientSession, Cursors and ChangeStreams all support [explicit resource management](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-5-2.html).\n   * By using explicit resource management to manage the lifetime of driver resources instead of manually managing their lifetimes, the pitfalls outlined below can be avoided.\n   *\n   * The close method performs the following in the order listed:\n   * - Client-side:\n   *   - **Close in-use connections**: Any connections that are currently waiting on a response from the server will be closed.\n   *     This is performed _first_ to avoid reaching the next step (server-side clean up) and having no available connections to check out.\n   *     - _Ideal_: All operations have been awaited or cancelled, and the outcomes, regardless of success or failure, have been processed before closing the client servicing the operation.\n   *     - _Pitfall_: When `client.close()` is called and all connections are in use, after closing them, the client must create new connections for cleanup operations, which comes at the cost of new TLS/TCP handshakes and authentication steps.\n   * - Server-side:\n   *   - **Close active cursors**: All cursors that haven't been completed will have a `killCursor` operation sent to the server they were initialized on, freeing the server-side resource.\n   *     - _Ideal_: Cursors are explicitly closed or completed before `client.close()` is called.\n   *     - _Pitfall_: `killCursors` may have to build a new connection if the in-use closure ended all pooled connections.\n   *   - **End active sessions**: In-use sessions created with `client.startSession()` or `client.withSession()` or implicitly by the driver will have their `.endSession()` method called.\n   *     Contrary to the name of the method, `endSession()` returns the session to the client's pool of sessions rather than end them on the server.\n   *     - _Ideal_: Transaction outcomes are awaited and their corresponding explicit sessions are ended before `client.close()` is called.\n   *     - _Pitfall_: **This step aborts in-progress transactions**. It is advisable to observe the outcome of a transaction before closing your client.\n   *   - **End all pooled sessions**: The `endSessions` command with all session IDs the client has pooled is sent to the server to inform the cluster it can clean them up.\n   *     - _Ideal_: No user intervention is expected.\n   *     - _Pitfall_: None.\n   *\n   * The remaining shutdown is of the MongoClient resources that are intended to be entirely internal but is documented here as their existence relates to the JS event loop.\n   *\n   * - Client-side (again):\n   *   - **Stop all server monitoring**: Connections kept live for detecting cluster changes and roundtrip time measurements are shutdown.\n   *   - **Close all pooled connections**: Each server node in the cluster has a corresponding connection pool and all connections in the pool are closed. Any operations waiting to check out a connection will have an error thrown instead of a connection returned.\n   *   - **Clear out server selection queue**: Any operations that are in the process of waiting for a server to be selected will have an error thrown instead of a server returned.\n   *   - **Close encryption-related resources**: An internal MongoClient created for communicating with `mongocryptd` or other encryption purposes is closed. (Using this same method of course!)\n   *\n   * After the close method completes there should be no MongoClient related resources [ref-ed in Node.js' event loop](https://docs.libuv.org/en/v1.x/handle.html#reference-counting).\n   * This should allow Node.js to exit gracefully if MongoClient resources were the only active handles in the event loop.\n   *\n   * @param _force - currently an unused flag that has no effect. Defaults to `false`.\n   */\n  async close(_force = false): Promise<void> {\n    if (this.closeLock) {\n      return await this.closeLock;\n    }\n\n    try {\n      this.closeLock = this._close();\n      await this.closeLock;\n    } finally {\n      // release\n      this.closeLock = undefined;\n    }\n  }\n\n  /* @internal */\n  private async _close(): Promise<void> {\n    // There's no way to set hasBeenClosed back to false\n    Object.defineProperty(this.s, 'hasBeenClosed', {\n      value: true,\n      enumerable: true,\n      configurable: false,\n      writable: false\n    });\n\n    this.topology?.closeCheckedOutConnections();\n\n    const activeCursorCloses = Array.from(this.s.activeCursors, cursor => cursor.close());\n    this.s.activeCursors.clear();\n\n    await Promise.all(activeCursorCloses);\n\n    const activeSessionEnds = Array.from(this.s.activeSessions, session => session.endSession());\n    this.s.activeSessions.clear();\n\n    await Promise.all(activeSessionEnds);\n\n    if (this.topology == null) {\n      return;\n    }\n\n    // If we would attempt to select a server and get nothing back we short circuit\n    // to avoid the server selection timeout.\n    const selector = readPreferenceServerSelector(ReadPreference.primaryPreferred);\n    const topologyDescription = this.topology.description;\n    const serverDescriptions = Array.from(topologyDescription.servers.values());\n    const servers = selector(topologyDescription, serverDescriptions);\n    if (servers.length !== 0) {\n      const endSessions = Array.from(this.s.sessionPool.sessions, ({ id }) => id);\n      if (endSessions.length !== 0) {\n        try {\n          await executeOperation(\n            this,\n            new RunAdminCommandOperation(\n              { endSessions },\n              { readPreference: ReadPreference.primaryPreferred, noResponse: true }\n            )\n          );\n        } catch (error) {\n          squashError(error);\n        }\n      }\n    }\n\n    // clear out references to old topology\n    const topology = this.topology;\n    this.topology = undefined;\n\n    topology.close();\n\n    const { encrypter } = this.options;\n    if (encrypter) {\n      await encrypter.close(this);\n    }\n  }\n\n  /**\n   * Create a new Db instance sharing the current socket connections.\n   *\n   * @param dbName - The name of the database we want to use. If not provided, use database name from connection string.\n   * @param options - Optional settings for Db construction\n   */\n  db(dbName?: string, options?: DbOptions): Db {\n    options = options ?? {};\n\n    // Default to db from connection string if not provided\n    if (!dbName) {\n      dbName = this.s.options.dbName;\n    }\n\n    // Copy the options and add out internal override of the not shared flag\n    const finalOptions = Object.assign({}, this.options, options);\n\n    // Return the db object\n    const db = new Db(this, dbName, finalOptions);\n\n    // Return the database\n    return db;\n  }\n\n  /**\n   * Connect to MongoDB using a url\n   *\n   * @remarks\n   * Calling `connect` is optional since the first operation you perform will call `connect` if it's needed.\n   * `timeoutMS` will bound the time any operation can take before throwing a timeout error.\n   * However, when the operation being run is automatically connecting your `MongoClient` the `timeoutMS` will not apply to the time taken to connect the MongoClient.\n   * This means the time to setup the `MongoClient` does not count against `timeoutMS`.\n   * If you are using `timeoutMS` we recommend connecting your client explicitly in advance of any operation to avoid this inconsistent execution time.\n   *\n   * @remarks\n   * The programmatically provided options take precedence over the URI options.\n   *\n   * @remarks\n   * The driver will look up corresponding SRV and TXT records if the connection string starts with `mongodb+srv://`.\n   * If those look ups throw a DNS Timeout error, the driver will retry the look up once.\n   *\n   * @see https://www.mongodb.com/docs/manual/reference/connection-string/\n   */\n  static async connect(url: string, options?: MongoClientOptions): Promise<MongoClient> {\n    const client = new this(url, options);\n    return await client.connect();\n  }\n\n  /**\n   * Creates a new ClientSession. When using the returned session in an operation\n   * a corresponding ServerSession will be created.\n   *\n   * @remarks\n   * A ClientSession instance may only be passed to operations being performed on the same\n   * MongoClient it was started from.\n   */\n  startSession(options?: ClientSessionOptions): ClientSession {\n    const session = new ClientSession(\n      this,\n      this.s.sessionPool,\n      { explicit: true, ...options },\n      this.options\n    );\n    this.s.activeSessions.add(session);\n    session.once('ended', () => {\n      this.s.activeSessions.delete(session);\n    });\n    return session;\n  }\n\n  /**\n   * A convenience method for creating and handling the clean up of a ClientSession.\n   * The session will always be ended when the executor finishes.\n   *\n   * @param executor - An executor function that all operations using the provided session must be invoked in\n   * @param options - optional settings for the session\n   */\n  async withSession<T = any>(executor: WithSessionCallback<T>): Promise<T>;\n  async withSession<T = any>(\n    options: ClientSessionOptions,\n    executor: WithSessionCallback<T>\n  ): Promise<T>;\n  async withSession<T = any>(\n    optionsOrExecutor: ClientSessionOptions | WithSessionCallback<T>,\n    executor?: WithSessionCallback<T>\n  ): Promise<T> {\n    const options = {\n      // Always define an owner\n      owner: Symbol(),\n      // If it's an object inherit the options\n      ...(typeof optionsOrExecutor === 'object' ? optionsOrExecutor : {})\n    };\n\n    const withSessionCallback =\n      typeof optionsOrExecutor === 'function' ? optionsOrExecutor : executor;\n\n    if (withSessionCallback == null) {\n      throw new MongoInvalidArgumentError('Missing required callback parameter');\n    }\n\n    const session = this.startSession(options);\n\n    try {\n      return await withSessionCallback(session);\n    } finally {\n      try {\n        await session.endSession();\n      } catch (error) {\n        squashError(error);\n      }\n    }\n  }\n\n  /**\n   * Create a new Change Stream, watching for new changes (insertions, updates,\n   * replacements, deletions, and invalidations) in this cluster. Will ignore all\n   * changes to system collections, as well as the local, admin, and config databases.\n   *\n   * @remarks\n   * watch() accepts two generic arguments for distinct use cases:\n   * - The first is to provide the schema that may be defined for all the data within the current cluster\n   * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n   *\n   * @remarks\n   * When `timeoutMS` is configured for a change stream, it will have different behaviour depending\n   * on whether the change stream is in iterator mode or emitter mode. In both cases, a change\n   * stream will time out if it does not receive a change event within `timeoutMS` of the last change\n   * event.\n   *\n   * Note that if a change stream is consistently timing out when watching a collection, database or\n   * client that is being changed, then this may be due to the server timing out before it can finish\n   * processing the existing oplog. To address this, restart the change stream with a higher\n   * `timeoutMS`.\n   *\n   * If the change stream times out the initial aggregate operation to establish the change stream on\n   * the server, then the client will close the change stream. If the getMore calls to the server\n   * time out, then the change stream will be left open, but will throw a MongoOperationTimeoutError\n   * when in iterator mode and emit an error event that returns a MongoOperationTimeoutError in\n   * emitter mode.\n   *\n   * To determine whether or not the change stream is still open following a timeout, check the\n   * {@link ChangeStream.closed} getter.\n   *\n   * @example\n   * In iterator mode, if a next() call throws a timeout error, it will attempt to resume the change stream.\n   * The next call can just be retried after this succeeds.\n   * ```ts\n   * const changeStream = collection.watch([], { timeoutMS: 100 });\n   * try {\n   *     await changeStream.next();\n   * } catch (e) {\n   *     if (e instanceof MongoOperationTimeoutError && !changeStream.closed) {\n   *       await changeStream.next();\n   *     }\n   *     throw e;\n   * }\n   * ```\n   *\n   * @example\n   * In emitter mode, if the change stream goes `timeoutMS` without emitting a change event, it will\n   * emit an error event that returns a MongoOperationTimeoutError, but will not close the change\n   * stream unless the resume attempt fails. There is no need to re-establish change listeners as\n   * this will automatically continue emitting change events once the resume attempt completes.\n   *\n   * ```ts\n   * const changeStream = collection.watch([], { timeoutMS: 100 });\n   * changeStream.on('change', console.log);\n   * changeStream.on('error', e => {\n   *     if (e instanceof MongoOperationTimeoutError && !changeStream.closed) {\n   *         // do nothing\n   *     } else {\n   *         changeStream.close();\n   *     }\n   * });\n   * ```\n   * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n   * @param options - Optional settings for the command\n   * @typeParam TSchema - Type of the data being detected by the change stream\n   * @typeParam TChange - Type of the whole change stream document emitted\n   */\n  watch<\n    TSchema extends Document = Document,\n    TChange extends Document = ChangeStreamDocument<TSchema>\n  >(pipeline: Document[] = [], options: ChangeStreamOptions = {}): ChangeStream<TSchema, TChange> {\n    // Allow optionally not specifying a pipeline\n    if (!Array.isArray(pipeline)) {\n      options = pipeline;\n      pipeline = [];\n    }\n\n    return new ChangeStream<TSchema, TChange>(this, pipeline, resolveOptions(this, options));\n  }\n}\n\nconfigureResourceManagement(MongoClient.prototype);\n\n/**\n * Parsed Mongo Client Options.\n *\n * User supplied options are documented by `MongoClientOptions`.\n *\n * **NOTE:** The client's options parsing is subject to change to support new features.\n * This type is provided to aid with inspection of options after parsing, it should not be relied upon programmatically.\n *\n * Options are sourced from:\n * - connection string\n * - options object passed to the MongoClient constructor\n * - file system (ex. tls settings)\n * - environment variables\n * - DNS SRV records and TXT records\n *\n * Not all options may be present after client construction as some are obtained from asynchronous operations.\n *\n * @public\n */\nexport interface MongoOptions\n  extends Required<\n      Pick<\n        MongoClientOptions,\n        | 'autoEncryption'\n        | 'connectTimeoutMS'\n        | 'directConnection'\n        | 'driverInfo'\n        | 'forceServerObjectId'\n        | 'minHeartbeatFrequencyMS'\n        | 'heartbeatFrequencyMS'\n        | 'localThresholdMS'\n        | 'maxConnecting'\n        | 'maxIdleTimeMS'\n        | 'maxPoolSize'\n        | 'minPoolSize'\n        | 'monitorCommands'\n        | 'noDelay'\n        | 'pkFactory'\n        | 'raw'\n        | 'replicaSet'\n        | 'retryReads'\n        | 'retryWrites'\n        | 'serverSelectionTimeoutMS'\n        | 'socketTimeoutMS'\n        | 'srvMaxHosts'\n        | 'srvServiceName'\n        | 'tlsAllowInvalidCertificates'\n        | 'tlsAllowInvalidHostnames'\n        | 'tlsInsecure'\n        | 'waitQueueTimeoutMS'\n        | 'zlibCompressionLevel'\n      >\n    >,\n    SupportedNodeConnectionOptions {\n  appName?: string;\n  hosts: HostAddress[];\n  srvHost?: string;\n  credentials?: MongoCredentials;\n  readPreference: ReadPreference;\n  readConcern: ReadConcern;\n  loadBalanced: boolean;\n  directConnection: boolean;\n  serverApi: ServerApi;\n  compressors: CompressorName[];\n  writeConcern: WriteConcern;\n  dbName: string;\n  metadata: ClientMetadata;\n  /** @internal */\n  extendedMetadata: Promise<Document>;\n  /** @internal */\n  autoEncrypter?: AutoEncrypter;\n  /** @internal */\n  tokenCache?: TokenCache;\n  proxyHost?: string;\n  proxyPort?: number;\n  proxyUsername?: string;\n  proxyPassword?: string;\n  serverMonitoringMode: ServerMonitoringMode;\n  /** @internal */\n  connectionType?: typeof Connection;\n  /** @internal */\n  authProviders: MongoClientAuthProviders;\n  /** @internal */\n  encrypter: Encrypter;\n  /** @internal */\n  userSpecifiedAuthSource: boolean;\n  /** @internal */\n  userSpecifiedReplicaSet: boolean;\n\n  /**\n   * # NOTE ABOUT TLS Options\n   *\n   * If `tls` is provided as an option, it is equivalent to setting the `ssl` option.\n   *\n   * NodeJS native TLS options are passed through to the socket and retain their original types.\n   *\n   * ### Additional options:\n   *\n   * | nodejs native option  | driver spec equivalent option name            | driver option type |\n   * |:----------------------|:----------------------------------------------|:-------------------|\n   * | `ca`                  | `tlsCAFile`                                   | `string`           |\n   * | `crl`                 | `tlsCRLFile`                                  | `string`           |\n   * | `cert`                | `tlsCertificateKeyFile`                       | `string`           |\n   * | `key`                 | `tlsCertificateKeyFile`                       | `string`           |\n   * | `passphrase`          | `tlsCertificateKeyFilePassword`               | `string`           |\n   * | `rejectUnauthorized`  | `tlsAllowInvalidCertificates`                 | `boolean`          |\n   * | `checkServerIdentity` | `tlsAllowInvalidHostnames`                    | `boolean`          |\n   * | see note below        | `tlsInsecure`                                 | `boolean`          |\n   *\n   * If `tlsInsecure` is set to `true`, then it will set the node native options `checkServerIdentity`\n   * to a no-op and `rejectUnauthorized` to `false`.\n   *\n   * If `tlsInsecure` is set to `false`, then it will set the node native options `checkServerIdentity`\n   * to a no-op and `rejectUnauthorized` to the inverse value of `tlsAllowInvalidCertificates`. If\n   * `tlsAllowInvalidCertificates` is not set, then `rejectUnauthorized` will be set to `true`.\n   *\n   * ### Note on `tlsCAFile`, `tlsCertificateKeyFile` and `tlsCRLFile`\n   *\n   * The files specified by the paths passed in to the `tlsCAFile`, `tlsCertificateKeyFile` and `tlsCRLFile`\n   * fields are read lazily on the first call to `MongoClient.connect`. Once these files have been read and\n   * the `ca`, `cert`, `crl` and `key` fields are populated, they will not be read again on subsequent calls to\n   * `MongoClient.connect`. As a result, until the first call to `MongoClient.connect`, the `ca`,\n   * `cert`, `crl` and `key` fields will be undefined.\n   */\n  tls: boolean;\n  tlsCAFile?: string;\n  tlsCRLFile?: string;\n  tlsCertificateKeyFile?: string;\n\n  /**\n   * @internal\n   * TODO: NODE-5671 - remove internal flag\n   */\n  mongoLoggerOptions: MongoLoggerOptions;\n  /**\n   * @internal\n   * TODO: NODE-5671 - remove internal flag\n   */\n  mongodbLogPath?: 'stderr' | 'stdout' | MongoDBLogWritable;\n  timeoutMS?: number;\n  /** @internal */\n  __skipPingOnConnect?: boolean;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}