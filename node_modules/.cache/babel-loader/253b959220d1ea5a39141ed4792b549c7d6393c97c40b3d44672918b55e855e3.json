{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GridFSBucketReadStream = void 0;\nconst stream_1 = require(\"stream\");\nconst abstract_cursor_1 = require(\"../cursor/abstract_cursor\");\nconst error_1 = require(\"../error\");\nconst timeout_1 = require(\"../timeout\");\n/**\n * A readable stream that enables you to read buffers from GridFS.\n *\n * Do not instantiate this class directly. Use `openDownloadStream()` instead.\n * @public\n */\nclass GridFSBucketReadStream extends stream_1.Readable {\n  /**\n   * @param chunks - Handle for chunks collection\n   * @param files - Handle for files collection\n   * @param readPreference - The read preference to use\n   * @param filter - The filter to use to find the file document\n   * @internal\n   */\n  constructor(chunks, files, readPreference, filter, options) {\n    super({\n      emitClose: true\n    });\n    this.s = {\n      bytesToTrim: 0,\n      bytesToSkip: 0,\n      bytesRead: 0,\n      chunks,\n      expected: 0,\n      files,\n      filter,\n      init: false,\n      expectedEnd: 0,\n      options: {\n        start: 0,\n        end: 0,\n        ...options\n      },\n      readPreference,\n      timeoutContext: options?.timeoutMS != null ? new timeout_1.CSOTTimeoutContext({\n        timeoutMS: options.timeoutMS,\n        serverSelectionTimeoutMS: 0\n      }) : undefined\n    };\n  }\n  /**\n   * Reads from the cursor and pushes to the stream.\n   * Private Impl, do not call directly\n   * @internal\n   */\n  _read() {\n    if (this.destroyed) return;\n    waitForFile(this, () => doRead(this));\n  }\n  /**\n   * Sets the 0-based offset in bytes to start streaming from. Throws\n   * an error if this stream has entered flowing mode\n   * (e.g. if you've already called `on('data')`)\n   *\n   * @param start - 0-based offset in bytes to start streaming from\n   */\n  start() {\n    let start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    throwIfInitialized(this);\n    this.s.options.start = start;\n    return this;\n  }\n  /**\n   * Sets the 0-based offset in bytes to start streaming from. Throws\n   * an error if this stream has entered flowing mode\n   * (e.g. if you've already called `on('data')`)\n   *\n   * @param end - Offset in bytes to stop reading at\n   */\n  end() {\n    let end = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    throwIfInitialized(this);\n    this.s.options.end = end;\n    return this;\n  }\n  /**\n   * Marks this stream as aborted (will never push another `data` event)\n   * and kills the underlying cursor. Will emit the 'end' event, and then\n   * the 'close' event once the cursor is successfully killed.\n   */\n  async abort() {\n    this.push(null);\n    this.destroy();\n    const remainingTimeMS = this.s.timeoutContext?.getRemainingTimeMSOrThrow();\n    await this.s.cursor?.close({\n      timeoutMS: remainingTimeMS\n    });\n  }\n}\nexports.GridFSBucketReadStream = GridFSBucketReadStream;\n/**\n * Fires when the stream loaded the file document corresponding to the provided id.\n * @event\n */\nGridFSBucketReadStream.FILE = 'file';\nfunction throwIfInitialized(stream) {\n  if (stream.s.init) {\n    throw new error_1.MongoGridFSStreamError('Options cannot be changed after the stream is initialized');\n  }\n}\nfunction doRead(stream) {\n  if (stream.destroyed) return;\n  if (!stream.s.cursor) return;\n  if (!stream.s.file) return;\n  const handleReadResult = doc => {\n    if (stream.destroyed) return;\n    if (!doc) {\n      stream.push(null);\n      stream.s.cursor?.close().then(undefined, error => stream.destroy(error));\n      return;\n    }\n    if (!stream.s.file) return;\n    const bytesRemaining = stream.s.file.length - stream.s.bytesRead;\n    const expectedN = stream.s.expected++;\n    const expectedLength = Math.min(stream.s.file.chunkSize, bytesRemaining);\n    if (doc.n > expectedN) {\n      return stream.destroy(new error_1.MongoGridFSChunkError(`ChunkIsMissing: Got unexpected n: ${doc.n}, expected: ${expectedN}`));\n    }\n    if (doc.n < expectedN) {\n      return stream.destroy(new error_1.MongoGridFSChunkError(`ExtraChunk: Got unexpected n: ${doc.n}, expected: ${expectedN}`));\n    }\n    let buf = Buffer.isBuffer(doc.data) ? doc.data : doc.data.buffer;\n    if (buf.byteLength !== expectedLength) {\n      if (bytesRemaining <= 0) {\n        return stream.destroy(new error_1.MongoGridFSChunkError(`ExtraChunk: Got unexpected n: ${doc.n}, expected file length ${stream.s.file.length} bytes but already read ${stream.s.bytesRead} bytes`));\n      }\n      return stream.destroy(new error_1.MongoGridFSChunkError(`ChunkIsWrongSize: Got unexpected length: ${buf.byteLength}, expected: ${expectedLength}`));\n    }\n    stream.s.bytesRead += buf.byteLength;\n    if (buf.byteLength === 0) {\n      return stream.push(null);\n    }\n    let sliceStart = null;\n    let sliceEnd = null;\n    if (stream.s.bytesToSkip != null) {\n      sliceStart = stream.s.bytesToSkip;\n      stream.s.bytesToSkip = 0;\n    }\n    const atEndOfStream = expectedN === stream.s.expectedEnd - 1;\n    const bytesLeftToRead = stream.s.options.end - stream.s.bytesToSkip;\n    if (atEndOfStream && stream.s.bytesToTrim != null) {\n      sliceEnd = stream.s.file.chunkSize - stream.s.bytesToTrim;\n    } else if (stream.s.options.end && bytesLeftToRead < doc.data.byteLength) {\n      sliceEnd = bytesLeftToRead;\n    }\n    if (sliceStart != null || sliceEnd != null) {\n      buf = buf.slice(sliceStart || 0, sliceEnd || buf.byteLength);\n    }\n    stream.push(buf);\n    return;\n  };\n  stream.s.cursor.next().then(handleReadResult, error => {\n    if (stream.destroyed) return;\n    stream.destroy(error);\n  });\n}\nfunction init(stream) {\n  const findOneOptions = {};\n  if (stream.s.readPreference) {\n    findOneOptions.readPreference = stream.s.readPreference;\n  }\n  if (stream.s.options && stream.s.options.sort) {\n    findOneOptions.sort = stream.s.options.sort;\n  }\n  if (stream.s.options && stream.s.options.skip) {\n    findOneOptions.skip = stream.s.options.skip;\n  }\n  const handleReadResult = doc => {\n    if (stream.destroyed) return;\n    if (!doc) {\n      const identifier = stream.s.filter._id ? stream.s.filter._id.toString() : stream.s.filter.filename;\n      const errmsg = `FileNotFound: file ${identifier} was not found`;\n      // TODO(NODE-3483)\n      const err = new error_1.MongoRuntimeError(errmsg);\n      err.code = 'ENOENT'; // TODO: NODE-3338 set property as part of constructor\n      return stream.destroy(err);\n    }\n    // If document is empty, kill the stream immediately and don't\n    // execute any reads\n    if (doc.length <= 0) {\n      stream.push(null);\n      return;\n    }\n    if (stream.destroyed) {\n      // If user destroys the stream before we have a cursor, wait\n      // until the query is done to say we're 'closed' because we can't\n      // cancel a query.\n      stream.destroy();\n      return;\n    }\n    try {\n      stream.s.bytesToSkip = handleStartOption(stream, doc, stream.s.options);\n    } catch (error) {\n      return stream.destroy(error);\n    }\n    const filter = {\n      files_id: doc._id\n    };\n    // Currently (MongoDB 3.4.4) skip function does not support the index,\n    // it needs to retrieve all the documents first and then skip them. (CS-25811)\n    // As work around we use $gte on the \"n\" field.\n    if (stream.s.options && stream.s.options.start != null) {\n      const skip = Math.floor(stream.s.options.start / doc.chunkSize);\n      if (skip > 0) {\n        filter['n'] = {\n          $gte: skip\n        };\n      }\n    }\n    let remainingTimeMS;\n    try {\n      remainingTimeMS = stream.s.timeoutContext?.getRemainingTimeMSOrThrow(`Download timed out after ${stream.s.timeoutContext?.timeoutMS}ms`);\n    } catch (error) {\n      return stream.destroy(error);\n    }\n    stream.s.cursor = stream.s.chunks.find(filter, {\n      timeoutMode: stream.s.options.timeoutMS != null ? abstract_cursor_1.CursorTimeoutMode.LIFETIME : undefined,\n      timeoutMS: remainingTimeMS\n    }).sort({\n      n: 1\n    });\n    if (stream.s.readPreference) {\n      stream.s.cursor.withReadPreference(stream.s.readPreference);\n    }\n    stream.s.expectedEnd = Math.ceil(doc.length / doc.chunkSize);\n    stream.s.file = doc;\n    try {\n      stream.s.bytesToTrim = handleEndOption(stream, doc, stream.s.cursor, stream.s.options);\n    } catch (error) {\n      return stream.destroy(error);\n    }\n    stream.emit(GridFSBucketReadStream.FILE, doc);\n    return;\n  };\n  let remainingTimeMS;\n  try {\n    remainingTimeMS = stream.s.timeoutContext?.getRemainingTimeMSOrThrow(`Download timed out after ${stream.s.timeoutContext?.timeoutMS}ms`);\n  } catch (error) {\n    if (!stream.destroyed) stream.destroy(error);\n    return;\n  }\n  findOneOptions.timeoutMS = remainingTimeMS;\n  stream.s.files.findOne(stream.s.filter, findOneOptions).then(handleReadResult, error => {\n    if (stream.destroyed) return;\n    stream.destroy(error);\n  });\n}\nfunction waitForFile(stream, callback) {\n  if (stream.s.file) {\n    return callback();\n  }\n  if (!stream.s.init) {\n    init(stream);\n    stream.s.init = true;\n  }\n  stream.once('file', () => {\n    callback();\n  });\n}\nfunction handleStartOption(stream, doc, options) {\n  if (options && options.start != null) {\n    if (options.start > doc.length) {\n      throw new error_1.MongoInvalidArgumentError(`Stream start (${options.start}) must not be more than the length of the file (${doc.length})`);\n    }\n    if (options.start < 0) {\n      throw new error_1.MongoInvalidArgumentError(`Stream start (${options.start}) must not be negative`);\n    }\n    if (options.end != null && options.end < options.start) {\n      throw new error_1.MongoInvalidArgumentError(`Stream start (${options.start}) must not be greater than stream end (${options.end})`);\n    }\n    stream.s.bytesRead = Math.floor(options.start / doc.chunkSize) * doc.chunkSize;\n    stream.s.expected = Math.floor(options.start / doc.chunkSize);\n    return options.start - stream.s.bytesRead;\n  }\n  throw new error_1.MongoInvalidArgumentError('Start option must be defined');\n}\nfunction handleEndOption(stream, doc, cursor, options) {\n  if (options && options.end != null) {\n    if (options.end > doc.length) {\n      throw new error_1.MongoInvalidArgumentError(`Stream end (${options.end}) must not be more than the length of the file (${doc.length})`);\n    }\n    if (options.start == null || options.start < 0) {\n      throw new error_1.MongoInvalidArgumentError(`Stream end (${options.end}) must not be negative`);\n    }\n    const start = options.start != null ? Math.floor(options.start / doc.chunkSize) : 0;\n    cursor.limit(Math.ceil(options.end / doc.chunkSize) - start);\n    stream.s.expectedEnd = Math.ceil(options.end / doc.chunkSize);\n    return Math.ceil(options.end / doc.chunkSize) * doc.chunkSize - options.end;\n  }\n  throw new error_1.MongoInvalidArgumentError('End option must be defined');\n}","map":{"version":3,"names":["stream_1","require","abstract_cursor_1","error_1","timeout_1","GridFSBucketReadStream","Readable","constructor","chunks","files","readPreference","filter","options","emitClose","s","bytesToTrim","bytesToSkip","bytesRead","expected","init","expectedEnd","start","end","timeoutContext","timeoutMS","CSOTTimeoutContext","serverSelectionTimeoutMS","undefined","_read","destroyed","waitForFile","doRead","arguments","length","throwIfInitialized","abort","push","destroy","remainingTimeMS","getRemainingTimeMSOrThrow","cursor","close","exports","FILE","stream","MongoGridFSStreamError","file","handleReadResult","doc","then","error","bytesRemaining","expectedN","expectedLength","Math","min","chunkSize","n","MongoGridFSChunkError","buf","Buffer","isBuffer","data","buffer","byteLength","sliceStart","sliceEnd","atEndOfStream","bytesLeftToRead","slice","next","findOneOptions","sort","skip","identifier","_id","toString","filename","errmsg","err","MongoRuntimeError","code","handleStartOption","files_id","floor","$gte","find","timeoutMode","CursorTimeoutMode","LIFETIME","withReadPreference","ceil","handleEndOption","emit","findOne","callback","once","MongoInvalidArgumentError","limit"],"sources":["C:\\Users\\asmee\\Documents\\Visa-Application\\node_modules\\mongodb\\src\\gridfs\\download.ts"],"sourcesContent":["import { Readable } from 'stream';\n\nimport type { Document, ObjectId } from '../bson';\nimport type { Collection } from '../collection';\nimport { CursorTimeoutMode } from '../cursor/abstract_cursor';\nimport type { FindCursor } from '../cursor/find_cursor';\nimport {\n  MongoGridFSChunkError,\n  MongoGridFSStreamError,\n  MongoInvalidArgumentError,\n  MongoRuntimeError\n} from '../error';\nimport type { FindOptions } from '../operations/find';\nimport type { ReadPreference } from '../read_preference';\nimport type { Sort } from '../sort';\nimport { CSOTTimeoutContext } from '../timeout';\nimport type { Callback } from '../utils';\nimport type { GridFSChunk } from './upload';\n\n/** @public */\nexport interface GridFSBucketReadStreamOptions {\n  sort?: Sort;\n  skip?: number;\n  /**\n   * 0-indexed non-negative byte offset from the beginning of the file\n   */\n  start?: number;\n  /**\n   * 0-indexed non-negative byte offset to the end of the file contents\n   * to be returned by the stream. `end` is non-inclusive\n   */\n  end?: number;\n  /**\n   * @experimental\n   * Specifies the time an operation will run until it throws a timeout error\n   */\n  timeoutMS?: number;\n}\n\n/** @public */\nexport interface GridFSBucketReadStreamOptionsWithRevision extends GridFSBucketReadStreamOptions {\n  /** The revision number relative to the oldest file with the given filename. 0\n   * gets you the oldest file, 1 gets you the 2nd oldest, -1 gets you the\n   * newest. */\n  revision?: number;\n}\n\n/** @public */\nexport interface GridFSFile {\n  _id: ObjectId;\n  length: number;\n  chunkSize: number;\n  filename: string;\n  metadata?: Document;\n  uploadDate: Date;\n  /** @deprecated Will be removed in the next major version. */\n  contentType?: string;\n  /** @deprecated Will be removed in the next major version. */\n  aliases?: string[];\n}\n\n/** @internal */\nexport interface GridFSBucketReadStreamPrivate {\n  /**\n   * The running total number of bytes read from the chunks collection.\n   */\n  bytesRead: number;\n  /**\n   * The number of bytes to remove from the last chunk read in the file.  This is non-zero\n   * if `end` is not equal to the length of the document and `end` is not a multiple\n   * of the chunkSize.\n   */\n  bytesToTrim: number;\n\n  /**\n   * The number of bytes to remove from the first chunk read in the file.  This is non-zero\n   * if `start` is not equal to the 0  and `start` is not a multiple\n   * of the chunkSize.\n   */\n  bytesToSkip: number;\n\n  files: Collection<GridFSFile>;\n  chunks: Collection<GridFSChunk>;\n  cursor?: FindCursor<GridFSChunk>;\n\n  /** The running total number of chunks read from the chunks collection. */\n  expected: number;\n\n  /**\n   * The filter used to search in the _files_ collection (i.e., `{ _id: <> }`)\n   * This is not the same filter used when reading chunks from the chunks collection.\n   */\n  filter: Document;\n\n  /** Indicates whether or not download has started. */\n  init: boolean;\n\n  /** The expected number of chunks to read, calculated from start, end, chunkSize and file length. */\n  expectedEnd: number;\n  file?: GridFSFile;\n  options: {\n    sort?: Sort;\n    skip?: number;\n    start: number;\n    end: number;\n    timeoutMS?: number;\n  };\n  readPreference?: ReadPreference;\n  timeoutContext?: CSOTTimeoutContext;\n}\n\n/**\n * A readable stream that enables you to read buffers from GridFS.\n *\n * Do not instantiate this class directly. Use `openDownloadStream()` instead.\n * @public\n */\nexport class GridFSBucketReadStream extends Readable {\n  /** @internal */\n  s: GridFSBucketReadStreamPrivate;\n\n  /**\n   * Fires when the stream loaded the file document corresponding to the provided id.\n   * @event\n   */\n  static readonly FILE = 'file' as const;\n\n  /**\n   * @param chunks - Handle for chunks collection\n   * @param files - Handle for files collection\n   * @param readPreference - The read preference to use\n   * @param filter - The filter to use to find the file document\n   * @internal\n   */\n  constructor(\n    chunks: Collection<GridFSChunk>,\n    files: Collection<GridFSFile>,\n    readPreference: ReadPreference | undefined,\n    filter: Document,\n    options?: GridFSBucketReadStreamOptions\n  ) {\n    super({ emitClose: true });\n    this.s = {\n      bytesToTrim: 0,\n      bytesToSkip: 0,\n      bytesRead: 0,\n      chunks,\n      expected: 0,\n      files,\n      filter,\n      init: false,\n      expectedEnd: 0,\n      options: {\n        start: 0,\n        end: 0,\n        ...options\n      },\n      readPreference,\n      timeoutContext:\n        options?.timeoutMS != null\n          ? new CSOTTimeoutContext({ timeoutMS: options.timeoutMS, serverSelectionTimeoutMS: 0 })\n          : undefined\n    };\n  }\n\n  /**\n   * Reads from the cursor and pushes to the stream.\n   * Private Impl, do not call directly\n   * @internal\n   */\n  override _read(): void {\n    if (this.destroyed) return;\n    waitForFile(this, () => doRead(this));\n  }\n\n  /**\n   * Sets the 0-based offset in bytes to start streaming from. Throws\n   * an error if this stream has entered flowing mode\n   * (e.g. if you've already called `on('data')`)\n   *\n   * @param start - 0-based offset in bytes to start streaming from\n   */\n  start(start = 0): this {\n    throwIfInitialized(this);\n    this.s.options.start = start;\n    return this;\n  }\n\n  /**\n   * Sets the 0-based offset in bytes to start streaming from. Throws\n   * an error if this stream has entered flowing mode\n   * (e.g. if you've already called `on('data')`)\n   *\n   * @param end - Offset in bytes to stop reading at\n   */\n  end(end = 0): this {\n    throwIfInitialized(this);\n    this.s.options.end = end;\n    return this;\n  }\n\n  /**\n   * Marks this stream as aborted (will never push another `data` event)\n   * and kills the underlying cursor. Will emit the 'end' event, and then\n   * the 'close' event once the cursor is successfully killed.\n   */\n  async abort(): Promise<void> {\n    this.push(null);\n    this.destroy();\n    const remainingTimeMS = this.s.timeoutContext?.getRemainingTimeMSOrThrow();\n    await this.s.cursor?.close({ timeoutMS: remainingTimeMS });\n  }\n}\n\nfunction throwIfInitialized(stream: GridFSBucketReadStream): void {\n  if (stream.s.init) {\n    throw new MongoGridFSStreamError('Options cannot be changed after the stream is initialized');\n  }\n}\n\nfunction doRead(stream: GridFSBucketReadStream): void {\n  if (stream.destroyed) return;\n  if (!stream.s.cursor) return;\n  if (!stream.s.file) return;\n\n  const handleReadResult = (doc: Document | null) => {\n    if (stream.destroyed) return;\n\n    if (!doc) {\n      stream.push(null);\n\n      stream.s.cursor?.close().then(undefined, error => stream.destroy(error));\n      return;\n    }\n\n    if (!stream.s.file) return;\n\n    const bytesRemaining = stream.s.file.length - stream.s.bytesRead;\n    const expectedN = stream.s.expected++;\n    const expectedLength = Math.min(stream.s.file.chunkSize, bytesRemaining);\n    if (doc.n > expectedN) {\n      return stream.destroy(\n        new MongoGridFSChunkError(\n          `ChunkIsMissing: Got unexpected n: ${doc.n}, expected: ${expectedN}`\n        )\n      );\n    }\n\n    if (doc.n < expectedN) {\n      return stream.destroy(\n        new MongoGridFSChunkError(`ExtraChunk: Got unexpected n: ${doc.n}, expected: ${expectedN}`)\n      );\n    }\n\n    let buf = Buffer.isBuffer(doc.data) ? doc.data : doc.data.buffer;\n\n    if (buf.byteLength !== expectedLength) {\n      if (bytesRemaining <= 0) {\n        return stream.destroy(\n          new MongoGridFSChunkError(\n            `ExtraChunk: Got unexpected n: ${doc.n}, expected file length ${stream.s.file.length} bytes but already read ${stream.s.bytesRead} bytes`\n          )\n        );\n      }\n\n      return stream.destroy(\n        new MongoGridFSChunkError(\n          `ChunkIsWrongSize: Got unexpected length: ${buf.byteLength}, expected: ${expectedLength}`\n        )\n      );\n    }\n\n    stream.s.bytesRead += buf.byteLength;\n\n    if (buf.byteLength === 0) {\n      return stream.push(null);\n    }\n\n    let sliceStart = null;\n    let sliceEnd = null;\n\n    if (stream.s.bytesToSkip != null) {\n      sliceStart = stream.s.bytesToSkip;\n      stream.s.bytesToSkip = 0;\n    }\n\n    const atEndOfStream = expectedN === stream.s.expectedEnd - 1;\n    const bytesLeftToRead = stream.s.options.end - stream.s.bytesToSkip;\n    if (atEndOfStream && stream.s.bytesToTrim != null) {\n      sliceEnd = stream.s.file.chunkSize - stream.s.bytesToTrim;\n    } else if (stream.s.options.end && bytesLeftToRead < doc.data.byteLength) {\n      sliceEnd = bytesLeftToRead;\n    }\n\n    if (sliceStart != null || sliceEnd != null) {\n      buf = buf.slice(sliceStart || 0, sliceEnd || buf.byteLength);\n    }\n\n    stream.push(buf);\n    return;\n  };\n\n  stream.s.cursor.next().then(handleReadResult, error => {\n    if (stream.destroyed) return;\n    stream.destroy(error);\n  });\n}\n\nfunction init(stream: GridFSBucketReadStream): void {\n  const findOneOptions: FindOptions = {};\n  if (stream.s.readPreference) {\n    findOneOptions.readPreference = stream.s.readPreference;\n  }\n  if (stream.s.options && stream.s.options.sort) {\n    findOneOptions.sort = stream.s.options.sort;\n  }\n  if (stream.s.options && stream.s.options.skip) {\n    findOneOptions.skip = stream.s.options.skip;\n  }\n\n  const handleReadResult = (doc: Document | null) => {\n    if (stream.destroyed) return;\n\n    if (!doc) {\n      const identifier = stream.s.filter._id\n        ? stream.s.filter._id.toString()\n        : stream.s.filter.filename;\n      const errmsg = `FileNotFound: file ${identifier} was not found`;\n      // TODO(NODE-3483)\n      const err = new MongoRuntimeError(errmsg);\n      err.code = 'ENOENT'; // TODO: NODE-3338 set property as part of constructor\n      return stream.destroy(err);\n    }\n\n    // If document is empty, kill the stream immediately and don't\n    // execute any reads\n    if (doc.length <= 0) {\n      stream.push(null);\n      return;\n    }\n\n    if (stream.destroyed) {\n      // If user destroys the stream before we have a cursor, wait\n      // until the query is done to say we're 'closed' because we can't\n      // cancel a query.\n      stream.destroy();\n      return;\n    }\n\n    try {\n      stream.s.bytesToSkip = handleStartOption(stream, doc, stream.s.options);\n    } catch (error) {\n      return stream.destroy(error);\n    }\n\n    const filter: Document = { files_id: doc._id };\n\n    // Currently (MongoDB 3.4.4) skip function does not support the index,\n    // it needs to retrieve all the documents first and then skip them. (CS-25811)\n    // As work around we use $gte on the \"n\" field.\n    if (stream.s.options && stream.s.options.start != null) {\n      const skip = Math.floor(stream.s.options.start / doc.chunkSize);\n      if (skip > 0) {\n        filter['n'] = { $gte: skip };\n      }\n    }\n\n    let remainingTimeMS: number | undefined;\n    try {\n      remainingTimeMS = stream.s.timeoutContext?.getRemainingTimeMSOrThrow(\n        `Download timed out after ${stream.s.timeoutContext?.timeoutMS}ms`\n      );\n    } catch (error) {\n      return stream.destroy(error);\n    }\n\n    stream.s.cursor = stream.s.chunks\n      .find(filter, {\n        timeoutMode: stream.s.options.timeoutMS != null ? CursorTimeoutMode.LIFETIME : undefined,\n        timeoutMS: remainingTimeMS\n      })\n      .sort({ n: 1 });\n\n    if (stream.s.readPreference) {\n      stream.s.cursor.withReadPreference(stream.s.readPreference);\n    }\n\n    stream.s.expectedEnd = Math.ceil(doc.length / doc.chunkSize);\n    stream.s.file = doc as GridFSFile;\n\n    try {\n      stream.s.bytesToTrim = handleEndOption(stream, doc, stream.s.cursor, stream.s.options);\n    } catch (error) {\n      return stream.destroy(error);\n    }\n\n    stream.emit(GridFSBucketReadStream.FILE, doc);\n    return;\n  };\n\n  let remainingTimeMS: number | undefined;\n  try {\n    remainingTimeMS = stream.s.timeoutContext?.getRemainingTimeMSOrThrow(\n      `Download timed out after ${stream.s.timeoutContext?.timeoutMS}ms`\n    );\n  } catch (error) {\n    if (!stream.destroyed) stream.destroy(error);\n    return;\n  }\n\n  findOneOptions.timeoutMS = remainingTimeMS;\n\n  stream.s.files.findOne(stream.s.filter, findOneOptions).then(handleReadResult, error => {\n    if (stream.destroyed) return;\n    stream.destroy(error);\n  });\n}\n\nfunction waitForFile(stream: GridFSBucketReadStream, callback: Callback): void {\n  if (stream.s.file) {\n    return callback();\n  }\n\n  if (!stream.s.init) {\n    init(stream);\n    stream.s.init = true;\n  }\n\n  stream.once('file', () => {\n    callback();\n  });\n}\n\nfunction handleStartOption(\n  stream: GridFSBucketReadStream,\n  doc: Document,\n  options: GridFSBucketReadStreamOptions\n): number {\n  if (options && options.start != null) {\n    if (options.start > doc.length) {\n      throw new MongoInvalidArgumentError(\n        `Stream start (${options.start}) must not be more than the length of the file (${doc.length})`\n      );\n    }\n    if (options.start < 0) {\n      throw new MongoInvalidArgumentError(`Stream start (${options.start}) must not be negative`);\n    }\n    if (options.end != null && options.end < options.start) {\n      throw new MongoInvalidArgumentError(\n        `Stream start (${options.start}) must not be greater than stream end (${options.end})`\n      );\n    }\n\n    stream.s.bytesRead = Math.floor(options.start / doc.chunkSize) * doc.chunkSize;\n    stream.s.expected = Math.floor(options.start / doc.chunkSize);\n\n    return options.start - stream.s.bytesRead;\n  }\n  throw new MongoInvalidArgumentError('Start option must be defined');\n}\n\nfunction handleEndOption(\n  stream: GridFSBucketReadStream,\n  doc: Document,\n  cursor: FindCursor<GridFSChunk>,\n  options: GridFSBucketReadStreamOptions\n) {\n  if (options && options.end != null) {\n    if (options.end > doc.length) {\n      throw new MongoInvalidArgumentError(\n        `Stream end (${options.end}) must not be more than the length of the file (${doc.length})`\n      );\n    }\n    if (options.start == null || options.start < 0) {\n      throw new MongoInvalidArgumentError(`Stream end (${options.end}) must not be negative`);\n    }\n\n    const start = options.start != null ? Math.floor(options.start / doc.chunkSize) : 0;\n\n    cursor.limit(Math.ceil(options.end / doc.chunkSize) - start);\n\n    stream.s.expectedEnd = Math.ceil(options.end / doc.chunkSize);\n\n    return Math.ceil(options.end / doc.chunkSize) * doc.chunkSize - options.end;\n  }\n  throw new MongoInvalidArgumentError('End option must be defined');\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}