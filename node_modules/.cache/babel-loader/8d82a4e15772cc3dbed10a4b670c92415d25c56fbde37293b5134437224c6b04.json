{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MongoWriteConcernError = exports.MongoServerSelectionError = exports.MongoSystemError = exports.MongoMissingDependencyError = exports.MongoMissingCredentialsError = exports.MongoCompatibilityError = exports.MongoInvalidArgumentError = exports.MongoParseError = exports.MongoNetworkTimeoutError = exports.MongoNetworkError = exports.MongoClientClosedError = exports.MongoTopologyClosedError = exports.MongoCursorExhaustedError = exports.MongoServerClosedError = exports.MongoCursorInUseError = exports.MongoOperationTimeoutError = exports.MongoUnexpectedServerResponseError = exports.MongoGridFSChunkError = exports.MongoGridFSStreamError = exports.MongoTailableCursorError = exports.MongoChangeStreamError = exports.MongoClientBulkWriteExecutionError = exports.MongoClientBulkWriteCursorError = exports.MongoClientBulkWriteError = exports.MongoGCPError = exports.MongoAzureError = exports.MongoOIDCError = exports.MongoAWSError = exports.MongoKerberosError = exports.MongoExpiredSessionError = exports.MongoTransactionError = exports.MongoNotConnectedError = exports.MongoDecompressionError = exports.MongoBatchReExecutionError = exports.MongoStalePrimaryError = exports.MongoRuntimeError = exports.MongoAPIError = exports.MongoDriverError = exports.MongoServerError = exports.MongoError = exports.MongoErrorLabel = exports.GET_MORE_RESUMABLE_CODES = exports.MONGODB_ERROR_CODES = exports.NODE_IS_RECOVERING_ERROR_MESSAGE = exports.LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE = exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE = void 0;\nexports.needsRetryableWriteLabel = needsRetryableWriteLabel;\nexports.isRetryableWriteError = isRetryableWriteError;\nexports.isRetryableReadError = isRetryableReadError;\nexports.isNodeShuttingDownError = isNodeShuttingDownError;\nexports.isSDAMUnrecoverableError = isSDAMUnrecoverableError;\nexports.isNetworkTimeoutError = isNetworkTimeoutError;\nexports.isResumableError = isResumableError;\n/**\n * @internal\n * The legacy error message from the server that indicates the node is not a writable primary\n * https://github.com/mongodb/specifications/blob/921232976f9913cf17415b5ef937ee772e45e6ae/source/server-discovery-and-monitoring/server-discovery-and-monitoring.md#not-writable-primary-and-node-is-recovering\n */\nexports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE = new RegExp('not master', 'i');\n/**\n * @internal\n * The legacy error message from the server that indicates the node is not a primary or secondary\n * https://github.com/mongodb/specifications/blob/921232976f9913cf17415b5ef937ee772e45e6ae/source/server-discovery-and-monitoring/server-discovery-and-monitoring.md#not-writable-primary-and-node-is-recovering\n */\nexports.LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE = new RegExp('not master or secondary', 'i');\n/**\n * @internal\n * The error message from the server that indicates the node is recovering\n * https://github.com/mongodb/specifications/blob/921232976f9913cf17415b5ef937ee772e45e6ae/source/server-discovery-and-monitoring/server-discovery-and-monitoring.md#not-writable-primary-and-node-is-recovering\n */\nexports.NODE_IS_RECOVERING_ERROR_MESSAGE = new RegExp('node is recovering', 'i');\n/** @internal MongoDB Error Codes */\nexports.MONGODB_ERROR_CODES = Object.freeze({\n  HostUnreachable: 6,\n  HostNotFound: 7,\n  AuthenticationFailed: 18,\n  NetworkTimeout: 89,\n  ShutdownInProgress: 91,\n  PrimarySteppedDown: 189,\n  ExceededTimeLimit: 262,\n  SocketException: 9001,\n  NotWritablePrimary: 10107,\n  InterruptedAtShutdown: 11600,\n  InterruptedDueToReplStateChange: 11602,\n  NotPrimaryNoSecondaryOk: 13435,\n  NotPrimaryOrSecondary: 13436,\n  StaleShardVersion: 63,\n  StaleEpoch: 150,\n  StaleConfig: 13388,\n  RetryChangeStream: 234,\n  FailedToSatisfyReadPreference: 133,\n  CursorNotFound: 43,\n  LegacyNotPrimary: 10058,\n  // WriteConcernTimeout is WriteConcernFailed on pre-8.1 servers\n  WriteConcernTimeout: 64,\n  NamespaceNotFound: 26,\n  IllegalOperation: 20,\n  MaxTimeMSExpired: 50,\n  UnknownReplWriteConcern: 79,\n  UnsatisfiableWriteConcern: 100,\n  Reauthenticate: 391,\n  ReadConcernMajorityNotAvailableYet: 134\n});\n// From spec https://github.com/mongodb/specifications/blob/921232976f9913cf17415b5ef937ee772e45e6ae/source/change-streams/change-streams.md#resumable-error\nexports.GET_MORE_RESUMABLE_CODES = new Set([exports.MONGODB_ERROR_CODES.HostUnreachable, exports.MONGODB_ERROR_CODES.HostNotFound, exports.MONGODB_ERROR_CODES.NetworkTimeout, exports.MONGODB_ERROR_CODES.ShutdownInProgress, exports.MONGODB_ERROR_CODES.PrimarySteppedDown, exports.MONGODB_ERROR_CODES.ExceededTimeLimit, exports.MONGODB_ERROR_CODES.SocketException, exports.MONGODB_ERROR_CODES.NotWritablePrimary, exports.MONGODB_ERROR_CODES.InterruptedAtShutdown, exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange, exports.MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk, exports.MONGODB_ERROR_CODES.NotPrimaryOrSecondary, exports.MONGODB_ERROR_CODES.StaleShardVersion, exports.MONGODB_ERROR_CODES.StaleEpoch, exports.MONGODB_ERROR_CODES.StaleConfig, exports.MONGODB_ERROR_CODES.RetryChangeStream, exports.MONGODB_ERROR_CODES.FailedToSatisfyReadPreference, exports.MONGODB_ERROR_CODES.CursorNotFound]);\n/** @public */\nexports.MongoErrorLabel = Object.freeze({\n  RetryableWriteError: 'RetryableWriteError',\n  TransientTransactionError: 'TransientTransactionError',\n  UnknownTransactionCommitResult: 'UnknownTransactionCommitResult',\n  ResumableChangeStreamError: 'ResumableChangeStreamError',\n  HandshakeError: 'HandshakeError',\n  ResetPool: 'ResetPool',\n  PoolRequstedRetry: 'PoolRequstedRetry',\n  InterruptInUseConnections: 'InterruptInUseConnections',\n  NoWritesPerformed: 'NoWritesPerformed'\n});\nfunction isAggregateError(e) {\n  return e != null && typeof e === 'object' && 'errors' in e && Array.isArray(e.errors);\n}\n/**\n * @public\n * @category Error\n *\n * @privateRemarks\n * mongodb-client-encryption has a dependency on this error, it uses the constructor with a string argument\n */\nclass MongoError extends Error {\n  get errorLabels() {\n    return Array.from(this.errorLabelSet);\n  }\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message, options) {\n    super(message, options);\n    /** @internal */\n    this.errorLabelSet = new Set();\n  }\n  /** @internal */\n  static buildErrorMessage(e) {\n    if (typeof e === 'string') {\n      return e;\n    }\n    if (isAggregateError(e) && e.message.length === 0) {\n      return e.errors.length === 0 ? 'AggregateError has an empty errors array. Please check the `cause` property for more information.' : e.errors.map(_ref => {\n        let {\n          message\n        } = _ref;\n        return message;\n      }).join(', ');\n    }\n    return e != null && typeof e === 'object' && 'message' in e && typeof e.message === 'string' ? e.message : 'empty error message';\n  }\n  get name() {\n    return 'MongoError';\n  }\n  /** Legacy name for server error responses */\n  get errmsg() {\n    return this.message;\n  }\n  /**\n   * Checks the error to see if it has an error label\n   *\n   * @param label - The error label to check for\n   * @returns returns true if the error has the provided error label\n   */\n  hasErrorLabel(label) {\n    return this.errorLabelSet.has(label);\n  }\n  addErrorLabel(label) {\n    this.errorLabelSet.add(label);\n  }\n}\nexports.MongoError = MongoError;\n/**\n * An error coming from the mongo server\n *\n * @public\n * @category Error\n */\nclass MongoServerError extends MongoError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message) {\n    super(message.message || message.errmsg || message.$err || 'n/a');\n    if (message.errorLabels) {\n      for (const label of message.errorLabels) this.addErrorLabel(label);\n    }\n    this.errorResponse = message;\n    for (const name in message) {\n      if (name !== 'errorLabels' && name !== 'errmsg' && name !== 'message' && name !== 'errorResponse') {\n        this[name] = message[name];\n      }\n    }\n  }\n  get name() {\n    return 'MongoServerError';\n  }\n}\nexports.MongoServerError = MongoServerError;\n/**\n * An error generated by the driver\n *\n * @public\n * @category Error\n */\nclass MongoDriverError extends MongoError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message, options) {\n    super(message, options);\n  }\n  get name() {\n    return 'MongoDriverError';\n  }\n}\nexports.MongoDriverError = MongoDriverError;\n/**\n * An error generated when the driver API is used incorrectly\n *\n * @privateRemarks\n * Should **never** be directly instantiated\n *\n * @public\n * @category Error\n */\nclass MongoAPIError extends MongoDriverError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message, options) {\n    super(message, options);\n  }\n  get name() {\n    return 'MongoAPIError';\n  }\n}\nexports.MongoAPIError = MongoAPIError;\n/**\n * An error generated when the driver encounters unexpected input\n * or reaches an unexpected/invalid internal state.\n *\n * @privateRemarks\n * Should **never** be directly instantiated.\n *\n * @public\n * @category Error\n */\nclass MongoRuntimeError extends MongoDriverError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message, options) {\n    super(message, options);\n  }\n  get name() {\n    return 'MongoRuntimeError';\n  }\n}\nexports.MongoRuntimeError = MongoRuntimeError;\n/**\n * An error generated when a primary server is marked stale, never directly thrown\n *\n * @public\n * @category Error\n */\nclass MongoStalePrimaryError extends MongoRuntimeError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message, options) {\n    super(message, options);\n  }\n  get name() {\n    return 'MongoStalePrimaryError';\n  }\n}\nexports.MongoStalePrimaryError = MongoStalePrimaryError;\n/**\n * An error generated when a batch command is re-executed after one of the commands in the batch\n * has failed\n *\n * @public\n * @category Error\n */\nclass MongoBatchReExecutionError extends MongoAPIError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor() {\n    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'This batch has already been executed, create new batch to execute';\n    super(message);\n  }\n  get name() {\n    return 'MongoBatchReExecutionError';\n  }\n}\nexports.MongoBatchReExecutionError = MongoBatchReExecutionError;\n/**\n * An error generated when the driver fails to decompress\n * data received from the server.\n *\n * @public\n * @category Error\n */\nclass MongoDecompressionError extends MongoRuntimeError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message) {\n    super(message);\n  }\n  get name() {\n    return 'MongoDecompressionError';\n  }\n}\nexports.MongoDecompressionError = MongoDecompressionError;\n/**\n * An error thrown when the user attempts to operate on a database or collection through a MongoClient\n * that has not yet successfully called the \"connect\" method\n *\n * @public\n * @category Error\n */\nclass MongoNotConnectedError extends MongoAPIError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message) {\n    super(message);\n  }\n  get name() {\n    return 'MongoNotConnectedError';\n  }\n}\nexports.MongoNotConnectedError = MongoNotConnectedError;\n/**\n * An error generated when the user makes a mistake in the usage of transactions.\n * (e.g. attempting to commit a transaction with a readPreference other than primary)\n *\n * @public\n * @category Error\n */\nclass MongoTransactionError extends MongoAPIError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message) {\n    super(message);\n  }\n  get name() {\n    return 'MongoTransactionError';\n  }\n}\nexports.MongoTransactionError = MongoTransactionError;\n/**\n * An error generated when the user attempts to operate\n * on a session that has expired or has been closed.\n *\n * @public\n * @category Error\n */\nclass MongoExpiredSessionError extends MongoAPIError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor() {\n    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Cannot use a session that has ended';\n    super(message);\n  }\n  get name() {\n    return 'MongoExpiredSessionError';\n  }\n}\nexports.MongoExpiredSessionError = MongoExpiredSessionError;\n/**\n * A error generated when the user attempts to authenticate\n * via Kerberos, but fails to connect to the Kerberos client.\n *\n * @public\n * @category Error\n */\nclass MongoKerberosError extends MongoRuntimeError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message) {\n    super(message);\n  }\n  get name() {\n    return 'MongoKerberosError';\n  }\n}\nexports.MongoKerberosError = MongoKerberosError;\n/**\n * A error generated when the user attempts to authenticate\n * via AWS, but fails\n *\n * @public\n * @category Error\n */\nclass MongoAWSError extends MongoRuntimeError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message, options) {\n    super(message, options);\n  }\n  get name() {\n    return 'MongoAWSError';\n  }\n}\nexports.MongoAWSError = MongoAWSError;\n/**\n * A error generated when the user attempts to authenticate\n * via OIDC callbacks, but fails.\n *\n * @public\n * @category Error\n */\nclass MongoOIDCError extends MongoRuntimeError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message) {\n    super(message);\n  }\n  get name() {\n    return 'MongoOIDCError';\n  }\n}\nexports.MongoOIDCError = MongoOIDCError;\n/**\n * A error generated when the user attempts to authenticate\n * via Azure, but fails.\n *\n * @public\n * @category Error\n */\nclass MongoAzureError extends MongoOIDCError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message) {\n    super(message);\n  }\n  get name() {\n    return 'MongoAzureError';\n  }\n}\nexports.MongoAzureError = MongoAzureError;\n/**\n * A error generated when the user attempts to authenticate\n * via GCP, but fails.\n *\n * @public\n * @category Error\n */\nclass MongoGCPError extends MongoOIDCError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message) {\n    super(message);\n  }\n  get name() {\n    return 'MongoGCPError';\n  }\n}\nexports.MongoGCPError = MongoGCPError;\n/**\n * An error indicating that an error occurred when executing the bulk write.\n *\n * @public\n * @category Error\n */\nclass MongoClientBulkWriteError extends MongoServerError {\n  /**\n   * Initialize the client bulk write error.\n   * @param message - The error message.\n   */\n  constructor(message) {\n    super(message);\n    this.writeConcernErrors = [];\n    this.writeErrors = new Map();\n  }\n  get name() {\n    return 'MongoClientBulkWriteError';\n  }\n}\nexports.MongoClientBulkWriteError = MongoClientBulkWriteError;\n/**\n * An error indicating that an error occurred when processing bulk write results.\n *\n * @public\n * @category Error\n */\nclass MongoClientBulkWriteCursorError extends MongoRuntimeError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message) {\n    super(message);\n  }\n  get name() {\n    return 'MongoClientBulkWriteCursorError';\n  }\n}\nexports.MongoClientBulkWriteCursorError = MongoClientBulkWriteCursorError;\n/**\n * An error indicating that an error occurred on the client when executing a client bulk write.\n *\n * @public\n * @category Error\n */\nclass MongoClientBulkWriteExecutionError extends MongoRuntimeError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message) {\n    super(message);\n  }\n  get name() {\n    return 'MongoClientBulkWriteExecutionError';\n  }\n}\nexports.MongoClientBulkWriteExecutionError = MongoClientBulkWriteExecutionError;\n/**\n * An error generated when a ChangeStream operation fails to execute.\n *\n * @public\n * @category Error\n */\nclass MongoChangeStreamError extends MongoRuntimeError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message) {\n    super(message);\n  }\n  get name() {\n    return 'MongoChangeStreamError';\n  }\n}\nexports.MongoChangeStreamError = MongoChangeStreamError;\n/**\n * An error thrown when the user calls a function or method not supported on a tailable cursor\n *\n * @public\n * @category Error\n */\nclass MongoTailableCursorError extends MongoAPIError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor() {\n    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Tailable cursor does not support this operation';\n    super(message);\n  }\n  get name() {\n    return 'MongoTailableCursorError';\n  }\n}\nexports.MongoTailableCursorError = MongoTailableCursorError;\n/** An error generated when a GridFSStream operation fails to execute.\n *\n * @public\n * @category Error\n */\nclass MongoGridFSStreamError extends MongoRuntimeError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message) {\n    super(message);\n  }\n  get name() {\n    return 'MongoGridFSStreamError';\n  }\n}\nexports.MongoGridFSStreamError = MongoGridFSStreamError;\n/**\n * An error generated when a malformed or invalid chunk is\n * encountered when reading from a GridFSStream.\n *\n * @public\n * @category Error\n */\nclass MongoGridFSChunkError extends MongoRuntimeError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message) {\n    super(message);\n  }\n  get name() {\n    return 'MongoGridFSChunkError';\n  }\n}\nexports.MongoGridFSChunkError = MongoGridFSChunkError;\n/**\n * An error generated when a **parsable** unexpected response comes from the server.\n * This is generally an error where the driver in a state expecting a certain behavior to occur in\n * the next message from MongoDB but it receives something else.\n * This error **does not** represent an issue with wire message formatting.\n *\n * #### Example\n * When an operation fails, it is the driver's job to retry it. It must perform serverSelection\n * again to make sure that it attempts the operation against a server in a good state. If server\n * selection returns a server that does not support retryable operations, this error is used.\n * This scenario is unlikely as retryable support would also have been determined on the first attempt\n * but it is possible the state change could report a selectable server that does not support retries.\n *\n * @public\n * @category Error\n */\nclass MongoUnexpectedServerResponseError extends MongoRuntimeError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message, options) {\n    super(message, options);\n  }\n  get name() {\n    return 'MongoUnexpectedServerResponseError';\n  }\n}\nexports.MongoUnexpectedServerResponseError = MongoUnexpectedServerResponseError;\n/**\n * @public\n * @category Error\n *\n * The `MongoOperationTimeoutError` class represents an error that occurs when an operation could not be completed within the specified `timeoutMS`.\n * It is generated by the driver in support of the \"client side operation timeout\" feature so inherits from `MongoDriverError`.\n * When `timeoutMS` is enabled `MongoServerError`s relating to `MaxTimeExpired` errors will be converted to `MongoOperationTimeoutError`\n *\n * @example\n * ```ts\n * try {\n *   await blogs.insertOne(blogPost, { timeoutMS: 60_000 })\n * } catch (error) {\n *   if (error instanceof MongoOperationTimeoutError) {\n *     console.log(`Oh no! writer's block!`, error);\n *   }\n * }\n * ```\n */\nclass MongoOperationTimeoutError extends MongoDriverError {\n  get name() {\n    return 'MongoOperationTimeoutError';\n  }\n}\nexports.MongoOperationTimeoutError = MongoOperationTimeoutError;\n/**\n * An error thrown when the user attempts to add options to a cursor that has already been\n * initialized\n *\n * @public\n * @category Error\n */\nclass MongoCursorInUseError extends MongoAPIError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor() {\n    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Cursor is already initialized';\n    super(message);\n  }\n  get name() {\n    return 'MongoCursorInUseError';\n  }\n}\nexports.MongoCursorInUseError = MongoCursorInUseError;\n/**\n * An error generated when an attempt is made to operate\n * on a closed/closing server.\n *\n * @public\n * @category Error\n */\nclass MongoServerClosedError extends MongoAPIError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor() {\n    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Server is closed';\n    super(message);\n  }\n  get name() {\n    return 'MongoServerClosedError';\n  }\n}\nexports.MongoServerClosedError = MongoServerClosedError;\n/**\n * An error thrown when an attempt is made to read from a cursor that has been exhausted\n *\n * @public\n * @category Error\n */\nclass MongoCursorExhaustedError extends MongoAPIError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message) {\n    super(message || 'Cursor is exhausted');\n  }\n  get name() {\n    return 'MongoCursorExhaustedError';\n  }\n}\nexports.MongoCursorExhaustedError = MongoCursorExhaustedError;\n/**\n * An error generated when an attempt is made to operate on a\n * dropped, or otherwise unavailable, database.\n *\n * @public\n * @category Error\n */\nclass MongoTopologyClosedError extends MongoAPIError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor() {\n    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Topology is closed';\n    super(message);\n  }\n  get name() {\n    return 'MongoTopologyClosedError';\n  }\n}\nexports.MongoTopologyClosedError = MongoTopologyClosedError;\n/**\n * An error generated when the MongoClient is closed and async\n * operations are interrupted.\n *\n * @public\n * @category Error\n */\nclass MongoClientClosedError extends MongoAPIError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor() {\n    super('Operation interrupted because client was closed');\n  }\n  get name() {\n    return 'MongoClientClosedError';\n  }\n}\nexports.MongoClientClosedError = MongoClientClosedError;\n/**\n * An error indicating an issue with the network, including TCP errors and timeouts.\n * @public\n * @category Error\n */\nclass MongoNetworkError extends MongoError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message, options) {\n    super(message, {\n      cause: options?.cause\n    });\n    this.beforeHandshake = !!options?.beforeHandshake;\n  }\n  get name() {\n    return 'MongoNetworkError';\n  }\n}\nexports.MongoNetworkError = MongoNetworkError;\n/**\n * An error indicating a network timeout occurred\n * @public\n * @category Error\n *\n * @privateRemarks\n * mongodb-client-encryption has a dependency on this error with an instanceof check\n */\nclass MongoNetworkTimeoutError extends MongoNetworkError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message, options) {\n    super(message, options);\n  }\n  get name() {\n    return 'MongoNetworkTimeoutError';\n  }\n}\nexports.MongoNetworkTimeoutError = MongoNetworkTimeoutError;\n/**\n * An error used when attempting to parse a value (like a connection string)\n * @public\n * @category Error\n */\nclass MongoParseError extends MongoDriverError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message) {\n    super(message);\n  }\n  get name() {\n    return 'MongoParseError';\n  }\n}\nexports.MongoParseError = MongoParseError;\n/**\n * An error generated when the user supplies malformed or unexpected arguments\n * or when a required argument or field is not provided.\n *\n *\n * @public\n * @category Error\n */\nclass MongoInvalidArgumentError extends MongoAPIError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message, options) {\n    super(message, options);\n  }\n  get name() {\n    return 'MongoInvalidArgumentError';\n  }\n}\nexports.MongoInvalidArgumentError = MongoInvalidArgumentError;\n/**\n * An error generated when a feature that is not enabled or allowed for the current server\n * configuration is used\n *\n *\n * @public\n * @category Error\n */\nclass MongoCompatibilityError extends MongoAPIError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message) {\n    super(message);\n  }\n  get name() {\n    return 'MongoCompatibilityError';\n  }\n}\nexports.MongoCompatibilityError = MongoCompatibilityError;\n/**\n * An error generated when the user fails to provide authentication credentials before attempting\n * to connect to a mongo server instance.\n *\n *\n * @public\n * @category Error\n */\nclass MongoMissingCredentialsError extends MongoAPIError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message) {\n    super(message);\n  }\n  get name() {\n    return 'MongoMissingCredentialsError';\n  }\n}\nexports.MongoMissingCredentialsError = MongoMissingCredentialsError;\n/**\n * An error generated when a required module or dependency is not present in the local environment\n *\n * @public\n * @category Error\n */\nclass MongoMissingDependencyError extends MongoAPIError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message, options) {\n    super(message, options);\n    this.dependencyName = options.dependencyName;\n  }\n  get name() {\n    return 'MongoMissingDependencyError';\n  }\n}\nexports.MongoMissingDependencyError = MongoMissingDependencyError;\n/**\n * An error signifying a general system issue\n * @public\n * @category Error\n */\nclass MongoSystemError extends MongoError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message, reason) {\n    if (reason && reason.error) {\n      super(MongoError.buildErrorMessage(reason.error.message || reason.error), {\n        cause: reason.error\n      });\n    } else {\n      super(message);\n    }\n    if (reason) {\n      this.reason = reason;\n    }\n    this.code = reason.error?.code;\n  }\n  get name() {\n    return 'MongoSystemError';\n  }\n}\nexports.MongoSystemError = MongoSystemError;\n/**\n * An error signifying a client-side server selection error\n * @public\n * @category Error\n */\nclass MongoServerSelectionError extends MongoSystemError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message, reason) {\n    super(message, reason);\n  }\n  get name() {\n    return 'MongoServerSelectionError';\n  }\n}\nexports.MongoServerSelectionError = MongoServerSelectionError;\n/**\n * An error thrown when the server reports a writeConcernError\n * @public\n * @category Error\n */\nclass MongoWriteConcernError extends MongoServerError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(result) {\n    super({\n      ...result.writeConcernError,\n      ...result\n    });\n    this.errInfo = result.writeConcernError.errInfo;\n    this.result = result;\n  }\n  get name() {\n    return 'MongoWriteConcernError';\n  }\n}\nexports.MongoWriteConcernError = MongoWriteConcernError;\n// https://github.com/mongodb/specifications/blob/master/source/retryable-reads/retryable-reads.md#retryable-error\nconst RETRYABLE_READ_ERROR_CODES = new Set([exports.MONGODB_ERROR_CODES.HostUnreachable, exports.MONGODB_ERROR_CODES.HostNotFound, exports.MONGODB_ERROR_CODES.NetworkTimeout, exports.MONGODB_ERROR_CODES.ShutdownInProgress, exports.MONGODB_ERROR_CODES.PrimarySteppedDown, exports.MONGODB_ERROR_CODES.SocketException, exports.MONGODB_ERROR_CODES.NotWritablePrimary, exports.MONGODB_ERROR_CODES.InterruptedAtShutdown, exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange, exports.MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk, exports.MONGODB_ERROR_CODES.NotPrimaryOrSecondary, exports.MONGODB_ERROR_CODES.ExceededTimeLimit, exports.MONGODB_ERROR_CODES.ReadConcernMajorityNotAvailableYet]);\n// see: https://github.com/mongodb/specifications/blob/master/source/retryable-writes/retryable-writes.md#terms\nconst RETRYABLE_WRITE_ERROR_CODES = RETRYABLE_READ_ERROR_CODES;\nfunction needsRetryableWriteLabel(error, maxWireVersion, serverType) {\n  // pre-4.4 server, then the driver adds an error label for every valid case\n  // execute operation will only inspect the label, code/message logic is handled here\n  if (error instanceof MongoNetworkError) {\n    return true;\n  }\n  if (error instanceof MongoError) {\n    if ((maxWireVersion >= 9 || isRetryableWriteError(error)) && !error.hasErrorLabel(exports.MongoErrorLabel.HandshakeError)) {\n      // If we already have the error label no need to add it again. 4.4+ servers add the label.\n      // In the case where we have a handshake error, need to fall down to the logic checking\n      // the codes.\n      return false;\n    }\n  }\n  if (error instanceof MongoWriteConcernError) {\n    if (serverType === 'Mongos' && maxWireVersion < 9) {\n      // use original top-level code from server response\n      return RETRYABLE_WRITE_ERROR_CODES.has(error.result.code ?? 0);\n    }\n    const code = error.result.writeConcernError.code ?? Number(error.code);\n    return RETRYABLE_WRITE_ERROR_CODES.has(Number.isNaN(code) ? 0 : code);\n  }\n  if (error instanceof MongoError) {\n    return RETRYABLE_WRITE_ERROR_CODES.has(Number(error.code));\n  }\n  const isNotWritablePrimaryError = exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(error.message);\n  if (isNotWritablePrimaryError) {\n    return true;\n  }\n  const isNodeIsRecoveringError = exports.NODE_IS_RECOVERING_ERROR_MESSAGE.test(error.message);\n  if (isNodeIsRecoveringError) {\n    return true;\n  }\n  return false;\n}\nfunction isRetryableWriteError(error) {\n  return error.hasErrorLabel(exports.MongoErrorLabel.RetryableWriteError) || error.hasErrorLabel(exports.MongoErrorLabel.PoolRequstedRetry);\n}\n/** Determines whether an error is something the driver should attempt to retry */\nfunction isRetryableReadError(error) {\n  const hasRetryableErrorCode = typeof error.code === 'number' ? RETRYABLE_READ_ERROR_CODES.has(error.code) : false;\n  if (hasRetryableErrorCode) {\n    return true;\n  }\n  if (error instanceof MongoNetworkError) {\n    return true;\n  }\n  const isNotWritablePrimaryError = exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(error.message);\n  if (isNotWritablePrimaryError) {\n    return true;\n  }\n  const isNodeIsRecoveringError = exports.NODE_IS_RECOVERING_ERROR_MESSAGE.test(error.message);\n  if (isNodeIsRecoveringError) {\n    return true;\n  }\n  return false;\n}\nconst SDAM_RECOVERING_CODES = new Set([exports.MONGODB_ERROR_CODES.ShutdownInProgress, exports.MONGODB_ERROR_CODES.PrimarySteppedDown, exports.MONGODB_ERROR_CODES.InterruptedAtShutdown, exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange, exports.MONGODB_ERROR_CODES.NotPrimaryOrSecondary]);\nconst SDAM_NOT_PRIMARY_CODES = new Set([exports.MONGODB_ERROR_CODES.NotWritablePrimary, exports.MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk, exports.MONGODB_ERROR_CODES.LegacyNotPrimary]);\nconst SDAM_NODE_SHUTTING_DOWN_ERROR_CODES = new Set([exports.MONGODB_ERROR_CODES.InterruptedAtShutdown, exports.MONGODB_ERROR_CODES.ShutdownInProgress]);\nfunction isRecoveringError(err) {\n  if (typeof err.code === 'number') {\n    // If any error code exists, we ignore the error.message\n    return SDAM_RECOVERING_CODES.has(err.code);\n  }\n  return exports.LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE.test(err.message) || exports.NODE_IS_RECOVERING_ERROR_MESSAGE.test(err.message);\n}\nfunction isNotWritablePrimaryError(err) {\n  if (typeof err.code === 'number') {\n    // If any error code exists, we ignore the error.message\n    return SDAM_NOT_PRIMARY_CODES.has(err.code);\n  }\n  if (isRecoveringError(err)) {\n    return false;\n  }\n  return exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(err.message);\n}\nfunction isNodeShuttingDownError(err) {\n  return !!(typeof err.code === 'number' && SDAM_NODE_SHUTTING_DOWN_ERROR_CODES.has(err.code));\n}\n/**\n * Determines whether SDAM can recover from a given error. If it cannot\n * then the pool will be cleared, and server state will completely reset\n * locally.\n *\n * @see https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.md#not-writable-primary-and-node-is-recovering\n */\nfunction isSDAMUnrecoverableError(error) {\n  // NOTE: null check is here for a strictly pre-CMAP world, a timeout or\n  //       close event are considered unrecoverable\n  if (error instanceof MongoParseError || error == null) {\n    return true;\n  }\n  return isRecoveringError(error) || isNotWritablePrimaryError(error);\n}\nfunction isNetworkTimeoutError(err) {\n  return !!(err instanceof MongoNetworkError && err.message.match(/timed out/));\n}\nfunction isResumableError(error, wireVersion) {\n  if (error == null || !(error instanceof MongoError)) {\n    return false;\n  }\n  if (error instanceof MongoNetworkError) {\n    return true;\n  }\n  if (wireVersion != null && wireVersion >= 9) {\n    // DRIVERS-1308: For 4.4 drivers running against 4.4 servers, drivers will add a special case to treat the CursorNotFound error code as resumable\n    if (error.code === exports.MONGODB_ERROR_CODES.CursorNotFound) {\n      return true;\n    }\n    return error.hasErrorLabel(exports.MongoErrorLabel.ResumableChangeStreamError);\n  }\n  if (typeof error.code === 'number') {\n    return exports.GET_MORE_RESUMABLE_CODES.has(error.code);\n  }\n  return false;\n}","map":{"version":3,"names":["exports","needsRetryableWriteLabel","isRetryableWriteError","isRetryableReadError","isNodeShuttingDownError","isSDAMUnrecoverableError","isNetworkTimeoutError","isResumableError","LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE","RegExp","LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE","NODE_IS_RECOVERING_ERROR_MESSAGE","MONGODB_ERROR_CODES","Object","freeze","HostUnreachable","HostNotFound","AuthenticationFailed","NetworkTimeout","ShutdownInProgress","PrimarySteppedDown","ExceededTimeLimit","SocketException","NotWritablePrimary","InterruptedAtShutdown","InterruptedDueToReplStateChange","NotPrimaryNoSecondaryOk","NotPrimaryOrSecondary","StaleShardVersion","StaleEpoch","StaleConfig","RetryChangeStream","FailedToSatisfyReadPreference","CursorNotFound","LegacyNotPrimary","WriteConcernTimeout","NamespaceNotFound","IllegalOperation","MaxTimeMSExpired","UnknownReplWriteConcern","UnsatisfiableWriteConcern","Reauthenticate","ReadConcernMajorityNotAvailableYet","GET_MORE_RESUMABLE_CODES","Set","MongoErrorLabel","RetryableWriteError","TransientTransactionError","UnknownTransactionCommitResult","ResumableChangeStreamError","HandshakeError","ResetPool","PoolRequstedRetry","InterruptInUseConnections","NoWritesPerformed","isAggregateError","e","Array","isArray","errors","MongoError","Error","errorLabels","from","errorLabelSet","constructor","message","options","buildErrorMessage","length","map","_ref","join","name","errmsg","hasErrorLabel","label","has","addErrorLabel","add","MongoServerError","$err","errorResponse","MongoDriverError","MongoAPIError","MongoRuntimeError","MongoStalePrimaryError","MongoBatchReExecutionError","arguments","undefined","MongoDecompressionError","MongoNotConnectedError","MongoTransactionError","MongoExpiredSessionError","MongoKerberosError","MongoAWSError","MongoOIDCError","MongoAzureError","MongoGCPError","MongoClientBulkWriteError","writeConcernErrors","writeErrors","Map","MongoClientBulkWriteCursorError","MongoClientBulkWriteExecutionError","MongoChangeStreamError","MongoTailableCursorError","MongoGridFSStreamError","MongoGridFSChunkError","MongoUnexpectedServerResponseError","MongoOperationTimeoutError","MongoCursorInUseError","MongoServerClosedError","MongoCursorExhaustedError","MongoTopologyClosedError","MongoClientClosedError","MongoNetworkError","cause","beforeHandshake","MongoNetworkTimeoutError","MongoParseError","MongoInvalidArgumentError","MongoCompatibilityError","MongoMissingCredentialsError","MongoMissingDependencyError","dependencyName","MongoSystemError","reason","error","code","MongoServerSelectionError","MongoWriteConcernError","result","writeConcernError","errInfo","RETRYABLE_READ_ERROR_CODES","RETRYABLE_WRITE_ERROR_CODES","maxWireVersion","serverType","Number","isNaN","isNotWritablePrimaryError","test","isNodeIsRecoveringError","hasRetryableErrorCode","SDAM_RECOVERING_CODES","SDAM_NOT_PRIMARY_CODES","SDAM_NODE_SHUTTING_DOWN_ERROR_CODES","isRecoveringError","err","match","wireVersion"],"sources":["C:\\Users\\asmee\\Documents\\Visa-Application\\node_modules\\mongodb\\src\\error.ts"],"sourcesContent":["import type { Document } from './bson';\nimport {\n  type ClientBulkWriteError,\n  type ClientBulkWriteResult\n} from './operations/client_bulk_write/common';\nimport type { ServerType } from './sdam/common';\nimport type { TopologyVersion } from './sdam/server_description';\nimport type { TopologyDescription } from './sdam/topology_description';\n\n/** @public */\nexport type AnyError = MongoError | Error;\n\n/**\n * @internal\n * The legacy error message from the server that indicates the node is not a writable primary\n * https://github.com/mongodb/specifications/blob/921232976f9913cf17415b5ef937ee772e45e6ae/source/server-discovery-and-monitoring/server-discovery-and-monitoring.md#not-writable-primary-and-node-is-recovering\n */\nexport const LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE = new RegExp('not master', 'i');\n\n/**\n * @internal\n * The legacy error message from the server that indicates the node is not a primary or secondary\n * https://github.com/mongodb/specifications/blob/921232976f9913cf17415b5ef937ee772e45e6ae/source/server-discovery-and-monitoring/server-discovery-and-monitoring.md#not-writable-primary-and-node-is-recovering\n */\nexport const LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE = new RegExp(\n  'not master or secondary',\n  'i'\n);\n\n/**\n * @internal\n * The error message from the server that indicates the node is recovering\n * https://github.com/mongodb/specifications/blob/921232976f9913cf17415b5ef937ee772e45e6ae/source/server-discovery-and-monitoring/server-discovery-and-monitoring.md#not-writable-primary-and-node-is-recovering\n */\nexport const NODE_IS_RECOVERING_ERROR_MESSAGE = new RegExp('node is recovering', 'i');\n\n/** @internal MongoDB Error Codes */\nexport const MONGODB_ERROR_CODES = Object.freeze({\n  HostUnreachable: 6,\n  HostNotFound: 7,\n  AuthenticationFailed: 18,\n  NetworkTimeout: 89,\n  ShutdownInProgress: 91,\n  PrimarySteppedDown: 189,\n  ExceededTimeLimit: 262,\n  SocketException: 9001,\n  NotWritablePrimary: 10107,\n  InterruptedAtShutdown: 11600,\n  InterruptedDueToReplStateChange: 11602,\n  NotPrimaryNoSecondaryOk: 13435,\n  NotPrimaryOrSecondary: 13436,\n  StaleShardVersion: 63,\n  StaleEpoch: 150,\n  StaleConfig: 13388,\n  RetryChangeStream: 234,\n  FailedToSatisfyReadPreference: 133,\n  CursorNotFound: 43,\n  LegacyNotPrimary: 10058,\n  // WriteConcernTimeout is WriteConcernFailed on pre-8.1 servers\n  WriteConcernTimeout: 64,\n  NamespaceNotFound: 26,\n  IllegalOperation: 20,\n  MaxTimeMSExpired: 50,\n  UnknownReplWriteConcern: 79,\n  UnsatisfiableWriteConcern: 100,\n  Reauthenticate: 391,\n  ReadConcernMajorityNotAvailableYet: 134\n} as const);\n\n// From spec https://github.com/mongodb/specifications/blob/921232976f9913cf17415b5ef937ee772e45e6ae/source/change-streams/change-streams.md#resumable-error\nexport const GET_MORE_RESUMABLE_CODES = new Set<number>([\n  MONGODB_ERROR_CODES.HostUnreachable,\n  MONGODB_ERROR_CODES.HostNotFound,\n  MONGODB_ERROR_CODES.NetworkTimeout,\n  MONGODB_ERROR_CODES.ShutdownInProgress,\n  MONGODB_ERROR_CODES.PrimarySteppedDown,\n  MONGODB_ERROR_CODES.ExceededTimeLimit,\n  MONGODB_ERROR_CODES.SocketException,\n  MONGODB_ERROR_CODES.NotWritablePrimary,\n  MONGODB_ERROR_CODES.InterruptedAtShutdown,\n  MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,\n  MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk,\n  MONGODB_ERROR_CODES.NotPrimaryOrSecondary,\n  MONGODB_ERROR_CODES.StaleShardVersion,\n  MONGODB_ERROR_CODES.StaleEpoch,\n  MONGODB_ERROR_CODES.StaleConfig,\n  MONGODB_ERROR_CODES.RetryChangeStream,\n  MONGODB_ERROR_CODES.FailedToSatisfyReadPreference,\n  MONGODB_ERROR_CODES.CursorNotFound\n]);\n\n/** @public */\nexport const MongoErrorLabel = Object.freeze({\n  RetryableWriteError: 'RetryableWriteError',\n  TransientTransactionError: 'TransientTransactionError',\n  UnknownTransactionCommitResult: 'UnknownTransactionCommitResult',\n  ResumableChangeStreamError: 'ResumableChangeStreamError',\n  HandshakeError: 'HandshakeError',\n  ResetPool: 'ResetPool',\n  PoolRequstedRetry: 'PoolRequstedRetry',\n  InterruptInUseConnections: 'InterruptInUseConnections',\n  NoWritesPerformed: 'NoWritesPerformed'\n} as const);\n\n/** @public */\nexport type MongoErrorLabel = (typeof MongoErrorLabel)[keyof typeof MongoErrorLabel];\n\n/** @public */\nexport interface ErrorDescription extends Document {\n  message?: string;\n  errmsg?: string;\n  $err?: string;\n  errorLabels?: string[];\n  errInfo?: Document;\n}\n\nfunction isAggregateError(e: unknown): e is Error & { errors: Error[] } {\n  return e != null && typeof e === 'object' && 'errors' in e && Array.isArray(e.errors);\n}\n\n/**\n * @public\n * @category Error\n *\n * @privateRemarks\n * mongodb-client-encryption has a dependency on this error, it uses the constructor with a string argument\n */\nexport class MongoError extends Error {\n  /** @internal */\n  private readonly errorLabelSet: Set<string> = new Set();\n  public get errorLabels(): string[] {\n    return Array.from(this.errorLabelSet);\n  }\n\n  /**\n   * This is a number in MongoServerError and a string in MongoDriverError\n   * @privateRemarks\n   * Define the type override on the subclasses when we can use the override keyword\n   */\n  code?: number | string;\n  topologyVersion?: TopologyVersion;\n  connectionGeneration?: number;\n  override cause?: Error;\n\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: string, options?: { cause?: Error }) {\n    super(message, options);\n  }\n\n  /** @internal */\n  static buildErrorMessage(e: unknown): string {\n    if (typeof e === 'string') {\n      return e;\n    }\n    if (isAggregateError(e) && e.message.length === 0) {\n      return e.errors.length === 0\n        ? 'AggregateError has an empty errors array. Please check the `cause` property for more information.'\n        : e.errors.map(({ message }) => message).join(', ');\n    }\n\n    return e != null && typeof e === 'object' && 'message' in e && typeof e.message === 'string'\n      ? e.message\n      : 'empty error message';\n  }\n\n  override get name(): string {\n    return 'MongoError';\n  }\n\n  /** Legacy name for server error responses */\n  get errmsg(): string {\n    return this.message;\n  }\n\n  /**\n   * Checks the error to see if it has an error label\n   *\n   * @param label - The error label to check for\n   * @returns returns true if the error has the provided error label\n   */\n  hasErrorLabel(label: string): boolean {\n    return this.errorLabelSet.has(label);\n  }\n\n  addErrorLabel(label: string): void {\n    this.errorLabelSet.add(label);\n  }\n}\n\n/**\n * An error coming from the mongo server\n *\n * @public\n * @category Error\n */\nexport class MongoServerError extends MongoError {\n  /** Raw error result document returned by server. */\n  errorResponse: ErrorDescription;\n  codeName?: string;\n  writeConcernError?: Document;\n  errInfo?: Document;\n  ok?: number;\n  [key: string]: any;\n\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: ErrorDescription) {\n    super(message.message || message.errmsg || message.$err || 'n/a');\n\n    if (message.errorLabels) {\n      for (const label of message.errorLabels) this.addErrorLabel(label);\n    }\n\n    this.errorResponse = message;\n\n    for (const name in message) {\n      if (\n        name !== 'errorLabels' &&\n        name !== 'errmsg' &&\n        name !== 'message' &&\n        name !== 'errorResponse'\n      ) {\n        this[name] = message[name];\n      }\n    }\n  }\n\n  override get name(): string {\n    return 'MongoServerError';\n  }\n}\n\n/**\n * An error generated by the driver\n *\n * @public\n * @category Error\n */\nexport class MongoDriverError extends MongoError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: string, options?: { cause?: Error }) {\n    super(message, options);\n  }\n\n  override get name(): string {\n    return 'MongoDriverError';\n  }\n}\n\n/**\n * An error generated when the driver API is used incorrectly\n *\n * @privateRemarks\n * Should **never** be directly instantiated\n *\n * @public\n * @category Error\n */\n\nexport class MongoAPIError extends MongoDriverError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: string, options?: { cause?: Error }) {\n    super(message, options);\n  }\n\n  override get name(): string {\n    return 'MongoAPIError';\n  }\n}\n\n/**\n * An error generated when the driver encounters unexpected input\n * or reaches an unexpected/invalid internal state.\n *\n * @privateRemarks\n * Should **never** be directly instantiated.\n *\n * @public\n * @category Error\n */\nexport class MongoRuntimeError extends MongoDriverError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: string, options?: { cause?: Error }) {\n    super(message, options);\n  }\n\n  override get name(): string {\n    return 'MongoRuntimeError';\n  }\n}\n\n/**\n * An error generated when a primary server is marked stale, never directly thrown\n *\n * @public\n * @category Error\n */\nexport class MongoStalePrimaryError extends MongoRuntimeError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: string, options?: { cause?: Error }) {\n    super(message, options);\n  }\n\n  override get name(): string {\n    return 'MongoStalePrimaryError';\n  }\n}\n\n/**\n * An error generated when a batch command is re-executed after one of the commands in the batch\n * has failed\n *\n * @public\n * @category Error\n */\nexport class MongoBatchReExecutionError extends MongoAPIError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message = 'This batch has already been executed, create new batch to execute') {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoBatchReExecutionError';\n  }\n}\n\n/**\n * An error generated when the driver fails to decompress\n * data received from the server.\n *\n * @public\n * @category Error\n */\nexport class MongoDecompressionError extends MongoRuntimeError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoDecompressionError';\n  }\n}\n\n/**\n * An error thrown when the user attempts to operate on a database or collection through a MongoClient\n * that has not yet successfully called the \"connect\" method\n *\n * @public\n * @category Error\n */\nexport class MongoNotConnectedError extends MongoAPIError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoNotConnectedError';\n  }\n}\n\n/**\n * An error generated when the user makes a mistake in the usage of transactions.\n * (e.g. attempting to commit a transaction with a readPreference other than primary)\n *\n * @public\n * @category Error\n */\nexport class MongoTransactionError extends MongoAPIError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoTransactionError';\n  }\n}\n\n/**\n * An error generated when the user attempts to operate\n * on a session that has expired or has been closed.\n *\n * @public\n * @category Error\n */\nexport class MongoExpiredSessionError extends MongoAPIError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message = 'Cannot use a session that has ended') {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoExpiredSessionError';\n  }\n}\n\n/**\n * A error generated when the user attempts to authenticate\n * via Kerberos, but fails to connect to the Kerberos client.\n *\n * @public\n * @category Error\n */\nexport class MongoKerberosError extends MongoRuntimeError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoKerberosError';\n  }\n}\n\n/**\n * A error generated when the user attempts to authenticate\n * via AWS, but fails\n *\n * @public\n * @category Error\n */\nexport class MongoAWSError extends MongoRuntimeError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: string, options?: { cause?: Error }) {\n    super(message, options);\n  }\n\n  override get name(): string {\n    return 'MongoAWSError';\n  }\n}\n\n/**\n * A error generated when the user attempts to authenticate\n * via OIDC callbacks, but fails.\n *\n * @public\n * @category Error\n */\nexport class MongoOIDCError extends MongoRuntimeError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoOIDCError';\n  }\n}\n\n/**\n * A error generated when the user attempts to authenticate\n * via Azure, but fails.\n *\n * @public\n * @category Error\n */\nexport class MongoAzureError extends MongoOIDCError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoAzureError';\n  }\n}\n\n/**\n * A error generated when the user attempts to authenticate\n * via GCP, but fails.\n *\n * @public\n * @category Error\n */\nexport class MongoGCPError extends MongoOIDCError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoGCPError';\n  }\n}\n\n/**\n * An error indicating that an error occurred when executing the bulk write.\n *\n * @public\n * @category Error\n */\nexport class MongoClientBulkWriteError extends MongoServerError {\n  /**\n   * Write concern errors that occurred while executing the bulk write. This list may have\n   * multiple items if more than one server command was required to execute the bulk write.\n   */\n  writeConcernErrors: Document[];\n  /**\n   * Errors that occurred during the execution of individual write operations. This map will\n   * contain at most one entry if the bulk write was ordered.\n   */\n  writeErrors: Map<number, ClientBulkWriteError>;\n  /**\n   * The results of any successful operations that were performed before the error was\n   * encountered.\n   */\n  partialResult?: ClientBulkWriteResult;\n\n  /**\n   * Initialize the client bulk write error.\n   * @param message - The error message.\n   */\n  constructor(message: ErrorDescription) {\n    super(message);\n    this.writeConcernErrors = [];\n    this.writeErrors = new Map();\n  }\n\n  override get name(): string {\n    return 'MongoClientBulkWriteError';\n  }\n}\n\n/**\n * An error indicating that an error occurred when processing bulk write results.\n *\n * @public\n * @category Error\n */\nexport class MongoClientBulkWriteCursorError extends MongoRuntimeError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoClientBulkWriteCursorError';\n  }\n}\n\n/**\n * An error indicating that an error occurred on the client when executing a client bulk write.\n *\n * @public\n * @category Error\n */\nexport class MongoClientBulkWriteExecutionError extends MongoRuntimeError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoClientBulkWriteExecutionError';\n  }\n}\n\n/**\n * An error generated when a ChangeStream operation fails to execute.\n *\n * @public\n * @category Error\n */\nexport class MongoChangeStreamError extends MongoRuntimeError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoChangeStreamError';\n  }\n}\n\n/**\n * An error thrown when the user calls a function or method not supported on a tailable cursor\n *\n * @public\n * @category Error\n */\nexport class MongoTailableCursorError extends MongoAPIError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message = 'Tailable cursor does not support this operation') {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoTailableCursorError';\n  }\n}\n\n/** An error generated when a GridFSStream operation fails to execute.\n *\n * @public\n * @category Error\n */\nexport class MongoGridFSStreamError extends MongoRuntimeError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoGridFSStreamError';\n  }\n}\n\n/**\n * An error generated when a malformed or invalid chunk is\n * encountered when reading from a GridFSStream.\n *\n * @public\n * @category Error\n */\nexport class MongoGridFSChunkError extends MongoRuntimeError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoGridFSChunkError';\n  }\n}\n\n/**\n * An error generated when a **parsable** unexpected response comes from the server.\n * This is generally an error where the driver in a state expecting a certain behavior to occur in\n * the next message from MongoDB but it receives something else.\n * This error **does not** represent an issue with wire message formatting.\n *\n * #### Example\n * When an operation fails, it is the driver's job to retry it. It must perform serverSelection\n * again to make sure that it attempts the operation against a server in a good state. If server\n * selection returns a server that does not support retryable operations, this error is used.\n * This scenario is unlikely as retryable support would also have been determined on the first attempt\n * but it is possible the state change could report a selectable server that does not support retries.\n *\n * @public\n * @category Error\n */\nexport class MongoUnexpectedServerResponseError extends MongoRuntimeError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: string, options?: { cause?: Error }) {\n    super(message, options);\n  }\n\n  override get name(): string {\n    return 'MongoUnexpectedServerResponseError';\n  }\n}\n\n/**\n * @public\n * @category Error\n *\n * The `MongoOperationTimeoutError` class represents an error that occurs when an operation could not be completed within the specified `timeoutMS`.\n * It is generated by the driver in support of the \"client side operation timeout\" feature so inherits from `MongoDriverError`.\n * When `timeoutMS` is enabled `MongoServerError`s relating to `MaxTimeExpired` errors will be converted to `MongoOperationTimeoutError`\n *\n * @example\n * ```ts\n * try {\n *   await blogs.insertOne(blogPost, { timeoutMS: 60_000 })\n * } catch (error) {\n *   if (error instanceof MongoOperationTimeoutError) {\n *     console.log(`Oh no! writer's block!`, error);\n *   }\n * }\n * ```\n */\nexport class MongoOperationTimeoutError extends MongoDriverError {\n  override get name(): string {\n    return 'MongoOperationTimeoutError';\n  }\n}\n\n/**\n * An error thrown when the user attempts to add options to a cursor that has already been\n * initialized\n *\n * @public\n * @category Error\n */\nexport class MongoCursorInUseError extends MongoAPIError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message = 'Cursor is already initialized') {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoCursorInUseError';\n  }\n}\n\n/**\n * An error generated when an attempt is made to operate\n * on a closed/closing server.\n *\n * @public\n * @category Error\n */\nexport class MongoServerClosedError extends MongoAPIError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message = 'Server is closed') {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoServerClosedError';\n  }\n}\n\n/**\n * An error thrown when an attempt is made to read from a cursor that has been exhausted\n *\n * @public\n * @category Error\n */\nexport class MongoCursorExhaustedError extends MongoAPIError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message?: string) {\n    super(message || 'Cursor is exhausted');\n  }\n\n  override get name(): string {\n    return 'MongoCursorExhaustedError';\n  }\n}\n\n/**\n * An error generated when an attempt is made to operate on a\n * dropped, or otherwise unavailable, database.\n *\n * @public\n * @category Error\n */\nexport class MongoTopologyClosedError extends MongoAPIError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message = 'Topology is closed') {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoTopologyClosedError';\n  }\n}\n\n/**\n * An error generated when the MongoClient is closed and async\n * operations are interrupted.\n *\n * @public\n * @category Error\n */\nexport class MongoClientClosedError extends MongoAPIError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor() {\n    super('Operation interrupted because client was closed');\n  }\n\n  override get name(): string {\n    return 'MongoClientClosedError';\n  }\n}\n\n/** @public */\nexport interface MongoNetworkErrorOptions {\n  /** Indicates the timeout happened before a connection handshake completed */\n  beforeHandshake?: boolean;\n  cause?: Error;\n}\n\n/**\n * An error indicating an issue with the network, including TCP errors and timeouts.\n * @public\n * @category Error\n */\nexport class MongoNetworkError extends MongoError {\n  /** @internal */\n  public readonly beforeHandshake: boolean;\n\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: string, options?: MongoNetworkErrorOptions) {\n    super(message, { cause: options?.cause });\n    this.beforeHandshake = !!options?.beforeHandshake;\n  }\n\n  override get name(): string {\n    return 'MongoNetworkError';\n  }\n}\n\n/**\n * An error indicating a network timeout occurred\n * @public\n * @category Error\n *\n * @privateRemarks\n * mongodb-client-encryption has a dependency on this error with an instanceof check\n */\nexport class MongoNetworkTimeoutError extends MongoNetworkError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: string, options?: MongoNetworkErrorOptions) {\n    super(message, options);\n  }\n\n  override get name(): string {\n    return 'MongoNetworkTimeoutError';\n  }\n}\n\n/**\n * An error used when attempting to parse a value (like a connection string)\n * @public\n * @category Error\n */\nexport class MongoParseError extends MongoDriverError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoParseError';\n  }\n}\n\n/**\n * An error generated when the user supplies malformed or unexpected arguments\n * or when a required argument or field is not provided.\n *\n *\n * @public\n * @category Error\n */\nexport class MongoInvalidArgumentError extends MongoAPIError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: string, options?: { cause?: Error }) {\n    super(message, options);\n  }\n\n  override get name(): string {\n    return 'MongoInvalidArgumentError';\n  }\n}\n\n/**\n * An error generated when a feature that is not enabled or allowed for the current server\n * configuration is used\n *\n *\n * @public\n * @category Error\n */\nexport class MongoCompatibilityError extends MongoAPIError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoCompatibilityError';\n  }\n}\n\n/**\n * An error generated when the user fails to provide authentication credentials before attempting\n * to connect to a mongo server instance.\n *\n *\n * @public\n * @category Error\n */\nexport class MongoMissingCredentialsError extends MongoAPIError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: string) {\n    super(message);\n  }\n\n  override get name(): string {\n    return 'MongoMissingCredentialsError';\n  }\n}\n\n/**\n * An error generated when a required module or dependency is not present in the local environment\n *\n * @public\n * @category Error\n */\nexport class MongoMissingDependencyError extends MongoAPIError {\n  dependencyName: string;\n\n  /** @remarks This property is assigned in the `Error` constructor. */\n  declare cause: Error;\n\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: string, options: { cause: Error; dependencyName: string }) {\n    super(message, options);\n    this.dependencyName = options.dependencyName;\n  }\n\n  override get name(): string {\n    return 'MongoMissingDependencyError';\n  }\n}\n/**\n * An error signifying a general system issue\n * @public\n * @category Error\n */\nexport class MongoSystemError extends MongoError {\n  /** An optional reason context, such as an error saved during flow of monitoring and selecting servers */\n  reason?: TopologyDescription;\n\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: string, reason: TopologyDescription) {\n    if (reason && reason.error) {\n      super(MongoError.buildErrorMessage(reason.error.message || reason.error), {\n        cause: reason.error\n      });\n    } else {\n      super(message);\n    }\n\n    if (reason) {\n      this.reason = reason;\n    }\n\n    this.code = reason.error?.code;\n  }\n\n  override get name(): string {\n    return 'MongoSystemError';\n  }\n}\n\n/**\n * An error signifying a client-side server selection error\n * @public\n * @category Error\n */\nexport class MongoServerSelectionError extends MongoSystemError {\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(message: string, reason: TopologyDescription) {\n    super(message, reason);\n  }\n\n  override get name(): string {\n    return 'MongoServerSelectionError';\n  }\n}\n\n/**\n * The type of the result property of MongoWriteConcernError\n * @public\n */\nexport interface WriteConcernErrorResult {\n  writeConcernError: {\n    code: number;\n    errmsg: string;\n    codeName?: string;\n    errInfo?: Document;\n  };\n  ok: number;\n  code?: number;\n  errorLabels?: string[];\n  [x: string | number]: unknown;\n}\n\n/**\n * An error thrown when the server reports a writeConcernError\n * @public\n * @category Error\n */\nexport class MongoWriteConcernError extends MongoServerError {\n  /** The result document */\n  result: Document;\n\n  /**\n   * **Do not use this constructor!**\n   *\n   * Meant for internal use only.\n   *\n   * @remarks\n   * This class is only meant to be constructed within the driver. This constructor is\n   * not subject to semantic versioning compatibility guarantees and may change at any time.\n   *\n   * @public\n   **/\n  constructor(result: WriteConcernErrorResult) {\n    super({ ...result.writeConcernError, ...result });\n    this.errInfo = result.writeConcernError.errInfo;\n    this.result = result;\n  }\n\n  override get name(): string {\n    return 'MongoWriteConcernError';\n  }\n}\n\n// https://github.com/mongodb/specifications/blob/master/source/retryable-reads/retryable-reads.md#retryable-error\nconst RETRYABLE_READ_ERROR_CODES = new Set<number>([\n  MONGODB_ERROR_CODES.HostUnreachable,\n  MONGODB_ERROR_CODES.HostNotFound,\n  MONGODB_ERROR_CODES.NetworkTimeout,\n  MONGODB_ERROR_CODES.ShutdownInProgress,\n  MONGODB_ERROR_CODES.PrimarySteppedDown,\n  MONGODB_ERROR_CODES.SocketException,\n  MONGODB_ERROR_CODES.NotWritablePrimary,\n  MONGODB_ERROR_CODES.InterruptedAtShutdown,\n  MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,\n  MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk,\n  MONGODB_ERROR_CODES.NotPrimaryOrSecondary,\n  MONGODB_ERROR_CODES.ExceededTimeLimit,\n  MONGODB_ERROR_CODES.ReadConcernMajorityNotAvailableYet\n]);\n\n// see: https://github.com/mongodb/specifications/blob/master/source/retryable-writes/retryable-writes.md#terms\nconst RETRYABLE_WRITE_ERROR_CODES = RETRYABLE_READ_ERROR_CODES;\n\nexport function needsRetryableWriteLabel(\n  error: Error,\n  maxWireVersion: number,\n  serverType: ServerType\n): boolean {\n  // pre-4.4 server, then the driver adds an error label for every valid case\n  // execute operation will only inspect the label, code/message logic is handled here\n  if (error instanceof MongoNetworkError) {\n    return true;\n  }\n\n  if (error instanceof MongoError) {\n    if (\n      (maxWireVersion >= 9 || isRetryableWriteError(error)) &&\n      !error.hasErrorLabel(MongoErrorLabel.HandshakeError)\n    ) {\n      // If we already have the error label no need to add it again. 4.4+ servers add the label.\n      // In the case where we have a handshake error, need to fall down to the logic checking\n      // the codes.\n      return false;\n    }\n  }\n\n  if (error instanceof MongoWriteConcernError) {\n    if (serverType === 'Mongos' && maxWireVersion < 9) {\n      // use original top-level code from server response\n      return RETRYABLE_WRITE_ERROR_CODES.has(error.result.code ?? 0);\n    }\n    const code = error.result.writeConcernError.code ?? Number(error.code);\n    return RETRYABLE_WRITE_ERROR_CODES.has(Number.isNaN(code) ? 0 : code);\n  }\n\n  if (error instanceof MongoError) {\n    return RETRYABLE_WRITE_ERROR_CODES.has(Number(error.code));\n  }\n\n  const isNotWritablePrimaryError = LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(error.message);\n  if (isNotWritablePrimaryError) {\n    return true;\n  }\n\n  const isNodeIsRecoveringError = NODE_IS_RECOVERING_ERROR_MESSAGE.test(error.message);\n  if (isNodeIsRecoveringError) {\n    return true;\n  }\n\n  return false;\n}\n\nexport function isRetryableWriteError(error: MongoError): boolean {\n  return (\n    error.hasErrorLabel(MongoErrorLabel.RetryableWriteError) ||\n    error.hasErrorLabel(MongoErrorLabel.PoolRequstedRetry)\n  );\n}\n\n/** Determines whether an error is something the driver should attempt to retry */\nexport function isRetryableReadError(error: MongoError): boolean {\n  const hasRetryableErrorCode =\n    typeof error.code === 'number' ? RETRYABLE_READ_ERROR_CODES.has(error.code) : false;\n  if (hasRetryableErrorCode) {\n    return true;\n  }\n\n  if (error instanceof MongoNetworkError) {\n    return true;\n  }\n\n  const isNotWritablePrimaryError = LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(error.message);\n  if (isNotWritablePrimaryError) {\n    return true;\n  }\n\n  const isNodeIsRecoveringError = NODE_IS_RECOVERING_ERROR_MESSAGE.test(error.message);\n  if (isNodeIsRecoveringError) {\n    return true;\n  }\n\n  return false;\n}\n\nconst SDAM_RECOVERING_CODES = new Set<number>([\n  MONGODB_ERROR_CODES.ShutdownInProgress,\n  MONGODB_ERROR_CODES.PrimarySteppedDown,\n  MONGODB_ERROR_CODES.InterruptedAtShutdown,\n  MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,\n  MONGODB_ERROR_CODES.NotPrimaryOrSecondary\n]);\n\nconst SDAM_NOT_PRIMARY_CODES = new Set<number>([\n  MONGODB_ERROR_CODES.NotWritablePrimary,\n  MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk,\n  MONGODB_ERROR_CODES.LegacyNotPrimary\n]);\n\nconst SDAM_NODE_SHUTTING_DOWN_ERROR_CODES = new Set<number>([\n  MONGODB_ERROR_CODES.InterruptedAtShutdown,\n  MONGODB_ERROR_CODES.ShutdownInProgress\n]);\n\nfunction isRecoveringError(err: MongoError) {\n  if (typeof err.code === 'number') {\n    // If any error code exists, we ignore the error.message\n    return SDAM_RECOVERING_CODES.has(err.code);\n  }\n\n  return (\n    LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE.test(err.message) ||\n    NODE_IS_RECOVERING_ERROR_MESSAGE.test(err.message)\n  );\n}\n\nfunction isNotWritablePrimaryError(err: MongoError) {\n  if (typeof err.code === 'number') {\n    // If any error code exists, we ignore the error.message\n    return SDAM_NOT_PRIMARY_CODES.has(err.code);\n  }\n\n  if (isRecoveringError(err)) {\n    return false;\n  }\n\n  return LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(err.message);\n}\n\nexport function isNodeShuttingDownError(err: MongoError): boolean {\n  return !!(typeof err.code === 'number' && SDAM_NODE_SHUTTING_DOWN_ERROR_CODES.has(err.code));\n}\n\n/**\n * Determines whether SDAM can recover from a given error. If it cannot\n * then the pool will be cleared, and server state will completely reset\n * locally.\n *\n * @see https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.md#not-writable-primary-and-node-is-recovering\n */\nexport function isSDAMUnrecoverableError(error: MongoError): boolean {\n  // NOTE: null check is here for a strictly pre-CMAP world, a timeout or\n  //       close event are considered unrecoverable\n  if (error instanceof MongoParseError || error == null) {\n    return true;\n  }\n\n  return isRecoveringError(error) || isNotWritablePrimaryError(error);\n}\n\nexport function isNetworkTimeoutError(err: MongoError): err is MongoNetworkError {\n  return !!(err instanceof MongoNetworkError && err.message.match(/timed out/));\n}\n\nexport function isResumableError(error?: Error, wireVersion?: number): boolean {\n  if (error == null || !(error instanceof MongoError)) {\n    return false;\n  }\n\n  if (error instanceof MongoNetworkError) {\n    return true;\n  }\n\n  if (wireVersion != null && wireVersion >= 9) {\n    // DRIVERS-1308: For 4.4 drivers running against 4.4 servers, drivers will add a special case to treat the CursorNotFound error code as resumable\n    if (error.code === MONGODB_ERROR_CODES.CursorNotFound) {\n      return true;\n    }\n    return error.hasErrorLabel(MongoErrorLabel.ResumableChangeStreamError);\n  }\n\n  if (typeof error.code === 'number') {\n    return GET_MORE_RESUMABLE_CODES.has(error.code);\n  }\n\n  return false;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}