{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DEFAULT_OPTIONS = exports.OPTIONS = void 0;\nexports.resolveSRVRecord = resolveSRVRecord;\nexports.parseOptions = parseOptions;\nconst dns = require(\"dns\");\nconst mongodb_connection_string_url_1 = require(\"mongodb-connection-string-url\");\nconst url_1 = require(\"url\");\nconst mongo_credentials_1 = require(\"./cmap/auth/mongo_credentials\");\nconst providers_1 = require(\"./cmap/auth/providers\");\nconst client_metadata_1 = require(\"./cmap/handshake/client_metadata\");\nconst compression_1 = require(\"./cmap/wire_protocol/compression\");\nconst encrypter_1 = require(\"./encrypter\");\nconst error_1 = require(\"./error\");\nconst mongo_client_1 = require(\"./mongo_client\");\nconst mongo_logger_1 = require(\"./mongo_logger\");\nconst read_concern_1 = require(\"./read_concern\");\nconst read_preference_1 = require(\"./read_preference\");\nconst monitor_1 = require(\"./sdam/monitor\");\nconst utils_1 = require(\"./utils\");\nconst write_concern_1 = require(\"./write_concern\");\nconst VALID_TXT_RECORDS = ['authSource', 'replicaSet', 'loadBalanced'];\nconst LB_SINGLE_HOST_ERROR = 'loadBalanced option only supported with a single host in the URI';\nconst LB_REPLICA_SET_ERROR = 'loadBalanced option not supported with a replicaSet option';\nconst LB_DIRECT_CONNECTION_ERROR = 'loadBalanced option not supported when directConnection is provided';\nfunction retryDNSTimeoutFor(api) {\n  return async function dnsReqRetryTimeout(lookupAddress) {\n    try {\n      return await dns.promises[api](lookupAddress);\n    } catch (firstDNSError) {\n      if (firstDNSError.code === dns.TIMEOUT) {\n        return await dns.promises[api](lookupAddress);\n      } else {\n        throw firstDNSError;\n      }\n    }\n  };\n}\nconst resolveSrv = retryDNSTimeoutFor('resolveSrv');\nconst resolveTxt = retryDNSTimeoutFor('resolveTxt');\n/**\n * Lookup a `mongodb+srv` connection string, combine the parts and reparse it as a normal\n * connection string.\n *\n * @param uri - The connection string to parse\n * @param options - Optional user provided connection string options\n */\nasync function resolveSRVRecord(options) {\n  if (typeof options.srvHost !== 'string') {\n    throw new error_1.MongoAPIError('Option \"srvHost\" must not be empty');\n  }\n  // Asynchronously start TXT resolution so that we do not have to wait until\n  // the SRV record is resolved before starting a second DNS query.\n  const lookupAddress = options.srvHost;\n  const txtResolutionPromise = resolveTxt(lookupAddress);\n  txtResolutionPromise.then(undefined, utils_1.squashError); // rejections will be handled later\n  const hostname = `_${options.srvServiceName}._tcp.${lookupAddress}`;\n  // Resolve the SRV record and use the result as the list of hosts to connect to.\n  const addresses = await resolveSrv(hostname);\n  if (addresses.length === 0) {\n    throw new error_1.MongoAPIError('No addresses found at host');\n  }\n  for (const {\n    name\n  } of addresses) {\n    (0, utils_1.checkParentDomainMatch)(name, lookupAddress);\n  }\n  const hostAddresses = addresses.map(r => utils_1.HostAddress.fromString(`${r.name}:${r.port ?? 27017}`));\n  validateLoadBalancedOptions(hostAddresses, options, true);\n  // Use the result of resolving the TXT record and add options from there if they exist.\n  let record;\n  try {\n    record = await txtResolutionPromise;\n  } catch (error) {\n    if (error.code !== 'ENODATA' && error.code !== 'ENOTFOUND') {\n      throw error;\n    }\n    return hostAddresses;\n  }\n  if (record.length > 1) {\n    throw new error_1.MongoParseError('Multiple text records not allowed');\n  }\n  const txtRecordOptions = new url_1.URLSearchParams(record[0].join(''));\n  const txtRecordOptionKeys = [...txtRecordOptions.keys()];\n  if (txtRecordOptionKeys.some(key => !VALID_TXT_RECORDS.includes(key))) {\n    throw new error_1.MongoParseError(`Text record may only set any of: ${VALID_TXT_RECORDS.join(', ')}`);\n  }\n  if (VALID_TXT_RECORDS.some(option => txtRecordOptions.get(option) === '')) {\n    throw new error_1.MongoParseError('Cannot have empty URI params in DNS TXT Record');\n  }\n  const source = txtRecordOptions.get('authSource') ?? undefined;\n  const replicaSet = txtRecordOptions.get('replicaSet') ?? undefined;\n  const loadBalanced = txtRecordOptions.get('loadBalanced') ?? undefined;\n  if (!options.userSpecifiedAuthSource && source && options.credentials && !providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(options.credentials.mechanism)) {\n    options.credentials = mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n      source\n    });\n  }\n  if (!options.userSpecifiedReplicaSet && replicaSet) {\n    options.replicaSet = replicaSet;\n  }\n  if (loadBalanced === 'true') {\n    options.loadBalanced = true;\n  }\n  if (options.replicaSet && options.srvMaxHosts > 0) {\n    throw new error_1.MongoParseError('Cannot combine replicaSet option with srvMaxHosts');\n  }\n  validateLoadBalancedOptions(hostAddresses, options, true);\n  return hostAddresses;\n}\n/**\n * Checks if TLS options are valid\n *\n * @param allOptions - All options provided by user or included in default options map\n * @throws MongoAPIError if TLS options are invalid\n */\nfunction checkTLSOptions(allOptions) {\n  if (!allOptions) return;\n  const check = (a, b) => {\n    if (allOptions.has(a) && allOptions.has(b)) {\n      throw new error_1.MongoAPIError(`The '${a}' option cannot be used with the '${b}' option`);\n    }\n  };\n  check('tlsInsecure', 'tlsAllowInvalidCertificates');\n  check('tlsInsecure', 'tlsAllowInvalidHostnames');\n  check('tlsInsecure', 'tlsDisableCertificateRevocationCheck');\n  check('tlsInsecure', 'tlsDisableOCSPEndpointCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableCertificateRevocationCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableOCSPEndpointCheck');\n  check('tlsDisableCertificateRevocationCheck', 'tlsDisableOCSPEndpointCheck');\n}\nfunction getBoolean(name, value) {\n  if (typeof value === 'boolean') return value;\n  switch (value) {\n    case 'true':\n      return true;\n    case 'false':\n      return false;\n    default:\n      throw new error_1.MongoParseError(`${name} must be either \"true\" or \"false\"`);\n  }\n}\nfunction getIntFromOptions(name, value) {\n  const parsedInt = (0, utils_1.parseInteger)(value);\n  if (parsedInt != null) {\n    return parsedInt;\n  }\n  throw new error_1.MongoParseError(`Expected ${name} to be stringified int value, got: ${value}`);\n}\nfunction getUIntFromOptions(name, value) {\n  const parsedValue = getIntFromOptions(name, value);\n  if (parsedValue < 0) {\n    throw new error_1.MongoParseError(`${name} can only be a positive int value, got: ${value}`);\n  }\n  return parsedValue;\n}\nfunction* entriesFromString(value) {\n  if (value === '') {\n    return;\n  }\n  const keyValuePairs = value.split(',');\n  for (const keyValue of keyValuePairs) {\n    const [key, value] = keyValue.split(/:(.*)/);\n    if (value == null) {\n      throw new error_1.MongoParseError('Cannot have undefined values in key value pairs');\n    }\n    yield [key, value];\n  }\n}\nclass CaseInsensitiveMap extends Map {\n  constructor() {\n    let entries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    super(entries.map(_ref => {\n      let [k, v] = _ref;\n      return [k.toLowerCase(), v];\n    }));\n  }\n  has(k) {\n    return super.has(k.toLowerCase());\n  }\n  get(k) {\n    return super.get(k.toLowerCase());\n  }\n  set(k, v) {\n    return super.set(k.toLowerCase(), v);\n  }\n  delete(k) {\n    return super.delete(k.toLowerCase());\n  }\n}\nfunction parseOptions(uri) {\n  let mongoClient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (mongoClient != null && !(mongoClient instanceof mongo_client_1.MongoClient)) {\n    options = mongoClient;\n    mongoClient = undefined;\n  }\n  // validate BSONOptions\n  if (options.useBigInt64 && typeof options.promoteLongs === 'boolean' && !options.promoteLongs) {\n    throw new error_1.MongoAPIError('Must request either bigint or Long for int64 deserialization');\n  }\n  if (options.useBigInt64 && typeof options.promoteValues === 'boolean' && !options.promoteValues) {\n    throw new error_1.MongoAPIError('Must request either bigint or Long for int64 deserialization');\n  }\n  const url = new mongodb_connection_string_url_1.default(uri);\n  const {\n    hosts,\n    isSRV\n  } = url;\n  const mongoOptions = Object.create(null);\n  mongoOptions.hosts = isSRV ? [] : hosts.map(utils_1.HostAddress.fromString);\n  const urlOptions = new CaseInsensitiveMap();\n  if (url.pathname !== '/' && url.pathname !== '') {\n    const dbName = decodeURIComponent(url.pathname[0] === '/' ? url.pathname.slice(1) : url.pathname);\n    if (dbName) {\n      urlOptions.set('dbName', [dbName]);\n    }\n  }\n  if (url.username !== '') {\n    const auth = {\n      username: decodeURIComponent(url.username)\n    };\n    if (typeof url.password === 'string') {\n      auth.password = decodeURIComponent(url.password);\n    }\n    urlOptions.set('auth', [auth]);\n  }\n  for (const key of url.searchParams.keys()) {\n    const values = url.searchParams.getAll(key);\n    const isReadPreferenceTags = /readPreferenceTags/i.test(key);\n    if (!isReadPreferenceTags && values.length > 1) {\n      throw new error_1.MongoInvalidArgumentError(`URI option \"${key}\" cannot appear more than once in the connection string`);\n    }\n    if (!isReadPreferenceTags && values.includes('')) {\n      throw new error_1.MongoAPIError(`URI option \"${key}\" cannot be specified with no value`);\n    }\n    if (!urlOptions.has(key)) {\n      urlOptions.set(key, values);\n    }\n  }\n  const objectOptions = new CaseInsensitiveMap(Object.entries(options).filter(_ref2 => {\n    let [, v] = _ref2;\n    return v != null;\n  }));\n  // Validate options that can only be provided by one of uri or object\n  if (urlOptions.has('serverApi')) {\n    throw new error_1.MongoParseError('URI cannot contain `serverApi`, it can only be passed to the client');\n  }\n  const uriMechanismProperties = urlOptions.get('authMechanismProperties');\n  if (uriMechanismProperties) {\n    for (const property of uriMechanismProperties) {\n      if (/(^|,)ALLOWED_HOSTS:/.test(property)) {\n        throw new error_1.MongoParseError('Auth mechanism property ALLOWED_HOSTS is not allowed in the connection string.');\n      }\n    }\n  }\n  if (objectOptions.has('loadBalanced')) {\n    throw new error_1.MongoParseError('loadBalanced is only a valid option in the URI');\n  }\n  // All option collection\n  const allProvidedOptions = new CaseInsensitiveMap();\n  const allProvidedKeys = new Set([...urlOptions.keys(), ...objectOptions.keys()]);\n  for (const key of allProvidedKeys) {\n    const values = [];\n    const objectOptionValue = objectOptions.get(key);\n    if (objectOptionValue != null) {\n      values.push(objectOptionValue);\n    }\n    const urlValues = urlOptions.get(key) ?? [];\n    values.push(...urlValues);\n    allProvidedOptions.set(key, values);\n  }\n  if (allProvidedOptions.has('tls') || allProvidedOptions.has('ssl')) {\n    const tlsAndSslOpts = (allProvidedOptions.get('tls') || []).concat(allProvidedOptions.get('ssl') || []).map(getBoolean.bind(null, 'tls/ssl'));\n    if (new Set(tlsAndSslOpts).size !== 1) {\n      throw new error_1.MongoParseError('All values of tls/ssl must be the same.');\n    }\n  }\n  checkTLSOptions(allProvidedOptions);\n  const unsupportedOptions = (0, utils_1.setDifference)(allProvidedKeys, Array.from(Object.keys(exports.OPTIONS)).map(s => s.toLowerCase()));\n  if (unsupportedOptions.size !== 0) {\n    const optionWord = unsupportedOptions.size > 1 ? 'options' : 'option';\n    const isOrAre = unsupportedOptions.size > 1 ? 'are' : 'is';\n    throw new error_1.MongoParseError(`${optionWord} ${Array.from(unsupportedOptions).join(', ')} ${isOrAre} not supported`);\n  }\n  // Option parsing and setting\n  for (const [key, descriptor] of Object.entries(exports.OPTIONS)) {\n    const values = allProvidedOptions.get(key);\n    if (!values || values.length === 0) {\n      if (exports.DEFAULT_OPTIONS.has(key)) {\n        setOption(mongoOptions, key, descriptor, [exports.DEFAULT_OPTIONS.get(key)]);\n      }\n    } else {\n      const {\n        deprecated\n      } = descriptor;\n      if (deprecated) {\n        const deprecatedMsg = typeof deprecated === 'string' ? `: ${deprecated}` : '';\n        (0, utils_1.emitWarning)(`${key} is a deprecated option${deprecatedMsg}`);\n      }\n      setOption(mongoOptions, key, descriptor, values);\n    }\n  }\n  if (mongoOptions.credentials) {\n    const isGssapi = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_GSSAPI;\n    const isX509 = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_X509;\n    const isAws = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_AWS;\n    const isOidc = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_OIDC;\n    if ((isGssapi || isX509) && allProvidedOptions.has('authSource') && mongoOptions.credentials.source !== '$external') {\n      // If authSource was explicitly given and its incorrect, we error\n      throw new error_1.MongoParseError(`authMechanism ${mongoOptions.credentials.mechanism} requires an authSource of '$external'`);\n    }\n    if (!(isGssapi || isX509 || isAws || isOidc) && mongoOptions.dbName && !allProvidedOptions.has('authSource')) {\n      // inherit the dbName unless GSSAPI or X509, then silently ignore dbName\n      // and there was no specific authSource given\n      mongoOptions.credentials = mongo_credentials_1.MongoCredentials.merge(mongoOptions.credentials, {\n        source: mongoOptions.dbName\n      });\n    }\n    if (isAws && mongoOptions.credentials.username && !mongoOptions.credentials.password) {\n      throw new error_1.MongoMissingCredentialsError(`When using ${mongoOptions.credentials.mechanism} password must be set when a username is specified`);\n    }\n    mongoOptions.credentials.validate();\n    // Check if the only auth related option provided was authSource, if so we can remove credentials\n    if (mongoOptions.credentials.password === '' && mongoOptions.credentials.username === '' && mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_DEFAULT && Object.keys(mongoOptions.credentials.mechanismProperties).length === 0) {\n      delete mongoOptions.credentials;\n    }\n  }\n  if (!mongoOptions.dbName) {\n    // dbName default is applied here because of the credential validation above\n    mongoOptions.dbName = 'test';\n  }\n  validateLoadBalancedOptions(hosts, mongoOptions, isSRV);\n  if (mongoClient && mongoOptions.autoEncryption) {\n    encrypter_1.Encrypter.checkForMongoCrypt();\n    mongoOptions.encrypter = new encrypter_1.Encrypter(mongoClient, uri, options);\n    mongoOptions.autoEncrypter = mongoOptions.encrypter.autoEncrypter;\n  }\n  // Potential SRV Overrides and SRV connection string validations\n  mongoOptions.userSpecifiedAuthSource = objectOptions.has('authSource') || urlOptions.has('authSource');\n  mongoOptions.userSpecifiedReplicaSet = objectOptions.has('replicaSet') || urlOptions.has('replicaSet');\n  if (isSRV) {\n    // SRV Record is resolved upon connecting\n    mongoOptions.srvHost = hosts[0];\n    if (mongoOptions.directConnection) {\n      throw new error_1.MongoAPIError('SRV URI does not support directConnection');\n    }\n    if (mongoOptions.srvMaxHosts > 0 && typeof mongoOptions.replicaSet === 'string') {\n      throw new error_1.MongoParseError('Cannot use srvMaxHosts option with replicaSet');\n    }\n    // SRV turns on TLS by default, but users can override and turn it off\n    const noUserSpecifiedTLS = !objectOptions.has('tls') && !urlOptions.has('tls');\n    const noUserSpecifiedSSL = !objectOptions.has('ssl') && !urlOptions.has('ssl');\n    if (noUserSpecifiedTLS && noUserSpecifiedSSL) {\n      mongoOptions.tls = true;\n    }\n  } else {\n    const userSpecifiedSrvOptions = urlOptions.has('srvMaxHosts') || objectOptions.has('srvMaxHosts') || urlOptions.has('srvServiceName') || objectOptions.has('srvServiceName');\n    if (userSpecifiedSrvOptions) {\n      throw new error_1.MongoParseError('Cannot use srvMaxHosts or srvServiceName with a non-srv connection string');\n    }\n  }\n  if (mongoOptions.directConnection && mongoOptions.hosts.length !== 1) {\n    throw new error_1.MongoParseError('directConnection option requires exactly one host');\n  }\n  if (!mongoOptions.proxyHost && (mongoOptions.proxyPort || mongoOptions.proxyUsername || mongoOptions.proxyPassword)) {\n    throw new error_1.MongoParseError('Must specify proxyHost if other proxy options are passed');\n  }\n  if (mongoOptions.proxyUsername && !mongoOptions.proxyPassword || !mongoOptions.proxyUsername && mongoOptions.proxyPassword) {\n    throw new error_1.MongoParseError('Can only specify both of proxy username/password or neither');\n  }\n  const proxyOptions = ['proxyHost', 'proxyPort', 'proxyUsername', 'proxyPassword'].map(key => urlOptions.get(key) ?? []);\n  if (proxyOptions.some(options => options.length > 1)) {\n    throw new error_1.MongoParseError('Proxy options cannot be specified multiple times in the connection string');\n  }\n  mongoOptions.mongoLoggerOptions = mongo_logger_1.MongoLogger.resolveOptions({\n    MONGODB_LOG_COMMAND: process.env.MONGODB_LOG_COMMAND,\n    MONGODB_LOG_TOPOLOGY: process.env.MONGODB_LOG_TOPOLOGY,\n    MONGODB_LOG_SERVER_SELECTION: process.env.MONGODB_LOG_SERVER_SELECTION,\n    MONGODB_LOG_CONNECTION: process.env.MONGODB_LOG_CONNECTION,\n    MONGODB_LOG_CLIENT: process.env.MONGODB_LOG_CLIENT,\n    MONGODB_LOG_ALL: process.env.MONGODB_LOG_ALL,\n    MONGODB_LOG_MAX_DOCUMENT_LENGTH: process.env.MONGODB_LOG_MAX_DOCUMENT_LENGTH,\n    MONGODB_LOG_PATH: process.env.MONGODB_LOG_PATH\n  }, {\n    mongodbLogPath: mongoOptions.mongodbLogPath,\n    mongodbLogComponentSeverities: mongoOptions.mongodbLogComponentSeverities,\n    mongodbLogMaxDocumentLength: mongoOptions.mongodbLogMaxDocumentLength\n  });\n  mongoOptions.metadata = (0, client_metadata_1.makeClientMetadata)(mongoOptions);\n  mongoOptions.extendedMetadata = (0, client_metadata_1.addContainerMetadata)(mongoOptions.metadata).then(undefined, utils_1.squashError); // rejections will be handled later\n  return mongoOptions;\n}\n/**\n * #### Throws if LB mode is true:\n * - hosts contains more than one host\n * - there is a replicaSet name set\n * - directConnection is set\n * - if srvMaxHosts is used when an srv connection string is passed in\n *\n * @throws MongoParseError\n */\nfunction validateLoadBalancedOptions(hosts, mongoOptions, isSrv) {\n  if (mongoOptions.loadBalanced) {\n    if (hosts.length > 1) {\n      throw new error_1.MongoParseError(LB_SINGLE_HOST_ERROR);\n    }\n    if (mongoOptions.replicaSet) {\n      throw new error_1.MongoParseError(LB_REPLICA_SET_ERROR);\n    }\n    if (mongoOptions.directConnection) {\n      throw new error_1.MongoParseError(LB_DIRECT_CONNECTION_ERROR);\n    }\n    if (isSrv && mongoOptions.srvMaxHosts > 0) {\n      throw new error_1.MongoParseError('Cannot limit srv hosts with loadBalanced enabled');\n    }\n  }\n  return;\n}\nfunction setOption(mongoOptions, key, descriptor, values) {\n  const {\n    target,\n    type,\n    transform\n  } = descriptor;\n  const name = target ?? key;\n  switch (type) {\n    case 'boolean':\n      mongoOptions[name] = getBoolean(name, values[0]);\n      break;\n    case 'int':\n      mongoOptions[name] = getIntFromOptions(name, values[0]);\n      break;\n    case 'uint':\n      mongoOptions[name] = getUIntFromOptions(name, values[0]);\n      break;\n    case 'string':\n      if (values[0] == null) {\n        break;\n      }\n      // eslint-disable-next-line @typescript-eslint/no-base-to-string\n      mongoOptions[name] = String(values[0]);\n      break;\n    case 'record':\n      if (!(0, utils_1.isRecord)(values[0])) {\n        throw new error_1.MongoParseError(`${name} must be an object`);\n      }\n      mongoOptions[name] = values[0];\n      break;\n    case 'any':\n      mongoOptions[name] = values[0];\n      break;\n    default:\n      {\n        if (!transform) {\n          throw new error_1.MongoParseError('Descriptors missing a type must define a transform');\n        }\n        const transformValue = transform({\n          name,\n          options: mongoOptions,\n          values\n        });\n        mongoOptions[name] = transformValue;\n        break;\n      }\n  }\n}\nexports.OPTIONS = {\n  appName: {\n    type: 'string'\n  },\n  auth: {\n    target: 'credentials',\n    transform(_ref3) {\n      let {\n        name,\n        options,\n        values: [value]\n      } = _ref3;\n      if (!(0, utils_1.isRecord)(value, ['username', 'password'])) {\n        throw new error_1.MongoParseError(`${name} must be an object with 'username' and 'password' properties`);\n      }\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        username: value.username,\n        password: value.password\n      });\n    }\n  },\n  authMechanism: {\n    target: 'credentials',\n    transform(_ref4) {\n      let {\n        options,\n        values: [value]\n      } = _ref4;\n      const mechanisms = Object.values(providers_1.AuthMechanism);\n      const [mechanism] = mechanisms.filter(m => m.match(RegExp(String.raw`\\b${value}\\b`, 'i')));\n      if (!mechanism) {\n        throw new error_1.MongoParseError(`authMechanism one of ${mechanisms}, got ${value}`);\n      }\n      let source = options.credentials?.source;\n      if (mechanism === providers_1.AuthMechanism.MONGODB_PLAIN || providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(mechanism)) {\n        // some mechanisms have '$external' as the Auth Source\n        source = '$external';\n      }\n      let password = options.credentials?.password;\n      if (mechanism === providers_1.AuthMechanism.MONGODB_X509 && password === '') {\n        password = undefined;\n      }\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        mechanism,\n        source,\n        password\n      });\n    }\n  },\n  // Note that if the authMechanismProperties contain a TOKEN_RESOURCE that has a\n  // comma in it, it MUST be supplied as a MongoClient option instead of in the\n  // connection string.\n  authMechanismProperties: {\n    target: 'credentials',\n    transform(_ref5) {\n      let {\n        options,\n        values\n      } = _ref5;\n      // We can have a combination of options passed in the URI and options passed\n      // as an object to the MongoClient. So we must transform the string options\n      // as well as merge them together with a potentially provided object.\n      let mechanismProperties = Object.create(null);\n      for (const optionValue of values) {\n        if (typeof optionValue === 'string') {\n          for (const [key, value] of entriesFromString(optionValue)) {\n            try {\n              mechanismProperties[key] = getBoolean(key, value);\n            } catch {\n              mechanismProperties[key] = value;\n            }\n          }\n        } else {\n          if (!(0, utils_1.isRecord)(optionValue)) {\n            throw new error_1.MongoParseError('AuthMechanismProperties must be an object');\n          }\n          mechanismProperties = {\n            ...optionValue\n          };\n        }\n      }\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        mechanismProperties\n      });\n    }\n  },\n  authSource: {\n    target: 'credentials',\n    transform(_ref6) {\n      let {\n        options,\n        values: [value]\n      } = _ref6;\n      const source = String(value);\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        source\n      });\n    }\n  },\n  autoEncryption: {\n    type: 'record'\n  },\n  autoSelectFamily: {\n    type: 'boolean',\n    default: true\n  },\n  autoSelectFamilyAttemptTimeout: {\n    type: 'uint'\n  },\n  bsonRegExp: {\n    type: 'boolean'\n  },\n  serverApi: {\n    target: 'serverApi',\n    transform(_ref7) {\n      let {\n        values: [version]\n      } = _ref7;\n      const serverApiToValidate = typeof version === 'string' ? {\n        version\n      } : version;\n      const versionToValidate = serverApiToValidate && serverApiToValidate.version;\n      if (!versionToValidate) {\n        throw new error_1.MongoParseError(`Invalid \\`serverApi\\` property; must specify a version from the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n      }\n      if (!Object.values(mongo_client_1.ServerApiVersion).some(v => v === versionToValidate)) {\n        throw new error_1.MongoParseError(`Invalid server API version=${versionToValidate}; must be in the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n      }\n      return serverApiToValidate;\n    }\n  },\n  checkKeys: {\n    type: 'boolean'\n  },\n  compressors: {\n    default: 'none',\n    target: 'compressors',\n    transform(_ref8) {\n      let {\n        values\n      } = _ref8;\n      const compressionList = new Set();\n      for (const compVal of values) {\n        const compValArray = typeof compVal === 'string' ? compVal.split(',') : compVal;\n        if (!Array.isArray(compValArray)) {\n          throw new error_1.MongoInvalidArgumentError('compressors must be an array or a comma-delimited list of strings');\n        }\n        for (const c of compValArray) {\n          if (Object.keys(compression_1.Compressor).includes(String(c))) {\n            compressionList.add(String(c));\n          } else {\n            throw new error_1.MongoInvalidArgumentError(`${c} is not a valid compression mechanism. Must be one of: ${Object.keys(compression_1.Compressor)}.`);\n          }\n        }\n      }\n      return [...compressionList];\n    }\n  },\n  connectTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  dbName: {\n    type: 'string'\n  },\n  directConnection: {\n    default: false,\n    type: 'boolean'\n  },\n  driverInfo: {\n    default: {},\n    type: 'record'\n  },\n  enableUtf8Validation: {\n    type: 'boolean',\n    default: true\n  },\n  family: {\n    transform(_ref9) {\n      let {\n        name,\n        values: [value]\n      } = _ref9;\n      const transformValue = getIntFromOptions(name, value);\n      if (transformValue === 4 || transformValue === 6) {\n        return transformValue;\n      }\n      throw new error_1.MongoParseError(`Option 'family' must be 4 or 6 got ${transformValue}.`);\n    }\n  },\n  fieldsAsRaw: {\n    type: 'record'\n  },\n  forceServerObjectId: {\n    default: false,\n    type: 'boolean'\n  },\n  fsync: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n    transform(_ref10) {\n      let {\n        name,\n        options,\n        values: [value]\n      } = _ref10;\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          fsync: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new error_1.MongoParseError(`Unable to make a writeConcern from fsync=${value}`);\n      return wc;\n    }\n  },\n  heartbeatFrequencyMS: {\n    default: 10000,\n    type: 'uint'\n  },\n  ignoreUndefined: {\n    type: 'boolean'\n  },\n  j: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n    transform(_ref11) {\n      let {\n        name,\n        options,\n        values: [value]\n      } = _ref11;\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          journal: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n      return wc;\n    }\n  },\n  journal: {\n    target: 'writeConcern',\n    transform(_ref12) {\n      let {\n        name,\n        options,\n        values: [value]\n      } = _ref12;\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          journal: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n      return wc;\n    }\n  },\n  loadBalanced: {\n    default: false,\n    type: 'boolean'\n  },\n  localThresholdMS: {\n    default: 15,\n    type: 'uint'\n  },\n  maxConnecting: {\n    default: 2,\n    transform(_ref13) {\n      let {\n        name,\n        values: [value]\n      } = _ref13;\n      const maxConnecting = getUIntFromOptions(name, value);\n      if (maxConnecting === 0) {\n        throw new error_1.MongoInvalidArgumentError('maxConnecting must be > 0 if specified');\n      }\n      return maxConnecting;\n    }\n  },\n  maxIdleTimeMS: {\n    default: 0,\n    type: 'uint'\n  },\n  maxPoolSize: {\n    default: 100,\n    type: 'uint'\n  },\n  maxStalenessSeconds: {\n    target: 'readPreference',\n    transform(_ref14) {\n      let {\n        name,\n        options,\n        values: [value]\n      } = _ref14;\n      const maxStalenessSeconds = getUIntFromOptions(name, value);\n      if (options.readPreference) {\n        return read_preference_1.ReadPreference.fromOptions({\n          readPreference: {\n            ...options.readPreference,\n            maxStalenessSeconds\n          }\n        });\n      } else {\n        return new read_preference_1.ReadPreference('secondary', undefined, {\n          maxStalenessSeconds\n        });\n      }\n    }\n  },\n  minInternalBufferSize: {\n    type: 'uint'\n  },\n  minPoolSize: {\n    default: 0,\n    type: 'uint'\n  },\n  minHeartbeatFrequencyMS: {\n    default: 500,\n    type: 'uint'\n  },\n  monitorCommands: {\n    default: false,\n    type: 'boolean'\n  },\n  name: {\n    target: 'driverInfo',\n    transform(_ref15) {\n      let {\n        values: [value],\n        options\n      } = _ref15;\n      return {\n        ...options.driverInfo,\n        name: String(value)\n      };\n    }\n  },\n  noDelay: {\n    default: true,\n    type: 'boolean'\n  },\n  pkFactory: {\n    default: utils_1.DEFAULT_PK_FACTORY,\n    transform(_ref16) {\n      let {\n        values: [value]\n      } = _ref16;\n      if ((0, utils_1.isRecord)(value, ['createPk']) && typeof value.createPk === 'function') {\n        return value;\n      }\n      throw new error_1.MongoParseError(`Option pkFactory must be an object with a createPk function, got ${value}`);\n    }\n  },\n  promoteBuffers: {\n    type: 'boolean'\n  },\n  promoteLongs: {\n    type: 'boolean'\n  },\n  promoteValues: {\n    type: 'boolean'\n  },\n  useBigInt64: {\n    type: 'boolean'\n  },\n  proxyHost: {\n    type: 'string'\n  },\n  proxyPassword: {\n    type: 'string'\n  },\n  proxyPort: {\n    type: 'uint'\n  },\n  proxyUsername: {\n    type: 'string'\n  },\n  raw: {\n    default: false,\n    type: 'boolean'\n  },\n  readConcern: {\n    transform(_ref17) {\n      let {\n        values: [value],\n        options\n      } = _ref17;\n      if (value instanceof read_concern_1.ReadConcern || (0, utils_1.isRecord)(value, ['level'])) {\n        return read_concern_1.ReadConcern.fromOptions({\n          ...options.readConcern,\n          ...value\n        });\n      }\n      throw new error_1.MongoParseError(`ReadConcern must be an object, got ${JSON.stringify(value)}`);\n    }\n  },\n  readConcernLevel: {\n    target: 'readConcern',\n    transform(_ref18) {\n      let {\n        values: [level],\n        options\n      } = _ref18;\n      return read_concern_1.ReadConcern.fromOptions({\n        ...options.readConcern,\n        level: level\n      });\n    }\n  },\n  readPreference: {\n    default: read_preference_1.ReadPreference.primary,\n    transform(_ref19) {\n      let {\n        values: [value],\n        options\n      } = _ref19;\n      if (value instanceof read_preference_1.ReadPreference) {\n        return read_preference_1.ReadPreference.fromOptions({\n          readPreference: {\n            ...options.readPreference,\n            ...value\n          },\n          ...value\n        });\n      }\n      if ((0, utils_1.isRecord)(value, ['mode'])) {\n        const rp = read_preference_1.ReadPreference.fromOptions({\n          readPreference: {\n            ...options.readPreference,\n            ...value\n          },\n          ...value\n        });\n        if (rp) return rp;else throw new error_1.MongoParseError(`Cannot make read preference from ${JSON.stringify(value)}`);\n      }\n      if (typeof value === 'string') {\n        const rpOpts = {\n          hedge: options.readPreference?.hedge,\n          maxStalenessSeconds: options.readPreference?.maxStalenessSeconds\n        };\n        return new read_preference_1.ReadPreference(value, options.readPreference?.tags, rpOpts);\n      }\n      throw new error_1.MongoParseError(`Unknown ReadPreference value: ${value}`);\n    }\n  },\n  readPreferenceTags: {\n    target: 'readPreference',\n    transform(_ref20) {\n      let {\n        values,\n        options\n      } = _ref20;\n      const tags = Array.isArray(values[0]) ? values[0] : values;\n      const readPreferenceTags = [];\n      for (const tag of tags) {\n        const readPreferenceTag = Object.create(null);\n        if (typeof tag === 'string') {\n          for (const [k, v] of entriesFromString(tag)) {\n            readPreferenceTag[k] = v;\n          }\n        }\n        if ((0, utils_1.isRecord)(tag)) {\n          for (const [k, v] of Object.entries(tag)) {\n            readPreferenceTag[k] = v;\n          }\n        }\n        readPreferenceTags.push(readPreferenceTag);\n      }\n      return read_preference_1.ReadPreference.fromOptions({\n        readPreference: options.readPreference,\n        readPreferenceTags\n      });\n    }\n  },\n  replicaSet: {\n    type: 'string'\n  },\n  retryReads: {\n    default: true,\n    type: 'boolean'\n  },\n  retryWrites: {\n    default: true,\n    type: 'boolean'\n  },\n  serializeFunctions: {\n    type: 'boolean'\n  },\n  serverMonitoringMode: {\n    default: 'auto',\n    transform(_ref21) {\n      let {\n        values: [value]\n      } = _ref21;\n      if (!Object.values(monitor_1.ServerMonitoringMode).includes(value)) {\n        throw new error_1.MongoParseError('serverMonitoringMode must be one of `auto`, `poll`, or `stream`');\n      }\n      return value;\n    }\n  },\n  serverSelectionTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  servername: {\n    type: 'string'\n  },\n  socketTimeoutMS: {\n    // TODO(NODE-6491): deprecated: 'Please use timeoutMS instead',\n    default: 0,\n    type: 'uint'\n  },\n  srvMaxHosts: {\n    type: 'uint',\n    default: 0\n  },\n  srvServiceName: {\n    type: 'string',\n    default: 'mongodb'\n  },\n  ssl: {\n    target: 'tls',\n    type: 'boolean'\n  },\n  timeoutMS: {\n    type: 'uint'\n  },\n  tls: {\n    type: 'boolean'\n  },\n  tlsAllowInvalidCertificates: {\n    target: 'rejectUnauthorized',\n    transform(_ref22) {\n      let {\n        name,\n        values: [value]\n      } = _ref22;\n      // allowInvalidCertificates is the inverse of rejectUnauthorized\n      return !getBoolean(name, value);\n    }\n  },\n  tlsAllowInvalidHostnames: {\n    target: 'checkServerIdentity',\n    transform(_ref23) {\n      let {\n        name,\n        values: [value]\n      } = _ref23;\n      // tlsAllowInvalidHostnames means setting the checkServerIdentity function to a noop\n      return getBoolean(name, value) ? () => undefined : undefined;\n    }\n  },\n  tlsCAFile: {\n    type: 'string'\n  },\n  tlsCRLFile: {\n    type: 'string'\n  },\n  tlsCertificateKeyFile: {\n    type: 'string'\n  },\n  tlsCertificateKeyFilePassword: {\n    target: 'passphrase',\n    type: 'any'\n  },\n  tlsInsecure: {\n    transform(_ref24) {\n      let {\n        name,\n        options,\n        values: [value]\n      } = _ref24;\n      const tlsInsecure = getBoolean(name, value);\n      if (tlsInsecure) {\n        options.checkServerIdentity = () => undefined;\n        options.rejectUnauthorized = false;\n      } else {\n        options.checkServerIdentity = options.tlsAllowInvalidHostnames ? () => undefined : undefined;\n        options.rejectUnauthorized = options.tlsAllowInvalidCertificates ? false : true;\n      }\n      return tlsInsecure;\n    }\n  },\n  w: {\n    target: 'writeConcern',\n    transform(_ref25) {\n      let {\n        values: [value],\n        options\n      } = _ref25;\n      return write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          w: value\n        }\n      });\n    }\n  },\n  waitQueueTimeoutMS: {\n    // TODO(NODE-6491): deprecated: 'Please use timeoutMS instead',\n    default: 0,\n    type: 'uint'\n  },\n  writeConcern: {\n    target: 'writeConcern',\n    transform(_ref26) {\n      let {\n        values: [value],\n        options\n      } = _ref26;\n      if ((0, utils_1.isRecord)(value) || value instanceof write_concern_1.WriteConcern) {\n        return write_concern_1.WriteConcern.fromOptions({\n          writeConcern: {\n            ...options.writeConcern,\n            ...value\n          }\n        });\n      } else if (value === 'majority' || typeof value === 'number') {\n        return write_concern_1.WriteConcern.fromOptions({\n          writeConcern: {\n            ...options.writeConcern,\n            w: value\n          }\n        });\n      }\n      throw new error_1.MongoParseError(`Invalid WriteConcern cannot parse: ${JSON.stringify(value)}`);\n    }\n  },\n  wtimeout: {\n    deprecated: 'Please use wtimeoutMS instead',\n    target: 'writeConcern',\n    transform(_ref27) {\n      let {\n        values: [value],\n        options\n      } = _ref27;\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          wtimeout: getUIntFromOptions('wtimeout', value)\n        }\n      });\n      if (wc) return wc;\n      throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n    }\n  },\n  wtimeoutMS: {\n    target: 'writeConcern',\n    transform(_ref28) {\n      let {\n        values: [value],\n        options\n      } = _ref28;\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          wtimeoutMS: getUIntFromOptions('wtimeoutMS', value)\n        }\n      });\n      if (wc) return wc;\n      throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n    }\n  },\n  zlibCompressionLevel: {\n    default: 0,\n    type: 'int'\n  },\n  mongodbLogPath: {\n    transform(_ref29) {\n      let {\n        values: [value]\n      } = _ref29;\n      if (!(typeof value === 'string' && ['stderr', 'stdout'].includes(value) || value && typeof value === 'object' && 'write' in value && typeof value.write === 'function')) {\n        throw new error_1.MongoAPIError(`Option 'mongodbLogPath' must be of type 'stderr' | 'stdout' | MongoDBLogWritable`);\n      }\n      return value;\n    }\n  },\n  mongodbLogComponentSeverities: {\n    transform(_ref30) {\n      let {\n        values: [value]\n      } = _ref30;\n      if (typeof value !== 'object' || !value) {\n        throw new error_1.MongoAPIError(`Option 'mongodbLogComponentSeverities' must be a non-null object`);\n      }\n      for (const [k, v] of Object.entries(value)) {\n        if (typeof v !== 'string' || typeof k !== 'string') {\n          throw new error_1.MongoAPIError(`User input for option 'mongodbLogComponentSeverities' object cannot include a non-string key or value`);\n        }\n        if (!Object.values(mongo_logger_1.MongoLoggableComponent).some(val => val === k) && k !== 'default') {\n          throw new error_1.MongoAPIError(`User input for option 'mongodbLogComponentSeverities' contains invalid key: ${k}`);\n        }\n        if (!Object.values(mongo_logger_1.SeverityLevel).some(val => val === v)) {\n          throw new error_1.MongoAPIError(`Option 'mongodbLogComponentSeverities' does not support ${v} as a value for ${k}`);\n        }\n      }\n      return value;\n    }\n  },\n  mongodbLogMaxDocumentLength: {\n    type: 'uint'\n  },\n  // Custom types for modifying core behavior\n  connectionType: {\n    type: 'any'\n  },\n  srvPoller: {\n    type: 'any'\n  },\n  // Accepted Node.js Options\n  allowPartialTrustChain: {\n    type: 'any'\n  },\n  minDHSize: {\n    type: 'any'\n  },\n  pskCallback: {\n    type: 'any'\n  },\n  secureContext: {\n    type: 'any'\n  },\n  enableTrace: {\n    type: 'any'\n  },\n  requestCert: {\n    type: 'any'\n  },\n  rejectUnauthorized: {\n    type: 'any'\n  },\n  checkServerIdentity: {\n    type: 'any'\n  },\n  keepAliveInitialDelay: {\n    type: 'any'\n  },\n  ALPNProtocols: {\n    type: 'any'\n  },\n  SNICallback: {\n    type: 'any'\n  },\n  session: {\n    type: 'any'\n  },\n  requestOCSP: {\n    type: 'any'\n  },\n  localAddress: {\n    type: 'any'\n  },\n  localPort: {\n    type: 'any'\n  },\n  hints: {\n    type: 'any'\n  },\n  lookup: {\n    type: 'any'\n  },\n  ca: {\n    type: 'any'\n  },\n  cert: {\n    type: 'any'\n  },\n  ciphers: {\n    type: 'any'\n  },\n  crl: {\n    type: 'any'\n  },\n  ecdhCurve: {\n    type: 'any'\n  },\n  key: {\n    type: 'any'\n  },\n  passphrase: {\n    type: 'any'\n  },\n  pfx: {\n    type: 'any'\n  },\n  secureProtocol: {\n    type: 'any'\n  },\n  index: {\n    type: 'any'\n  },\n  // Legacy options from v3 era\n  useNewUrlParser: {\n    type: 'boolean',\n    deprecated: 'useNewUrlParser has no effect since Node.js Driver version 4.0.0 and will be removed in the next major version'\n  },\n  useUnifiedTopology: {\n    type: 'boolean',\n    deprecated: 'useUnifiedTopology has no effect since Node.js Driver version 4.0.0 and will be removed in the next major version'\n  },\n  __skipPingOnConnect: {\n    type: 'boolean'\n  }\n};\nexports.DEFAULT_OPTIONS = new CaseInsensitiveMap(Object.entries(exports.OPTIONS).filter(_ref31 => {\n  let [, descriptor] = _ref31;\n  return descriptor.default != null;\n}).map(_ref32 => {\n  let [k, d] = _ref32;\n  return [k, d.default];\n}));","map":{"version":3,"names":["exports","resolveSRVRecord","parseOptions","dns","require","mongodb_connection_string_url_1","url_1","mongo_credentials_1","providers_1","client_metadata_1","compression_1","encrypter_1","error_1","mongo_client_1","mongo_logger_1","read_concern_1","read_preference_1","monitor_1","utils_1","write_concern_1","VALID_TXT_RECORDS","LB_SINGLE_HOST_ERROR","LB_REPLICA_SET_ERROR","LB_DIRECT_CONNECTION_ERROR","retryDNSTimeoutFor","api","dnsReqRetryTimeout","lookupAddress","promises","firstDNSError","code","TIMEOUT","resolveSrv","resolveTxt","options","srvHost","MongoAPIError","txtResolutionPromise","then","undefined","squashError","hostname","srvServiceName","addresses","length","name","checkParentDomainMatch","hostAddresses","map","r","HostAddress","fromString","port","validateLoadBalancedOptions","record","error","MongoParseError","txtRecordOptions","URLSearchParams","join","txtRecordOptionKeys","keys","some","key","includes","option","get","source","replicaSet","loadBalanced","userSpecifiedAuthSource","credentials","AUTH_MECHS_AUTH_SRC_EXTERNAL","has","mechanism","MongoCredentials","merge","userSpecifiedReplicaSet","srvMaxHosts","checkTLSOptions","allOptions","check","a","b","getBoolean","value","getIntFromOptions","parsedInt","parseInteger","getUIntFromOptions","parsedValue","entriesFromString","keyValuePairs","split","keyValue","CaseInsensitiveMap","Map","constructor","entries","arguments","_ref","k","v","toLowerCase","set","delete","uri","mongoClient","MongoClient","useBigInt64","promoteLongs","promoteValues","url","default","hosts","isSRV","mongoOptions","Object","create","urlOptions","pathname","dbName","decodeURIComponent","slice","username","auth","password","searchParams","values","getAll","isReadPreferenceTags","test","MongoInvalidArgumentError","objectOptions","filter","_ref2","uriMechanismProperties","property","allProvidedOptions","allProvidedKeys","Set","objectOptionValue","push","urlValues","tlsAndSslOpts","concat","bind","size","unsupportedOptions","setDifference","Array","from","OPTIONS","s","optionWord","isOrAre","descriptor","DEFAULT_OPTIONS","setOption","deprecated","deprecatedMsg","emitWarning","isGssapi","AuthMechanism","MONGODB_GSSAPI","isX509","MONGODB_X509","isAws","MONGODB_AWS","isOidc","MONGODB_OIDC","MongoMissingCredentialsError","validate","MONGODB_DEFAULT","mechanismProperties","autoEncryption","Encrypter","checkForMongoCrypt","encrypter","autoEncrypter","directConnection","noUserSpecifiedTLS","noUserSpecifiedSSL","tls","userSpecifiedSrvOptions","proxyHost","proxyPort","proxyUsername","proxyPassword","proxyOptions","mongoLoggerOptions","MongoLogger","resolveOptions","MONGODB_LOG_COMMAND","process","env","MONGODB_LOG_TOPOLOGY","MONGODB_LOG_SERVER_SELECTION","MONGODB_LOG_CONNECTION","MONGODB_LOG_CLIENT","MONGODB_LOG_ALL","MONGODB_LOG_MAX_DOCUMENT_LENGTH","MONGODB_LOG_PATH","mongodbLogPath","mongodbLogComponentSeverities","mongodbLogMaxDocumentLength","metadata","makeClientMetadata","extendedMetadata","addContainerMetadata","isSrv","target","type","transform","String","isRecord","transformValue","appName","_ref3","authMechanism","_ref4","mechanisms","m","match","RegExp","raw","MONGODB_PLAIN","authMechanismProperties","_ref5","optionValue","authSource","_ref6","autoSelectFamily","autoSelectFamilyAttemptTimeout","bsonRegExp","serverApi","_ref7","version","serverApiToValidate","versionToValidate","ServerApiVersion","checkKeys","compressors","_ref8","compressionList","compVal","compValArray","isArray","c","Compressor","add","connectTimeoutMS","driverInfo","enableUtf8Validation","family","_ref9","fieldsAsRaw","forceServerObjectId","fsync","_ref10","wc","WriteConcern","fromOptions","writeConcern","heartbeatFrequencyMS","ignoreUndefined","j","_ref11","journal","_ref12","localThresholdMS","maxConnecting","_ref13","maxIdleTimeMS","maxPoolSize","maxStalenessSeconds","_ref14","readPreference","ReadPreference","minInternalBufferSize","minPoolSize","minHeartbeatFrequencyMS","monitorCommands","_ref15","noDelay","pkFactory","DEFAULT_PK_FACTORY","_ref16","createPk","promoteBuffers","readConcern","_ref17","ReadConcern","JSON","stringify","readConcernLevel","_ref18","level","primary","_ref19","rp","rpOpts","hedge","tags","readPreferenceTags","_ref20","tag","readPreferenceTag","retryReads","retryWrites","serializeFunctions","serverMonitoringMode","_ref21","ServerMonitoringMode","serverSelectionTimeoutMS","servername","socketTimeoutMS","ssl","timeoutMS","tlsAllowInvalidCertificates","_ref22","tlsAllowInvalidHostnames","_ref23","tlsCAFile","tlsCRLFile","tlsCertificateKeyFile","tlsCertificateKeyFilePassword","tlsInsecure","_ref24","checkServerIdentity","rejectUnauthorized","w","_ref25","waitQueueTimeoutMS","_ref26","wtimeout","_ref27","wtimeoutMS","_ref28","zlibCompressionLevel","_ref29","write","_ref30","MongoLoggableComponent","val","SeverityLevel","connectionType","srvPoller","allowPartialTrustChain","minDHSize","pskCallback","secureContext","enableTrace","requestCert","keepAliveInitialDelay","ALPNProtocols","SNICallback","session","requestOCSP","localAddress","localPort","hints","lookup","ca","cert","ciphers","crl","ecdhCurve","passphrase","pfx","secureProtocol","index","useNewUrlParser","useUnifiedTopology","__skipPingOnConnect","_ref31","_ref32","d"],"sources":["C:\\Users\\asmee\\Documents\\Visa-Application\\node_modules\\mongodb\\src\\connection_string.ts"],"sourcesContent":["import * as dns from 'dns';\nimport ConnectionString from 'mongodb-connection-string-url';\nimport { URLSearchParams } from 'url';\n\nimport type { Document } from './bson';\nimport { MongoCredentials } from './cmap/auth/mongo_credentials';\nimport { AUTH_MECHS_AUTH_SRC_EXTERNAL, AuthMechanism } from './cmap/auth/providers';\nimport { addContainerMetadata, makeClientMetadata } from './cmap/handshake/client_metadata';\nimport { Compressor, type CompressorName } from './cmap/wire_protocol/compression';\nimport { Encrypter } from './encrypter';\nimport {\n  MongoAPIError,\n  MongoInvalidArgumentError,\n  MongoMissingCredentialsError,\n  MongoParseError\n} from './error';\nimport {\n  MongoClient,\n  type MongoClientOptions,\n  type MongoOptions,\n  type PkFactory,\n  type ServerApi,\n  ServerApiVersion\n} from './mongo_client';\nimport { MongoLoggableComponent, MongoLogger, SeverityLevel } from './mongo_logger';\nimport { ReadConcern, type ReadConcernLevel } from './read_concern';\nimport { ReadPreference, type ReadPreferenceMode } from './read_preference';\nimport { ServerMonitoringMode } from './sdam/monitor';\nimport type { TagSet } from './sdam/server_description';\nimport {\n  checkParentDomainMatch,\n  DEFAULT_PK_FACTORY,\n  emitWarning,\n  HostAddress,\n  isRecord,\n  parseInteger,\n  setDifference,\n  squashError\n} from './utils';\nimport { type W, WriteConcern } from './write_concern';\n\nconst VALID_TXT_RECORDS = ['authSource', 'replicaSet', 'loadBalanced'];\n\nconst LB_SINGLE_HOST_ERROR = 'loadBalanced option only supported with a single host in the URI';\nconst LB_REPLICA_SET_ERROR = 'loadBalanced option not supported with a replicaSet option';\nconst LB_DIRECT_CONNECTION_ERROR =\n  'loadBalanced option not supported when directConnection is provided';\n\nfunction retryDNSTimeoutFor(api: 'resolveSrv'): (a: string) => Promise<dns.SrvRecord[]>;\nfunction retryDNSTimeoutFor(api: 'resolveTxt'): (a: string) => Promise<string[][]>;\nfunction retryDNSTimeoutFor(\n  api: 'resolveSrv' | 'resolveTxt'\n): (a: string) => Promise<dns.SrvRecord[] | string[][]> {\n  return async function dnsReqRetryTimeout(lookupAddress: string) {\n    try {\n      return await dns.promises[api](lookupAddress);\n    } catch (firstDNSError) {\n      if (firstDNSError.code === dns.TIMEOUT) {\n        return await dns.promises[api](lookupAddress);\n      } else {\n        throw firstDNSError;\n      }\n    }\n  };\n}\n\nconst resolveSrv = retryDNSTimeoutFor('resolveSrv');\nconst resolveTxt = retryDNSTimeoutFor('resolveTxt');\n\n/**\n * Lookup a `mongodb+srv` connection string, combine the parts and reparse it as a normal\n * connection string.\n *\n * @param uri - The connection string to parse\n * @param options - Optional user provided connection string options\n */\nexport async function resolveSRVRecord(options: MongoOptions): Promise<HostAddress[]> {\n  if (typeof options.srvHost !== 'string') {\n    throw new MongoAPIError('Option \"srvHost\" must not be empty');\n  }\n\n  // Asynchronously start TXT resolution so that we do not have to wait until\n  // the SRV record is resolved before starting a second DNS query.\n  const lookupAddress = options.srvHost;\n  const txtResolutionPromise = resolveTxt(lookupAddress);\n\n  txtResolutionPromise.then(undefined, squashError); // rejections will be handled later\n\n  const hostname = `_${options.srvServiceName}._tcp.${lookupAddress}`;\n  // Resolve the SRV record and use the result as the list of hosts to connect to.\n  const addresses = await resolveSrv(hostname);\n\n  if (addresses.length === 0) {\n    throw new MongoAPIError('No addresses found at host');\n  }\n\n  for (const { name } of addresses) {\n    checkParentDomainMatch(name, lookupAddress);\n  }\n\n  const hostAddresses = addresses.map(r => HostAddress.fromString(`${r.name}:${r.port ?? 27017}`));\n\n  validateLoadBalancedOptions(hostAddresses, options, true);\n\n  // Use the result of resolving the TXT record and add options from there if they exist.\n  let record;\n  try {\n    record = await txtResolutionPromise;\n  } catch (error) {\n    if (error.code !== 'ENODATA' && error.code !== 'ENOTFOUND') {\n      throw error;\n    }\n    return hostAddresses;\n  }\n\n  if (record.length > 1) {\n    throw new MongoParseError('Multiple text records not allowed');\n  }\n\n  const txtRecordOptions = new URLSearchParams(record[0].join(''));\n  const txtRecordOptionKeys = [...txtRecordOptions.keys()];\n  if (txtRecordOptionKeys.some(key => !VALID_TXT_RECORDS.includes(key))) {\n    throw new MongoParseError(`Text record may only set any of: ${VALID_TXT_RECORDS.join(', ')}`);\n  }\n\n  if (VALID_TXT_RECORDS.some(option => txtRecordOptions.get(option) === '')) {\n    throw new MongoParseError('Cannot have empty URI params in DNS TXT Record');\n  }\n\n  const source = txtRecordOptions.get('authSource') ?? undefined;\n  const replicaSet = txtRecordOptions.get('replicaSet') ?? undefined;\n  const loadBalanced = txtRecordOptions.get('loadBalanced') ?? undefined;\n\n  if (\n    !options.userSpecifiedAuthSource &&\n    source &&\n    options.credentials &&\n    !AUTH_MECHS_AUTH_SRC_EXTERNAL.has(options.credentials.mechanism)\n  ) {\n    options.credentials = MongoCredentials.merge(options.credentials, { source });\n  }\n\n  if (!options.userSpecifiedReplicaSet && replicaSet) {\n    options.replicaSet = replicaSet;\n  }\n\n  if (loadBalanced === 'true') {\n    options.loadBalanced = true;\n  }\n\n  if (options.replicaSet && options.srvMaxHosts > 0) {\n    throw new MongoParseError('Cannot combine replicaSet option with srvMaxHosts');\n  }\n\n  validateLoadBalancedOptions(hostAddresses, options, true);\n\n  return hostAddresses;\n}\n\n/**\n * Checks if TLS options are valid\n *\n * @param allOptions - All options provided by user or included in default options map\n * @throws MongoAPIError if TLS options are invalid\n */\nfunction checkTLSOptions(allOptions: CaseInsensitiveMap): void {\n  if (!allOptions) return;\n  const check = (a: string, b: string) => {\n    if (allOptions.has(a) && allOptions.has(b)) {\n      throw new MongoAPIError(`The '${a}' option cannot be used with the '${b}' option`);\n    }\n  };\n  check('tlsInsecure', 'tlsAllowInvalidCertificates');\n  check('tlsInsecure', 'tlsAllowInvalidHostnames');\n  check('tlsInsecure', 'tlsDisableCertificateRevocationCheck');\n  check('tlsInsecure', 'tlsDisableOCSPEndpointCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableCertificateRevocationCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableOCSPEndpointCheck');\n  check('tlsDisableCertificateRevocationCheck', 'tlsDisableOCSPEndpointCheck');\n}\nfunction getBoolean(name: string, value: unknown): boolean {\n  if (typeof value === 'boolean') return value;\n  switch (value) {\n    case 'true':\n      return true;\n    case 'false':\n      return false;\n    default:\n      throw new MongoParseError(`${name} must be either \"true\" or \"false\"`);\n  }\n}\n\nfunction getIntFromOptions(name: string, value: unknown): number {\n  const parsedInt = parseInteger(value);\n  if (parsedInt != null) {\n    return parsedInt;\n  }\n  throw new MongoParseError(`Expected ${name} to be stringified int value, got: ${value}`);\n}\n\nfunction getUIntFromOptions(name: string, value: unknown): number {\n  const parsedValue = getIntFromOptions(name, value);\n  if (parsedValue < 0) {\n    throw new MongoParseError(`${name} can only be a positive int value, got: ${value}`);\n  }\n  return parsedValue;\n}\n\nfunction* entriesFromString(value: string): Generator<[string, string]> {\n  if (value === '') {\n    return;\n  }\n  const keyValuePairs = value.split(',');\n  for (const keyValue of keyValuePairs) {\n    const [key, value] = keyValue.split(/:(.*)/);\n    if (value == null) {\n      throw new MongoParseError('Cannot have undefined values in key value pairs');\n    }\n\n    yield [key, value];\n  }\n}\n\nclass CaseInsensitiveMap<Value = any> extends Map<string, Value> {\n  constructor(entries: Array<[string, any]> = []) {\n    super(entries.map(([k, v]) => [k.toLowerCase(), v]));\n  }\n  override has(k: string) {\n    return super.has(k.toLowerCase());\n  }\n  override get(k: string) {\n    return super.get(k.toLowerCase());\n  }\n  override set(k: string, v: any) {\n    return super.set(k.toLowerCase(), v);\n  }\n  override delete(k: string): boolean {\n    return super.delete(k.toLowerCase());\n  }\n}\n\nexport function parseOptions(\n  uri: string,\n  mongoClient: MongoClient | MongoClientOptions | undefined = undefined,\n  options: MongoClientOptions = {}\n): MongoOptions {\n  if (mongoClient != null && !(mongoClient instanceof MongoClient)) {\n    options = mongoClient;\n    mongoClient = undefined;\n  }\n\n  // validate BSONOptions\n  if (options.useBigInt64 && typeof options.promoteLongs === 'boolean' && !options.promoteLongs) {\n    throw new MongoAPIError('Must request either bigint or Long for int64 deserialization');\n  }\n\n  if (options.useBigInt64 && typeof options.promoteValues === 'boolean' && !options.promoteValues) {\n    throw new MongoAPIError('Must request either bigint or Long for int64 deserialization');\n  }\n\n  const url = new ConnectionString(uri);\n  const { hosts, isSRV } = url;\n\n  const mongoOptions = Object.create(null);\n\n  mongoOptions.hosts = isSRV ? [] : hosts.map(HostAddress.fromString);\n\n  const urlOptions = new CaseInsensitiveMap<unknown[]>();\n\n  if (url.pathname !== '/' && url.pathname !== '') {\n    const dbName = decodeURIComponent(\n      url.pathname[0] === '/' ? url.pathname.slice(1) : url.pathname\n    );\n    if (dbName) {\n      urlOptions.set('dbName', [dbName]);\n    }\n  }\n\n  if (url.username !== '') {\n    const auth: Document = {\n      username: decodeURIComponent(url.username)\n    };\n\n    if (typeof url.password === 'string') {\n      auth.password = decodeURIComponent(url.password);\n    }\n\n    urlOptions.set('auth', [auth]);\n  }\n\n  for (const key of url.searchParams.keys()) {\n    const values = url.searchParams.getAll(key);\n\n    const isReadPreferenceTags = /readPreferenceTags/i.test(key);\n\n    if (!isReadPreferenceTags && values.length > 1) {\n      throw new MongoInvalidArgumentError(\n        `URI option \"${key}\" cannot appear more than once in the connection string`\n      );\n    }\n\n    if (!isReadPreferenceTags && values.includes('')) {\n      throw new MongoAPIError(`URI option \"${key}\" cannot be specified with no value`);\n    }\n\n    if (!urlOptions.has(key)) {\n      urlOptions.set(key, values);\n    }\n  }\n\n  const objectOptions = new CaseInsensitiveMap<unknown>(\n    Object.entries(options).filter(([, v]) => v != null)\n  );\n\n  // Validate options that can only be provided by one of uri or object\n\n  if (urlOptions.has('serverApi')) {\n    throw new MongoParseError(\n      'URI cannot contain `serverApi`, it can only be passed to the client'\n    );\n  }\n\n  const uriMechanismProperties = urlOptions.get('authMechanismProperties');\n  if (uriMechanismProperties) {\n    for (const property of uriMechanismProperties) {\n      if (/(^|,)ALLOWED_HOSTS:/.test(property as string)) {\n        throw new MongoParseError(\n          'Auth mechanism property ALLOWED_HOSTS is not allowed in the connection string.'\n        );\n      }\n    }\n  }\n\n  if (objectOptions.has('loadBalanced')) {\n    throw new MongoParseError('loadBalanced is only a valid option in the URI');\n  }\n\n  // All option collection\n\n  const allProvidedOptions = new CaseInsensitiveMap<unknown[]>();\n\n  const allProvidedKeys = new Set<string>([...urlOptions.keys(), ...objectOptions.keys()]);\n\n  for (const key of allProvidedKeys) {\n    const values = [];\n    const objectOptionValue = objectOptions.get(key);\n    if (objectOptionValue != null) {\n      values.push(objectOptionValue);\n    }\n\n    const urlValues = urlOptions.get(key) ?? [];\n    values.push(...urlValues);\n    allProvidedOptions.set(key, values);\n  }\n\n  if (allProvidedOptions.has('tls') || allProvidedOptions.has('ssl')) {\n    const tlsAndSslOpts = (allProvidedOptions.get('tls') || [])\n      .concat(allProvidedOptions.get('ssl') || [])\n      .map(getBoolean.bind(null, 'tls/ssl'));\n    if (new Set(tlsAndSslOpts).size !== 1) {\n      throw new MongoParseError('All values of tls/ssl must be the same.');\n    }\n  }\n\n  checkTLSOptions(allProvidedOptions);\n\n  const unsupportedOptions = setDifference(\n    allProvidedKeys,\n    Array.from(Object.keys(OPTIONS)).map(s => s.toLowerCase())\n  );\n  if (unsupportedOptions.size !== 0) {\n    const optionWord = unsupportedOptions.size > 1 ? 'options' : 'option';\n    const isOrAre = unsupportedOptions.size > 1 ? 'are' : 'is';\n    throw new MongoParseError(\n      `${optionWord} ${Array.from(unsupportedOptions).join(', ')} ${isOrAre} not supported`\n    );\n  }\n\n  // Option parsing and setting\n\n  for (const [key, descriptor] of Object.entries(OPTIONS)) {\n    const values = allProvidedOptions.get(key);\n    if (!values || values.length === 0) {\n      if (DEFAULT_OPTIONS.has(key)) {\n        setOption(mongoOptions, key, descriptor, [DEFAULT_OPTIONS.get(key)]);\n      }\n    } else {\n      const { deprecated } = descriptor;\n      if (deprecated) {\n        const deprecatedMsg = typeof deprecated === 'string' ? `: ${deprecated}` : '';\n        emitWarning(`${key} is a deprecated option${deprecatedMsg}`);\n      }\n\n      setOption(mongoOptions, key, descriptor, values);\n    }\n  }\n\n  if (mongoOptions.credentials) {\n    const isGssapi = mongoOptions.credentials.mechanism === AuthMechanism.MONGODB_GSSAPI;\n    const isX509 = mongoOptions.credentials.mechanism === AuthMechanism.MONGODB_X509;\n    const isAws = mongoOptions.credentials.mechanism === AuthMechanism.MONGODB_AWS;\n    const isOidc = mongoOptions.credentials.mechanism === AuthMechanism.MONGODB_OIDC;\n    if (\n      (isGssapi || isX509) &&\n      allProvidedOptions.has('authSource') &&\n      mongoOptions.credentials.source !== '$external'\n    ) {\n      // If authSource was explicitly given and its incorrect, we error\n      throw new MongoParseError(\n        `authMechanism ${mongoOptions.credentials.mechanism} requires an authSource of '$external'`\n      );\n    }\n\n    if (\n      !(isGssapi || isX509 || isAws || isOidc) &&\n      mongoOptions.dbName &&\n      !allProvidedOptions.has('authSource')\n    ) {\n      // inherit the dbName unless GSSAPI or X509, then silently ignore dbName\n      // and there was no specific authSource given\n      mongoOptions.credentials = MongoCredentials.merge(mongoOptions.credentials, {\n        source: mongoOptions.dbName\n      });\n    }\n\n    if (isAws && mongoOptions.credentials.username && !mongoOptions.credentials.password) {\n      throw new MongoMissingCredentialsError(\n        `When using ${mongoOptions.credentials.mechanism} password must be set when a username is specified`\n      );\n    }\n\n    mongoOptions.credentials.validate();\n\n    // Check if the only auth related option provided was authSource, if so we can remove credentials\n    if (\n      mongoOptions.credentials.password === '' &&\n      mongoOptions.credentials.username === '' &&\n      mongoOptions.credentials.mechanism === AuthMechanism.MONGODB_DEFAULT &&\n      Object.keys(mongoOptions.credentials.mechanismProperties).length === 0\n    ) {\n      delete mongoOptions.credentials;\n    }\n  }\n\n  if (!mongoOptions.dbName) {\n    // dbName default is applied here because of the credential validation above\n    mongoOptions.dbName = 'test';\n  }\n\n  validateLoadBalancedOptions(hosts, mongoOptions, isSRV);\n\n  if (mongoClient && mongoOptions.autoEncryption) {\n    Encrypter.checkForMongoCrypt();\n    mongoOptions.encrypter = new Encrypter(mongoClient, uri, options);\n    mongoOptions.autoEncrypter = mongoOptions.encrypter.autoEncrypter;\n  }\n\n  // Potential SRV Overrides and SRV connection string validations\n\n  mongoOptions.userSpecifiedAuthSource =\n    objectOptions.has('authSource') || urlOptions.has('authSource');\n  mongoOptions.userSpecifiedReplicaSet =\n    objectOptions.has('replicaSet') || urlOptions.has('replicaSet');\n\n  if (isSRV) {\n    // SRV Record is resolved upon connecting\n    mongoOptions.srvHost = hosts[0];\n\n    if (mongoOptions.directConnection) {\n      throw new MongoAPIError('SRV URI does not support directConnection');\n    }\n\n    if (mongoOptions.srvMaxHosts > 0 && typeof mongoOptions.replicaSet === 'string') {\n      throw new MongoParseError('Cannot use srvMaxHosts option with replicaSet');\n    }\n\n    // SRV turns on TLS by default, but users can override and turn it off\n    const noUserSpecifiedTLS = !objectOptions.has('tls') && !urlOptions.has('tls');\n    const noUserSpecifiedSSL = !objectOptions.has('ssl') && !urlOptions.has('ssl');\n    if (noUserSpecifiedTLS && noUserSpecifiedSSL) {\n      mongoOptions.tls = true;\n    }\n  } else {\n    const userSpecifiedSrvOptions =\n      urlOptions.has('srvMaxHosts') ||\n      objectOptions.has('srvMaxHosts') ||\n      urlOptions.has('srvServiceName') ||\n      objectOptions.has('srvServiceName');\n\n    if (userSpecifiedSrvOptions) {\n      throw new MongoParseError(\n        'Cannot use srvMaxHosts or srvServiceName with a non-srv connection string'\n      );\n    }\n  }\n\n  if (mongoOptions.directConnection && mongoOptions.hosts.length !== 1) {\n    throw new MongoParseError('directConnection option requires exactly one host');\n  }\n\n  if (\n    !mongoOptions.proxyHost &&\n    (mongoOptions.proxyPort || mongoOptions.proxyUsername || mongoOptions.proxyPassword)\n  ) {\n    throw new MongoParseError('Must specify proxyHost if other proxy options are passed');\n  }\n\n  if (\n    (mongoOptions.proxyUsername && !mongoOptions.proxyPassword) ||\n    (!mongoOptions.proxyUsername && mongoOptions.proxyPassword)\n  ) {\n    throw new MongoParseError('Can only specify both of proxy username/password or neither');\n  }\n\n  const proxyOptions = ['proxyHost', 'proxyPort', 'proxyUsername', 'proxyPassword'].map(\n    key => urlOptions.get(key) ?? []\n  );\n\n  if (proxyOptions.some(options => options.length > 1)) {\n    throw new MongoParseError(\n      'Proxy options cannot be specified multiple times in the connection string'\n    );\n  }\n\n  mongoOptions.mongoLoggerOptions = MongoLogger.resolveOptions(\n    {\n      MONGODB_LOG_COMMAND: process.env.MONGODB_LOG_COMMAND,\n      MONGODB_LOG_TOPOLOGY: process.env.MONGODB_LOG_TOPOLOGY,\n      MONGODB_LOG_SERVER_SELECTION: process.env.MONGODB_LOG_SERVER_SELECTION,\n      MONGODB_LOG_CONNECTION: process.env.MONGODB_LOG_CONNECTION,\n      MONGODB_LOG_CLIENT: process.env.MONGODB_LOG_CLIENT,\n      MONGODB_LOG_ALL: process.env.MONGODB_LOG_ALL,\n      MONGODB_LOG_MAX_DOCUMENT_LENGTH: process.env.MONGODB_LOG_MAX_DOCUMENT_LENGTH,\n      MONGODB_LOG_PATH: process.env.MONGODB_LOG_PATH\n    },\n    {\n      mongodbLogPath: mongoOptions.mongodbLogPath,\n      mongodbLogComponentSeverities: mongoOptions.mongodbLogComponentSeverities,\n      mongodbLogMaxDocumentLength: mongoOptions.mongodbLogMaxDocumentLength\n    }\n  );\n\n  mongoOptions.metadata = makeClientMetadata(mongoOptions);\n\n  mongoOptions.extendedMetadata = addContainerMetadata(mongoOptions.metadata).then(\n    undefined,\n    squashError\n  ); // rejections will be handled later\n\n  return mongoOptions;\n}\n\n/**\n * #### Throws if LB mode is true:\n * - hosts contains more than one host\n * - there is a replicaSet name set\n * - directConnection is set\n * - if srvMaxHosts is used when an srv connection string is passed in\n *\n * @throws MongoParseError\n */\nfunction validateLoadBalancedOptions(\n  hosts: HostAddress[] | string[],\n  mongoOptions: MongoOptions,\n  isSrv: boolean\n): void {\n  if (mongoOptions.loadBalanced) {\n    if (hosts.length > 1) {\n      throw new MongoParseError(LB_SINGLE_HOST_ERROR);\n    }\n    if (mongoOptions.replicaSet) {\n      throw new MongoParseError(LB_REPLICA_SET_ERROR);\n    }\n    if (mongoOptions.directConnection) {\n      throw new MongoParseError(LB_DIRECT_CONNECTION_ERROR);\n    }\n\n    if (isSrv && mongoOptions.srvMaxHosts > 0) {\n      throw new MongoParseError('Cannot limit srv hosts with loadBalanced enabled');\n    }\n  }\n  return;\n}\n\nfunction setOption(\n  mongoOptions: any,\n  key: string,\n  descriptor: OptionDescriptor,\n  values: unknown[]\n) {\n  const { target, type, transform } = descriptor;\n  const name = target ?? key;\n\n  switch (type) {\n    case 'boolean':\n      mongoOptions[name] = getBoolean(name, values[0]);\n      break;\n    case 'int':\n      mongoOptions[name] = getIntFromOptions(name, values[0]);\n      break;\n    case 'uint':\n      mongoOptions[name] = getUIntFromOptions(name, values[0]);\n      break;\n    case 'string':\n      if (values[0] == null) {\n        break;\n      }\n      // eslint-disable-next-line @typescript-eslint/no-base-to-string\n      mongoOptions[name] = String(values[0]);\n      break;\n    case 'record':\n      if (!isRecord(values[0])) {\n        throw new MongoParseError(`${name} must be an object`);\n      }\n      mongoOptions[name] = values[0];\n      break;\n    case 'any':\n      mongoOptions[name] = values[0];\n      break;\n    default: {\n      if (!transform) {\n        throw new MongoParseError('Descriptors missing a type must define a transform');\n      }\n      const transformValue = transform({ name, options: mongoOptions, values });\n      mongoOptions[name] = transformValue;\n      break;\n    }\n  }\n}\n\ninterface OptionDescriptor {\n  target?: string;\n  type?: 'boolean' | 'int' | 'uint' | 'record' | 'string' | 'any';\n  default?: any;\n\n  deprecated?: boolean | string;\n  /**\n   * @param name - the original option name\n   * @param options - the options so far for resolution\n   * @param values - the possible values in precedence order\n   */\n  transform?: (args: { name: string; options: MongoOptions; values: unknown[] }) => unknown;\n}\n\nexport const OPTIONS = {\n  appName: {\n    type: 'string'\n  },\n  auth: {\n    target: 'credentials',\n    transform({ name, options, values: [value] }): MongoCredentials {\n      if (!isRecord(value, ['username', 'password'] as const)) {\n        throw new MongoParseError(\n          `${name} must be an object with 'username' and 'password' properties`\n        );\n      }\n      return MongoCredentials.merge(options.credentials, {\n        username: value.username,\n        password: value.password\n      });\n    }\n  },\n  authMechanism: {\n    target: 'credentials',\n    transform({ options, values: [value] }): MongoCredentials {\n      const mechanisms = Object.values(AuthMechanism);\n      const [mechanism] = mechanisms.filter(m => m.match(RegExp(String.raw`\\b${value}\\b`, 'i')));\n      if (!mechanism) {\n        throw new MongoParseError(`authMechanism one of ${mechanisms}, got ${value}`);\n      }\n      let source = options.credentials?.source;\n      if (\n        mechanism === AuthMechanism.MONGODB_PLAIN ||\n        AUTH_MECHS_AUTH_SRC_EXTERNAL.has(mechanism)\n      ) {\n        // some mechanisms have '$external' as the Auth Source\n        source = '$external';\n      }\n\n      let password = options.credentials?.password;\n      if (mechanism === AuthMechanism.MONGODB_X509 && password === '') {\n        password = undefined;\n      }\n      return MongoCredentials.merge(options.credentials, {\n        mechanism,\n        source,\n        password\n      });\n    }\n  },\n  // Note that if the authMechanismProperties contain a TOKEN_RESOURCE that has a\n  // comma in it, it MUST be supplied as a MongoClient option instead of in the\n  // connection string.\n  authMechanismProperties: {\n    target: 'credentials',\n    transform({ options, values }): MongoCredentials {\n      // We can have a combination of options passed in the URI and options passed\n      // as an object to the MongoClient. So we must transform the string options\n      // as well as merge them together with a potentially provided object.\n      let mechanismProperties = Object.create(null);\n\n      for (const optionValue of values) {\n        if (typeof optionValue === 'string') {\n          for (const [key, value] of entriesFromString(optionValue)) {\n            try {\n              mechanismProperties[key] = getBoolean(key, value);\n            } catch {\n              mechanismProperties[key] = value;\n            }\n          }\n        } else {\n          if (!isRecord(optionValue)) {\n            throw new MongoParseError('AuthMechanismProperties must be an object');\n          }\n          mechanismProperties = { ...optionValue };\n        }\n      }\n      return MongoCredentials.merge(options.credentials, {\n        mechanismProperties\n      });\n    }\n  },\n  authSource: {\n    target: 'credentials',\n    transform({ options, values: [value] }): MongoCredentials {\n      const source = String(value);\n      return MongoCredentials.merge(options.credentials, { source });\n    }\n  },\n  autoEncryption: {\n    type: 'record'\n  },\n  autoSelectFamily: {\n    type: 'boolean',\n    default: true\n  },\n  autoSelectFamilyAttemptTimeout: {\n    type: 'uint'\n  },\n  bsonRegExp: {\n    type: 'boolean'\n  },\n  serverApi: {\n    target: 'serverApi',\n    transform({ values: [version] }): ServerApi {\n      const serverApiToValidate =\n        typeof version === 'string' ? ({ version } as ServerApi) : (version as ServerApi);\n      const versionToValidate = serverApiToValidate && serverApiToValidate.version;\n      if (!versionToValidate) {\n        throw new MongoParseError(\n          `Invalid \\`serverApi\\` property; must specify a version from the following enum: [\"${Object.values(\n            ServerApiVersion\n          ).join('\", \"')}\"]`\n        );\n      }\n      if (!Object.values(ServerApiVersion).some(v => v === versionToValidate)) {\n        throw new MongoParseError(\n          `Invalid server API version=${versionToValidate}; must be in the following enum: [\"${Object.values(\n            ServerApiVersion\n          ).join('\", \"')}\"]`\n        );\n      }\n      return serverApiToValidate;\n    }\n  },\n  checkKeys: {\n    type: 'boolean'\n  },\n  compressors: {\n    default: 'none',\n    target: 'compressors',\n    transform({ values }) {\n      const compressionList = new Set();\n      for (const compVal of values as (CompressorName[] | string)[]) {\n        const compValArray = typeof compVal === 'string' ? compVal.split(',') : compVal;\n        if (!Array.isArray(compValArray)) {\n          throw new MongoInvalidArgumentError(\n            'compressors must be an array or a comma-delimited list of strings'\n          );\n        }\n        for (const c of compValArray) {\n          if (Object.keys(Compressor).includes(String(c))) {\n            compressionList.add(String(c));\n          } else {\n            throw new MongoInvalidArgumentError(\n              `${c} is not a valid compression mechanism. Must be one of: ${Object.keys(\n                Compressor\n              )}.`\n            );\n          }\n        }\n      }\n      return [...compressionList];\n    }\n  },\n  connectTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  dbName: {\n    type: 'string'\n  },\n  directConnection: {\n    default: false,\n    type: 'boolean'\n  },\n  driverInfo: {\n    default: {},\n    type: 'record'\n  },\n  enableUtf8Validation: { type: 'boolean', default: true },\n  family: {\n    transform({ name, values: [value] }): 4 | 6 {\n      const transformValue = getIntFromOptions(name, value);\n      if (transformValue === 4 || transformValue === 6) {\n        return transformValue;\n      }\n      throw new MongoParseError(`Option 'family' must be 4 or 6 got ${transformValue}.`);\n    }\n  },\n  fieldsAsRaw: {\n    type: 'record'\n  },\n  forceServerObjectId: {\n    default: false,\n    type: 'boolean'\n  },\n  fsync: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n    transform({ name, options, values: [value] }): WriteConcern {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          fsync: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new MongoParseError(`Unable to make a writeConcern from fsync=${value}`);\n      return wc;\n    }\n  } as OptionDescriptor,\n  heartbeatFrequencyMS: {\n    default: 10000,\n    type: 'uint'\n  },\n  ignoreUndefined: {\n    type: 'boolean'\n  },\n  j: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n    transform({ name, options, values: [value] }): WriteConcern {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          journal: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n      return wc;\n    }\n  } as OptionDescriptor,\n  journal: {\n    target: 'writeConcern',\n    transform({ name, options, values: [value] }): WriteConcern {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          journal: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n      return wc;\n    }\n  },\n  loadBalanced: {\n    default: false,\n    type: 'boolean'\n  },\n  localThresholdMS: {\n    default: 15,\n    type: 'uint'\n  },\n  maxConnecting: {\n    default: 2,\n    transform({ name, values: [value] }): number {\n      const maxConnecting = getUIntFromOptions(name, value);\n      if (maxConnecting === 0) {\n        throw new MongoInvalidArgumentError('maxConnecting must be > 0 if specified');\n      }\n      return maxConnecting;\n    }\n  },\n  maxIdleTimeMS: {\n    default: 0,\n    type: 'uint'\n  },\n  maxPoolSize: {\n    default: 100,\n    type: 'uint'\n  },\n  maxStalenessSeconds: {\n    target: 'readPreference',\n    transform({ name, options, values: [value] }) {\n      const maxStalenessSeconds = getUIntFromOptions(name, value);\n      if (options.readPreference) {\n        return ReadPreference.fromOptions({\n          readPreference: { ...options.readPreference, maxStalenessSeconds }\n        });\n      } else {\n        return new ReadPreference('secondary', undefined, { maxStalenessSeconds });\n      }\n    }\n  },\n  minInternalBufferSize: {\n    type: 'uint'\n  },\n  minPoolSize: {\n    default: 0,\n    type: 'uint'\n  },\n  minHeartbeatFrequencyMS: {\n    default: 500,\n    type: 'uint'\n  },\n  monitorCommands: {\n    default: false,\n    type: 'boolean'\n  },\n  name: {\n    target: 'driverInfo',\n    transform({ values: [value], options }) {\n      return { ...options.driverInfo, name: String(value) };\n    }\n  } as OptionDescriptor,\n  noDelay: {\n    default: true,\n    type: 'boolean'\n  },\n  pkFactory: {\n    default: DEFAULT_PK_FACTORY,\n    transform({ values: [value] }): PkFactory {\n      if (isRecord(value, ['createPk'] as const) && typeof value.createPk === 'function') {\n        return value as PkFactory;\n      }\n      throw new MongoParseError(\n        `Option pkFactory must be an object with a createPk function, got ${value}`\n      );\n    }\n  },\n  promoteBuffers: {\n    type: 'boolean'\n  },\n  promoteLongs: {\n    type: 'boolean'\n  },\n  promoteValues: {\n    type: 'boolean'\n  },\n  useBigInt64: {\n    type: 'boolean'\n  },\n  proxyHost: {\n    type: 'string'\n  },\n  proxyPassword: {\n    type: 'string'\n  },\n  proxyPort: {\n    type: 'uint'\n  },\n  proxyUsername: {\n    type: 'string'\n  },\n  raw: {\n    default: false,\n    type: 'boolean'\n  },\n  readConcern: {\n    transform({ values: [value], options }) {\n      if (value instanceof ReadConcern || isRecord(value, ['level'] as const)) {\n        return ReadConcern.fromOptions({ ...options.readConcern, ...value } as any);\n      }\n      throw new MongoParseError(`ReadConcern must be an object, got ${JSON.stringify(value)}`);\n    }\n  },\n  readConcernLevel: {\n    target: 'readConcern',\n    transform({ values: [level], options }) {\n      return ReadConcern.fromOptions({\n        ...options.readConcern,\n        level: level as ReadConcernLevel\n      });\n    }\n  },\n  readPreference: {\n    default: ReadPreference.primary,\n    transform({ values: [value], options }) {\n      if (value instanceof ReadPreference) {\n        return ReadPreference.fromOptions({\n          readPreference: { ...options.readPreference, ...value },\n          ...value\n        } as any);\n      }\n      if (isRecord(value, ['mode'] as const)) {\n        const rp = ReadPreference.fromOptions({\n          readPreference: { ...options.readPreference, ...value },\n          ...value\n        } as any);\n        if (rp) return rp;\n        else throw new MongoParseError(`Cannot make read preference from ${JSON.stringify(value)}`);\n      }\n      if (typeof value === 'string') {\n        const rpOpts = {\n          hedge: options.readPreference?.hedge,\n          maxStalenessSeconds: options.readPreference?.maxStalenessSeconds\n        };\n        return new ReadPreference(\n          value as ReadPreferenceMode,\n          options.readPreference?.tags,\n          rpOpts\n        );\n      }\n      throw new MongoParseError(`Unknown ReadPreference value: ${value}`);\n    }\n  },\n  readPreferenceTags: {\n    target: 'readPreference',\n    transform({\n      values,\n      options\n    }: {\n      values: Array<string | Record<string, string>[]>;\n      options: MongoClientOptions;\n    }) {\n      const tags: Array<string | Record<string, string>> = Array.isArray(values[0])\n        ? values[0]\n        : (values as Array<string>);\n      const readPreferenceTags = [];\n      for (const tag of tags) {\n        const readPreferenceTag: TagSet = Object.create(null);\n        if (typeof tag === 'string') {\n          for (const [k, v] of entriesFromString(tag)) {\n            readPreferenceTag[k] = v;\n          }\n        }\n        if (isRecord(tag)) {\n          for (const [k, v] of Object.entries(tag)) {\n            readPreferenceTag[k] = v;\n          }\n        }\n        readPreferenceTags.push(readPreferenceTag);\n      }\n      return ReadPreference.fromOptions({\n        readPreference: options.readPreference,\n        readPreferenceTags\n      });\n    }\n  },\n  replicaSet: {\n    type: 'string'\n  },\n  retryReads: {\n    default: true,\n    type: 'boolean'\n  },\n  retryWrites: {\n    default: true,\n    type: 'boolean'\n  },\n  serializeFunctions: {\n    type: 'boolean'\n  },\n  serverMonitoringMode: {\n    default: 'auto',\n    transform({ values: [value] }) {\n      if (!Object.values(ServerMonitoringMode).includes(value as any)) {\n        throw new MongoParseError(\n          'serverMonitoringMode must be one of `auto`, `poll`, or `stream`'\n        );\n      }\n      return value;\n    }\n  },\n  serverSelectionTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  servername: {\n    type: 'string'\n  },\n  socketTimeoutMS: {\n    // TODO(NODE-6491): deprecated: 'Please use timeoutMS instead',\n    default: 0,\n    type: 'uint'\n  },\n  srvMaxHosts: {\n    type: 'uint',\n    default: 0\n  },\n  srvServiceName: {\n    type: 'string',\n    default: 'mongodb'\n  },\n  ssl: {\n    target: 'tls',\n    type: 'boolean'\n  },\n  timeoutMS: {\n    type: 'uint'\n  },\n  tls: {\n    type: 'boolean'\n  },\n  tlsAllowInvalidCertificates: {\n    target: 'rejectUnauthorized',\n    transform({ name, values: [value] }) {\n      // allowInvalidCertificates is the inverse of rejectUnauthorized\n      return !getBoolean(name, value);\n    }\n  },\n  tlsAllowInvalidHostnames: {\n    target: 'checkServerIdentity',\n    transform({ name, values: [value] }) {\n      // tlsAllowInvalidHostnames means setting the checkServerIdentity function to a noop\n      return getBoolean(name, value) ? () => undefined : undefined;\n    }\n  },\n  tlsCAFile: {\n    type: 'string'\n  },\n  tlsCRLFile: {\n    type: 'string'\n  },\n  tlsCertificateKeyFile: {\n    type: 'string'\n  },\n  tlsCertificateKeyFilePassword: {\n    target: 'passphrase',\n    type: 'any'\n  },\n  tlsInsecure: {\n    transform({ name, options, values: [value] }) {\n      const tlsInsecure = getBoolean(name, value);\n      if (tlsInsecure) {\n        options.checkServerIdentity = () => undefined;\n        options.rejectUnauthorized = false;\n      } else {\n        options.checkServerIdentity = options.tlsAllowInvalidHostnames\n          ? () => undefined\n          : undefined;\n        options.rejectUnauthorized = options.tlsAllowInvalidCertificates ? false : true;\n      }\n      return tlsInsecure;\n    }\n  },\n  w: {\n    target: 'writeConcern',\n    transform({ values: [value], options }) {\n      return WriteConcern.fromOptions({ writeConcern: { ...options.writeConcern, w: value as W } });\n    }\n  },\n  waitQueueTimeoutMS: {\n    // TODO(NODE-6491): deprecated: 'Please use timeoutMS instead',\n    default: 0,\n    type: 'uint'\n  },\n  writeConcern: {\n    target: 'writeConcern',\n    transform({ values: [value], options }) {\n      if (isRecord(value) || value instanceof WriteConcern) {\n        return WriteConcern.fromOptions({\n          writeConcern: {\n            ...options.writeConcern,\n            ...value\n          }\n        });\n      } else if (value === 'majority' || typeof value === 'number') {\n        return WriteConcern.fromOptions({\n          writeConcern: {\n            ...options.writeConcern,\n            w: value\n          }\n        });\n      }\n\n      throw new MongoParseError(`Invalid WriteConcern cannot parse: ${JSON.stringify(value)}`);\n    }\n  },\n  wtimeout: {\n    deprecated: 'Please use wtimeoutMS instead',\n    target: 'writeConcern',\n    transform({ values: [value], options }) {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          wtimeout: getUIntFromOptions('wtimeout', value)\n        }\n      });\n      if (wc) return wc;\n      throw new MongoParseError(`Cannot make WriteConcern from wtimeout`);\n    }\n  } as OptionDescriptor,\n  wtimeoutMS: {\n    target: 'writeConcern',\n    transform({ values: [value], options }) {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          wtimeoutMS: getUIntFromOptions('wtimeoutMS', value)\n        }\n      });\n      if (wc) return wc;\n      throw new MongoParseError(`Cannot make WriteConcern from wtimeout`);\n    }\n  },\n  zlibCompressionLevel: {\n    default: 0,\n    type: 'int'\n  },\n  mongodbLogPath: {\n    transform({ values: [value] }) {\n      if (\n        !(\n          (typeof value === 'string' && ['stderr', 'stdout'].includes(value)) ||\n          (value &&\n            typeof value === 'object' &&\n            'write' in value &&\n            typeof value.write === 'function')\n        )\n      ) {\n        throw new MongoAPIError(\n          `Option 'mongodbLogPath' must be of type 'stderr' | 'stdout' | MongoDBLogWritable`\n        );\n      }\n      return value;\n    }\n  },\n  mongodbLogComponentSeverities: {\n    transform({ values: [value] }) {\n      if (typeof value !== 'object' || !value) {\n        throw new MongoAPIError(`Option 'mongodbLogComponentSeverities' must be a non-null object`);\n      }\n      for (const [k, v] of Object.entries(value)) {\n        if (typeof v !== 'string' || typeof k !== 'string') {\n          throw new MongoAPIError(\n            `User input for option 'mongodbLogComponentSeverities' object cannot include a non-string key or value`\n          );\n        }\n        if (!Object.values(MongoLoggableComponent).some(val => val === k) && k !== 'default') {\n          throw new MongoAPIError(\n            `User input for option 'mongodbLogComponentSeverities' contains invalid key: ${k}`\n          );\n        }\n        if (!Object.values(SeverityLevel).some(val => val === v)) {\n          throw new MongoAPIError(\n            `Option 'mongodbLogComponentSeverities' does not support ${v} as a value for ${k}`\n          );\n        }\n      }\n      return value;\n    }\n  },\n  mongodbLogMaxDocumentLength: { type: 'uint' },\n  // Custom types for modifying core behavior\n  connectionType: { type: 'any' },\n  srvPoller: { type: 'any' },\n  // Accepted Node.js Options\n  allowPartialTrustChain: { type: 'any' },\n  minDHSize: { type: 'any' },\n  pskCallback: { type: 'any' },\n  secureContext: { type: 'any' },\n  enableTrace: { type: 'any' },\n  requestCert: { type: 'any' },\n  rejectUnauthorized: { type: 'any' },\n  checkServerIdentity: { type: 'any' },\n  keepAliveInitialDelay: { type: 'any' },\n  ALPNProtocols: { type: 'any' },\n  SNICallback: { type: 'any' },\n  session: { type: 'any' },\n  requestOCSP: { type: 'any' },\n  localAddress: { type: 'any' },\n  localPort: { type: 'any' },\n  hints: { type: 'any' },\n  lookup: { type: 'any' },\n  ca: { type: 'any' },\n  cert: { type: 'any' },\n  ciphers: { type: 'any' },\n  crl: { type: 'any' },\n  ecdhCurve: { type: 'any' },\n  key: { type: 'any' },\n  passphrase: { type: 'any' },\n  pfx: { type: 'any' },\n  secureProtocol: { type: 'any' },\n  index: { type: 'any' },\n  // Legacy options from v3 era\n  useNewUrlParser: {\n    type: 'boolean',\n    deprecated:\n      'useNewUrlParser has no effect since Node.js Driver version 4.0.0 and will be removed in the next major version'\n  } as OptionDescriptor,\n  useUnifiedTopology: {\n    type: 'boolean',\n    deprecated:\n      'useUnifiedTopology has no effect since Node.js Driver version 4.0.0 and will be removed in the next major version'\n  } as OptionDescriptor,\n  __skipPingOnConnect: { type: 'boolean' }\n} as Record<keyof MongoClientOptions, OptionDescriptor>;\n\nexport const DEFAULT_OPTIONS = new CaseInsensitiveMap(\n  Object.entries(OPTIONS)\n    .filter(([, descriptor]) => descriptor.default != null)\n    .map(([k, d]) => [k, d.default])\n);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}